{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionSupportsApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionSupportsApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"244d15187e7f59974b9c7cc38eb17236903bdc06","date":1424161968,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51a6c45b517e7699dc1e378c609477edb3bc7e7d","date":1425218350,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817cea575a55c28d8dfc1248162dcf95c6a811d6","date":1425309986,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"a\"));\n    pq.add(new Term(\"field\", \"b\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q, random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0), null);\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.asTwoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), random().nextBoolean());\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createWeight(searcher.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testConjunctionPropagatesApproximations().mjava","sourceNew":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createWeight(searcher.rewrite(q.build()), ScoreMode.COMPLETE, 1);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConjunctionPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a b c\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    // not LuceneTestCase.newSearcher to not have the asserting wrappers\n    // and do instanceof checks\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n\n    PhraseQuery pq = new PhraseQuery(\"field\", \"a\", \"b\");\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(pq, Occur.MUST);\n    q.add(new TermQuery(new Term(\"field\", \"c\")), Occur.FILTER);\n\n    final Weight weight = searcher.createNormalizedWeight(q.build(), ScoreMode.COMPLETE);\n    final Scorer scorer = weight.scorer(searcher.getIndexReader().leaves().get(0));\n    assertTrue(scorer instanceof ConjunctionScorer);\n    assertNotNull(scorer.twoPhaseIterator());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51a6c45b517e7699dc1e378c609477edb3bc7e7d":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817cea575a55c28d8dfc1248162dcf95c6a811d6":["51a6c45b517e7699dc1e378c609477edb3bc7e7d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7dd748bb245633a8195281556bb0e68a6ea97d18","9fc47cb7b4346802411bb432f501ed0673d7119e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"244d15187e7f59974b9c7cc38eb17236903bdc06":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["244d15187e7f59974b9c7cc38eb17236903bdc06","817cea575a55c28d8dfc1248162dcf95c6a811d6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e9e1499c5d26c936238506df90a3c02c76707722":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"b06445ae1731e049327712db0454e5643ca9b7fe":["51a6c45b517e7699dc1e378c609477edb3bc7e7d","817cea575a55c28d8dfc1248162dcf95c6a811d6"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["817cea575a55c28d8dfc1248162dcf95c6a811d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"51a6c45b517e7699dc1e378c609477edb3bc7e7d":["817cea575a55c28d8dfc1248162dcf95c6a811d6","b06445ae1731e049327712db0454e5643ca9b7fe"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["244d15187e7f59974b9c7cc38eb17236903bdc06"],"817cea575a55c28d8dfc1248162dcf95c6a811d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"244d15187e7f59974b9c7cc38eb17236903bdc06":["51a6c45b517e7699dc1e378c609477edb3bc7e7d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}