{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","commits":[{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      searcher.search(new ConstantScoreQuery(red), 1);\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      searcher.search(new ConstantScoreQuery(red), 1);\n    }\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      searcher.search(new ConstantScoreQuery(red), 1);\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      searcher.search(new ConstantScoreQuery(red), 1);\n    }\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","sourceNew":null,"sourceOld":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      searcher.search(new ConstantScoreQuery(red), 1);\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      searcher.search(new ConstantScoreQuery(red), 1);\n    }\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","sourceNew":null,"sourceOld":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true);\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    if (!(queryCache.cachedQueries().equals(Collections.emptyList()))) {\n      searcher.search(new ConstantScoreQuery(red), 1);\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      searcher.search(new ConstantScoreQuery(red), 1);\n    }\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red)))) {\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(green, red)))) {\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    }\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n    if (!(queryCache.cachedQueries().equals(Arrays.asList(red, blue)))) {\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    } else {\n      // Let the cache load be completed\n      Thread.sleep(200);\n      assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n    }\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n    service.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","pathOld":"/dev/null","sourceNew":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final CountDownLatch[] latch = {new CountDownLatch(1)};\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY) {\n      @Override\n      protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n        super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n        latch[0].countDown();\n      }\n    };\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n    assertEquals(queryCache.getHitCount(), 1);\n\n    latch[0] = new CountDownLatch(1);\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n    assertEquals(2, queryCache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    assertEquals(3, queryCache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    service.shutdown();\n    service.awaitTermination(300, TimeUnit.MILLISECONDS);\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":4,"author":"Atri Sharma","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testLRUConcurrentLoadAndEviction().mjava","sourceNew":null,"sourceOld":"  public void testLRUConcurrentLoadAndEviction() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"blue\", Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    f.setStringValue(\"red\");\n    w.addDocument(doc);\n    f.setStringValue(\"green\");\n    w.addDocument(doc);\n    final DirectoryReader reader = w.getReader();\n    ExecutorService service = new ThreadPoolExecutor(4, 4, 0L, TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue<Runnable>(),\n        new NamedThreadFactory(\"TestLRUQueryCache\"));\n\n    IndexSearcher searcher = new IndexSearcher(reader, service);\n\n    final CountDownLatch[] latch = {new CountDownLatch(1)};\n\n    final LRUQueryCache queryCache = new LRUQueryCache(2, 100000, context -> true, Float.POSITIVE_INFINITY) {\n      @Override\n      protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n        super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n        latch[0].countDown();\n      }\n    };\n\n    final Query blue = new TermQuery(new Term(\"color\", \"blue\"));\n    final Query red = new TermQuery(new Term(\"color\", \"red\"));\n    final Query green = new TermQuery(new Term(\"color\", \"green\"));\n\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCache(queryCache);\n    // the filter is not cached on any segment: no changes\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(green), 1);\n    assertEquals(Collections.emptyList(), queryCache.cachedQueries());\n\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // First read should miss\n    searcher.search(new ConstantScoreQuery(red), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n\n    // Second read should hit\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Collections.singletonList(red), queryCache.cachedQueries());\n    assertEquals(queryCache.getHitCount(), 1);\n\n    latch[0] = new CountDownLatch(1);\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(red, green), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(green, red), queryCache.cachedQueries());\n    assertEquals(2, queryCache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n\n    searcher.search(new ConstantScoreQuery(blue), 1);\n    assertEquals(Arrays.asList(red, blue), queryCache.cachedQueries());\n    assertEquals(3, queryCache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n\n    searcher.search(new ConstantScoreQuery(green), 1);\n\n    // Let the cache load be completed\n    latch[0].await();\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    service.shutdown();\n    service.awaitTermination(300, TimeUnit.MILLISECONDS);\n\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n    searcher.search(new ConstantScoreQuery(red), 1);\n    assertEquals(Arrays.asList(blue, green), queryCache.cachedQueries());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}