{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(LeafReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(LeafReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, reader.maxDoc(), normsReader.getNorms(info), new Bits.MatchAllBits(reader.maxDoc()));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0","date":1552989190,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info), normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      NormsProducer normsReader = reader.getNormsReader();\n      if (normsReader != null) {\n        normsReader = normsReader.getMergeInstance();\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNumericDocValues(info.name, normsReader.getNorms(info));\n          ++status.totFields;\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields] [took %.3f sec]\", status.totFields, nsToSec(System.nanoTime()-startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}