{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","commits":[{"id":"35a328e6f64355319d0b316956c260b0be251aca","date":1513957730,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\", props, loader, cloudManager)) {\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n\n    events.clear();\n    tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n    props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\", props, loader, cloudManager)) {\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n      metricTrigger.configure(loader, cloudManager, props);\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n\n    events.clear();\n    tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n    props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n      metricTrigger.configure(loader, cloudManager, props);\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\", props, loader, cloudManager)) {\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n\n    events.clear();\n    tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n    props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\", props, loader, cloudManager)) {\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0906682f4fba42a1c91862d7451b0f41ba539aa","date":1583357564,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient())) {\n      try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n        metricTrigger.configure(loader, cloudManager, props);\n        metricTrigger.setProcessor(noFirstRunProcessor);\n        metricTrigger.run();\n        metricTrigger.setProcessor(event -> events.add(event));\n        assertEquals(0, events.size());\n        Thread.sleep(waitForSeconds * 1000 + 2000);\n        metricTrigger.run();\n        assertEquals(1, events.size());\n      }\n\n      events.clear();\n      tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n      props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n      try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n        metricTrigger.configure(loader, cloudManager, props);\n        metricTrigger.setProcessor(noFirstRunProcessor);\n        metricTrigger.run();\n        metricTrigger.setProcessor(event -> events.add(event));\n        assertEquals(0, events.size());\n        Thread.sleep(waitForSeconds * 1000 + 2000);\n        metricTrigger.run();\n        assertEquals(1, events.size());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n      metricTrigger.configure(loader, cloudManager, props);\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n\n    events.clear();\n    tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n    props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n    try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n      metricTrigger.configure(loader, cloudManager, props);\n      metricTrigger.setProcessor(noFirstRunProcessor);\n      metricTrigger.run();\n      metricTrigger.setProcessor(event -> events.add(event));\n      assertEquals(0, events.size());\n      Thread.sleep(waitForSeconds * 1000 + 2000);\n      metricTrigger.run();\n      assertEquals(1, events.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/MetricTriggerTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();\n    String shardId = coreDescriptor.getCloudDescriptor().getShardId();\n    String coreName = coreDescriptor.getName();\n    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);\n    long waitForSeconds = 2 + random().nextInt(5);\n    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);\n    String tag = \"metrics:\" + registry + \":ADMIN./admin/file.requests\";\n\n    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);\n\n    final List<TriggerEvent> events = new ArrayList<>();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient())) {\n      try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n        metricTrigger.configure(loader, cloudManager, props);\n        metricTrigger.setProcessor(noFirstRunProcessor);\n        metricTrigger.run();\n        metricTrigger.setProcessor(event -> events.add(event));\n        assertEquals(0, events.size());\n        Thread.sleep(waitForSeconds * 1000 + 2000);\n        metricTrigger.run();\n        assertEquals(1, events.size());\n      }\n\n      events.clear();\n      tag = \"metrics:\" + registry + \":ADMIN./admin/file.handlerStart\";\n      props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);\n      try (MetricTrigger metricTrigger = new MetricTrigger(\"metricTrigger\")) {\n        metricTrigger.configure(loader, cloudManager, props);\n        metricTrigger.setProcessor(noFirstRunProcessor);\n        metricTrigger.run();\n        metricTrigger.setProcessor(event -> events.add(event));\n        assertEquals(0, events.size());\n        Thread.sleep(waitForSeconds * 1000 + 2000);\n        metricTrigger.run();\n        assertEquals(1, events.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0906682f4fba42a1c91862d7451b0f41ba539aa":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"3f504512a03d978990cbff30db0522b354e846db":["d0906682f4fba42a1c91862d7451b0f41ba539aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35a328e6f64355319d0b316956c260b0be251aca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["35a328e6f64355319d0b316956c260b0be251aca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d0906682f4fba42a1c91862d7451b0f41ba539aa":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35a328e6f64355319d0b316956c260b0be251aca"],"35a328e6f64355319d0b316956c260b0be251aca":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d0906682f4fba42a1c91862d7451b0f41ba539aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}