{"path":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#handleOther(Accumulator,IdentityHashMap[Class[#],ClassCache],ArrayList[Object],Object,Class[#]).mjava","commits":[{"id":"8913cb9a44846cb65e41bee682ba0372f1636056","date":1547808953,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/RamUsageTester#handleOther(Accumulator,IdentityHashMap[Class[#],ClassCache],ArrayList[Object],Object,Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  private static long handleOther(Accumulator accumulator, IdentityHashMap<Class<?>, ClassCache> classCache, ArrayList<Object> stack, Object ob, Class<?> obClazz) {\n    /*\n     * Consider an object. Push any references it has to the processing stack\n     * and accumulate this object's shallow size.\n     */\n    try {\n      if (Constants.JRE_IS_MINIMUM_JAVA9) {\n        long alignedShallowInstanceSize = RamUsageEstimator.shallowSizeOf(ob);\n\n        Predicate<Class<?>> isJavaModule = (clazz) -> {\n          return clazz.getName().startsWith(\"java.\");\n        };\n\n        // Java 9: Best guess for some known types, as we cannot precisely look into runtime classes:\n        final ToLongFunction<Object> func = SIMPLE_TYPES.get(obClazz);\n        if (func != null) { // some simple type like String where the size is easy to get from public properties\n          return accumulator.accumulateObject(ob, alignedShallowInstanceSize + func.applyAsLong(ob),\n              Collections.emptyMap(), stack);\n        } else if (ob instanceof Enum) {\n          return alignedShallowInstanceSize;\n        } else if (ob instanceof ByteBuffer) {\n          // Approximate ByteBuffers with their underlying storage (ignores field overhead).\n          return byteArraySize(((ByteBuffer) ob).capacity());\n        }  else if (isJavaModule.test(obClazz) && ob instanceof Map) {\n          final List<Object> values = ((Map<?,?>) ob).entrySet().stream()\n              .flatMap(e -> Stream.of(e.getKey(), e.getValue()))\n              .collect(Collectors.toList());\n          return accumulator.accumulateArray(ob, alignedShallowInstanceSize + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER, values, stack)\n              + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n        } else if (isJavaModule.test(obClazz) && ob instanceof Iterable) {\n          final List<Object> values = StreamSupport.stream(((Iterable<?>) ob).spliterator(), false)\n            .collect(Collectors.toList());\n          return accumulator.accumulateArray(ob, alignedShallowInstanceSize + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER, values, stack)\n              + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n        } else {\n          // Fallback to reflective access.\n        }\n      }\n\n      ClassCache cachedInfo = classCache.get(obClazz);\n      if (cachedInfo == null) {\n        classCache.put(obClazz, cachedInfo = createCacheEntry(obClazz));\n      }\n\n      final Map<Field, Object> fieldValues = new HashMap<>();\n      for (Field f : cachedInfo.referenceFields) {\n        fieldValues.put(f, f.get(ob));\n      }\n      return accumulator.accumulateObject(ob, cachedInfo.alignedShallowInstanceSize, fieldValues, stack);\n    } catch (IllegalAccessException e) {\n      // this should never happen as we enabled setAccessible().\n      throw new RuntimeException(\"Reflective field access failed?\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8913cb9a44846cb65e41bee682ba0372f1636056":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8913cb9a44846cb65e41bee682ba0372f1636056"]},"commit2Childs":{"8913cb9a44846cb65e41bee682ba0372f1636056":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8913cb9a44846cb65e41bee682ba0372f1636056"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}