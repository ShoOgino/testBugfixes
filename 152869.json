{"path":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      Random random = newRandom();\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      Random random = newRandom();\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}