{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set = new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    CharArraySet unmodifiableSet = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, unmodifiableSet.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", unmodifiableSet.contains(NOT_IN_SET));\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(NOT_IN_SET.toCharArray()));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(NOT_IN_SET));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(new StringBuilder(NOT_IN_SET)));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.clear());\n    assertFalse(\"Changed unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add((Object) NOT_IN_SET));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true)));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true)));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.addAll(Arrays.asList(NOT_IN_SET)));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n\n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));\n      assertTrue(unmodifiableSet.contains(TEST_STOP_WORDS[i]));\n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set = new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    CharArraySet unmodifiableSet = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, unmodifiableSet.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", unmodifiableSet.contains(NOT_IN_SET));\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(NOT_IN_SET.toCharArray()));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(NOT_IN_SET));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add(new StringBuilder(NOT_IN_SET)));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.clear());\n    assertFalse(\"Changed unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.add((Object) NOT_IN_SET));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true)));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true)));\n    assertEquals(\"Size of unmodifiable set has changed\", size, unmodifiableSet.size());\n\n    expectThrows(UnsupportedOperationException.class, () -> unmodifiableSet.addAll(Arrays.asList(NOT_IN_SET)));\n    assertFalse(\"Test String has been added to unmodifiable set\", unmodifiableSet.contains(NOT_IN_SET));\n\n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));\n      assertTrue(unmodifiableSet.contains(TEST_STOP_WORDS[i]));\n    }\n  }\n\n","sourceOld":"  // TODO: break this up into simpler test methods, vs \"telling a story\"\n  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(NOT_IN_SET));\n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}