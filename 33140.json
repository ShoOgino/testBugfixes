{"path":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","commits":[{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    byte barNorms[] = MultiNorms.norms(reader, \"bar\");\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    byte barNorms[] = MultiNorms.norms(reader, \"bar\");\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    byte barNorms[] = MultiNorms.norms(reader, \"bar\");\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    byte fooNorms[] = MultiNorms.norms(reader, \"foo\");\n    byte barNorms[] = MultiNorms.norms(reader, \"bar\");\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimilarityProvider#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    // sanity check of norms writer\n    // TODO: generalize\n    byte fooNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    byte barNorms[] = (byte[]) MultiDocValues.getNormDocValues(reader, \"bar\").getSource().getArray();\n    for (int i = 0; i < fooNorms.length; i++) {\n      assertFalse(fooNorms[i] == barNorms[i]);\n    }\n    \n    // sanity check of searching\n    TopDocs foodocs = searcher.search(new TermQuery(new Term(\"foo\", \"brown\")), 10);\n    assertTrue(foodocs.totalHits > 0);\n    TopDocs bardocs = searcher.search(new TermQuery(new Term(\"bar\", \"brown\")), 10);\n    assertTrue(bardocs.totalHits > 0);\n    assertTrue(foodocs.scoreDocs[0].score < bardocs.scoreDocs[0].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}