{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for initialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(FacetLabel,int,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowDirectory indexDir = new SlowDirectory(-1, null); // no slowness for initialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final FacetLabel abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry, int numCategories)\n      throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null); // no slowness for initialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new FacetLabel(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i = 0; i < numCategories; i++) {\n      final FacetLabel cp = new FacetLabel(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.close();\n    \n    final AtomicBoolean stop = new AtomicBoolean(false);\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1 + getPriority());\n        try {\n          while (!stop.get()) {\n            int lastOrd = tr.getParallelTaxonomyArrays().parents().length - 1;\n            assertNotNull(\"path of last-ord \" + lastOrd + \" is not found!\", tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getParallelTaxonomyArrays(), retry, retrieval[0]++);\n            sleep(10); // don't starve refresh()'s CPU, which sleeps every 50 bytes for 1 ms\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop.set(true);\n        }\n      }\n\n      private void assertChildrenArrays(ParallelTaxonomyArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.children()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.children()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    TaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(tr);\n    if (newTaxoReader != null) {\n      newTaxoReader.close();\n    }\n    \n    stop.set(true);\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["d77dafd89756a5161d244985903e3487ca109182"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}