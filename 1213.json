{"path":"backwards/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}