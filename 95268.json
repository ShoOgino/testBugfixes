{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexFieldsWriter.PreFlexTermsWriter.PostingsWriter#startDoc(int,int).mjava","sourceNew":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","sourceOld":"      @Override\n      public void startDoc(int docID, int termDocFreq) throws IOException {\n        //System.out.println(\"    w doc=\" + docID);\n\n        final int delta = docID - lastDocID;\n        if (docID < 0 || (df > 0 && delta <= 0)) {\n          throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n        }\n\n        if ((++df % termsOut.skipInterval) == 0) {\n          skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n          skipListWriter.bufferSkip(df);\n        }\n\n        lastDocID = docID;\n\n        assert docID < totalNumDocs: \"docID=\" + docID + \" totalNumDocs=\" + totalNumDocs;\n\n        if (omitTF) {\n          freqOut.writeVInt(delta);\n        } else {\n          final int code = delta << 1;\n          if (termDocFreq == 1) {\n            freqOut.writeVInt(code|1);\n          } else {\n            freqOut.writeVInt(code);\n            freqOut.writeVInt(termDocFreq);\n          }\n        }\n        lastPosition = 0;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}