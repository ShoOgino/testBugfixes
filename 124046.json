{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"/dev/null","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":null,"sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"/dev/null","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68759a52d8da5c4ac149c4484a1dbc071b480bb3","date":1276544744,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"c26f00b574427b55127e869b935845554afde1fa":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}