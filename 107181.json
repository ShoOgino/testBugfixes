{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","commits":[{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4","date":1279914031,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"561ce312f2a4fe32ff20c66fb7684061fe5b927f","date":1281033135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":null,"sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"1ca38aecd0204be91049ec782668f642a68d9935":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["15bbd254c1506df5299c4df8c148262c7bd6301e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["561ce312f2a4fe32ff20c66fb7684061fe5b927f"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"],"561ce312f2a4fe32ff20c66fb7684061fe5b927f":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","561ce312f2a4fe32ff20c66fb7684061fe5b927f"],"1ca38aecd0204be91049ec782668f642a68d9935":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["1ca38aecd0204be91049ec782668f642a68d9935"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"561ce312f2a4fe32ff20c66fb7684061fe5b927f":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}