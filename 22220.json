{"path":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For extra performance you can globally enable the new {@link #incrementToken}\n   * API using {@link Attribute}s. There will be a small, but in most cases neglectible performance \n   * increase by enabling this, but it only works if <b>all</b> TokenStreams and -Filters\n   * use the new API and implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>This setting only affects TokenStreams instantiated after this call. All TokenStreams\n   * already created use the other setting.\n   * <P>All core analyzers are compatible with this setting, if you have own\n   * TokenStreams/-Filters, that are also compatible, enable this.\n   * <P>When enabled, tokenization may throw {@link UnsupportedOperationException}s,\n   * if the whole tokenizer chain is not compatible.\n   * <P>The default is <code>false</code>, so there is the fallback to the old API available.\n   * @deprecated This setting will be <code>true</code> per default in Lucene 3.0,\n   * when {@link #incrementToken} is abstract and must be always implemented.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39c72a0a1f317a4165b759c7842b5d73d7858d1d","date":1251209760,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","sourceNew":"  /**\n   * For extra performance you can globally enable the new\n   * {@link #incrementToken} API using {@link Attribute}s. There will be a\n   * small, but in most cases negligible performance increase by enabling this,\n   * but it only works if <b>all</b> {@link TokenStream}s use the new API and\n   * implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>\n   * This setting only affects {@link TokenStream}s instantiated after this\n   * call. All {@link TokenStream}s already created use the other setting.\n   * <P>\n   * All core {@link Analyzer}s are compatible with this setting, if you have\n   * your own {@link TokenStream}s that are also compatible, you should enable\n   * this.\n   * <P>\n   * When enabled, tokenization may throw {@link UnsupportedOperationException}\n   * s, if the whole tokenizer chain is not compatible eg one of the\n   * {@link TokenStream}s does not implement the new {@link TokenStream} API.\n   * <P>\n   * The default is <code>false</code>, so there is the fallback to the old API\n   * available.\n   * \n   * @deprecated This setting will no longer be needed in Lucene 3.0 as the old\n   *             API will be removed.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","sourceOld":"  /**\n   * For extra performance you can globally enable the new {@link #incrementToken}\n   * API using {@link Attribute}s. There will be a small, but in most cases neglectible performance \n   * increase by enabling this, but it only works if <b>all</b> TokenStreams and -Filters\n   * use the new API and implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>This setting only affects TokenStreams instantiated after this call. All TokenStreams\n   * already created use the other setting.\n   * <P>All core analyzers are compatible with this setting, if you have own\n   * TokenStreams/-Filters, that are also compatible, enable this.\n   * <P>When enabled, tokenization may throw {@link UnsupportedOperationException}s,\n   * if the whole tokenizer chain is not compatible.\n   * <P>The default is <code>false</code>, so there is the fallback to the old API available.\n   * @deprecated This setting will be <code>true</code> per default in Lucene 3.0,\n   * when {@link #incrementToken} is abstract and must be always implemented.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b494acb55b671ca43504fbe9f6120ae44819ecb","date":1251652238,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","sourceNew":"  /**\n   * For extra performance you can globally enable the new\n   * {@link #incrementToken} API using {@link Attribute}s. There will be a\n   * small, but in most cases negligible performance increase by enabling this,\n   * but it only works if <b>all</b> <code>TokenStream</code>s use the new API and\n   * implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>\n   * This setting only affects <code>TokenStream</code>s instantiated after this\n   * call. All <code>TokenStream</code>s already created use the other setting.\n   * <P>\n   * All core {@link Analyzer}s are compatible with this setting, if you have\n   * your own <code>TokenStream</code>s that are also compatible, you should enable\n   * this.\n   * <P>\n   * When enabled, tokenization may throw {@link UnsupportedOperationException}\n   * s, if the whole tokenizer chain is not compatible eg one of the\n   * <code>TokenStream</code>s does not implement the new <code>TokenStream</code> API.\n   * <P>\n   * The default is <code>false</code>, so there is the fallback to the old API\n   * available.\n   * \n   * @deprecated This setting will no longer be needed in Lucene 3.0 as the old\n   *             API will be removed.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","sourceOld":"  /**\n   * For extra performance you can globally enable the new\n   * {@link #incrementToken} API using {@link Attribute}s. There will be a\n   * small, but in most cases negligible performance increase by enabling this,\n   * but it only works if <b>all</b> {@link TokenStream}s use the new API and\n   * implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>\n   * This setting only affects {@link TokenStream}s instantiated after this\n   * call. All {@link TokenStream}s already created use the other setting.\n   * <P>\n   * All core {@link Analyzer}s are compatible with this setting, if you have\n   * your own {@link TokenStream}s that are also compatible, you should enable\n   * this.\n   * <P>\n   * When enabled, tokenization may throw {@link UnsupportedOperationException}\n   * s, if the whole tokenizer chain is not compatible eg one of the\n   * {@link TokenStream}s does not implement the new {@link TokenStream} API.\n   * <P>\n   * The default is <code>false</code>, so there is the fallback to the old API\n   * available.\n   * \n   * @deprecated This setting will no longer be needed in Lucene 3.0 as the old\n   *             API will be removed.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#setOnlyUseNewAPI(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * For extra performance you can globally enable the new\n   * {@link #incrementToken} API using {@link Attribute}s. There will be a\n   * small, but in most cases negligible performance increase by enabling this,\n   * but it only works if <b>all</b> <code>TokenStream</code>s use the new API and\n   * implement {@link #incrementToken}. This setting can only be enabled\n   * globally.\n   * <P>\n   * This setting only affects <code>TokenStream</code>s instantiated after this\n   * call. All <code>TokenStream</code>s already created use the other setting.\n   * <P>\n   * All core {@link Analyzer}s are compatible with this setting, if you have\n   * your own <code>TokenStream</code>s that are also compatible, you should enable\n   * this.\n   * <P>\n   * When enabled, tokenization may throw {@link UnsupportedOperationException}\n   * s, if the whole tokenizer chain is not compatible eg one of the\n   * <code>TokenStream</code>s does not implement the new <code>TokenStream</code> API.\n   * <P>\n   * The default is <code>false</code>, so there is the fallback to the old API\n   * available.\n   * \n   * @deprecated This setting will no longer be needed in Lucene 3.0 as the old\n   *             API will be removed.\n   */\n  public static void setOnlyUseNewAPI(boolean onlyUseNewAPI) {\n    TokenStream.onlyUseNewAPI = onlyUseNewAPI;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["8b494acb55b671ca43504fbe9f6120ae44819ecb"],"8b494acb55b671ca43504fbe9f6120ae44819ecb":["39c72a0a1f317a4165b759c7842b5d73d7858d1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"39c72a0a1f317a4165b759c7842b5d73d7858d1d":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b494acb55b671ca43504fbe9f6120ae44819ecb":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"39c72a0a1f317a4165b759c7842b5d73d7858d1d":["8b494acb55b671ca43504fbe9f6120ae44819ecb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["39c72a0a1f317a4165b759c7842b5d73d7858d1d"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}