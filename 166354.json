{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","commits":[{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","sourceNew":"    private Violation(String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","sourceOld":"    private Violation(String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","pathOld":"/dev/null","sourceNew":"    private Violation(String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","pathOld":"/dev/null","sourceNew":"    private Violation(String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(Clause,String,String,String,Object,Long,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause.Violation#Violation(String,String,String,Object,Long,Object).mjava","sourceNew":"    private Violation(Clause clause, String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.clause = clause;\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","sourceOld":"    private Violation(String coll, String shard, String node, Object actualVal, Long delta, Object tagKey) {\n      this.shard = shard;\n      this.coll = coll;\n      this.node = node;\n      this.delta = delta;\n      this.actualVal = actualVal;\n      this.tagKey = tagKey;\n      hash = (\"\" + coll + \" \" + shard + \" \" + node + \" \" + String.valueOf(tagKey) + \" \" + Utils.toJSONString(getClause().toMap(new HashMap<>()))).hashCode();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","98f11c416d30e556e0004a9a84960702d12d35b1"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}