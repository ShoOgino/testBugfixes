{"path":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n        TermPositions tp = reader.termPositions();\n        tp.seek(new Term(this.field, \"b\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n        tp.seek(new Term(this.field, \"a\"));\n        for (int i = 0; i < 10; i++) {\n            tp.next();\n            assertEquals(tp.doc(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = new MockRAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Random random = newRandom();\n        Directory directory = newDirectory(random);\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new MockRAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Random random = newRandom();\n        Directory directory = newDirectory(random);\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n\n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(new Field(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n\n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n\n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getDeletedDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getDeletedDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", Field.Store.YES, Field.Index.ANALYZED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory, true);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["b21422ff1d1d56499dec481f193b402e5e8def5b","5f4e87790277826a2aea119328600dfb07761f32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}