{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e92a321a2612261e1010a4038c8586e30b081552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}