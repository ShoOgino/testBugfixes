{"path":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","commits":[{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = Math.toRadians(p1D[0]);\n      x1 = Math.toRadians(p1D[1]);\n      y2 = Math.toRadians(p2D[0]);\n      x2 = Math.toRadians(p2D[1]);\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = Math.toRadians(p1D[0]);\n      x1 = Math.toRadians(p1D[1]);\n      y2 = Math.toRadians(p2D[0]);\n      x2 = Math.toRadians(p2D[1]);\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.haversine(y1, x1, y2, x2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8726333bca804ff1ebd79d1310561641b5dfcb9e","date":1331697951,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * HaversineConstFunction.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = Math.toRadians(p1D[0]);\n      x1 = Math.toRadians(p1D[1]);\n      y2 = Math.toRadians(p2D[0]);\n      x2 = Math.toRadians(p2D[1]);\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * HaversineConstFunction.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * HaversineConstFunction.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) throws IOException {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) throws IOException {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) throws IOException {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, FunctionValues p1DV, FunctionValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double y1;\n    double x1;\n    double y2;\n    double x2;\n    if (convertToRadians) {\n      y1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      y1 = p1D[0];\n      x1 = p1D[1];\n      y2 = p2D[0];\n      x2 = p2D[1];\n    }\n    return DistanceUtils.distHaversineRAD(y1,x1,y2,x2)*radius;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["da956410d7a790f567af4e7e94584fb0930212f2"],"da956410d7a790f567af4e7e94584fb0930212f2":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["e47768b261c28e7e6032060e8331475c81057953"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["d638301ad1cfcae567b681b893bc8781f0ee48a5","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"da956410d7a790f567af4e7e94584fb0930212f2":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["da956410d7a790f567af4e7e94584fb0930212f2"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e47768b261c28e7e6032060e8331475c81057953":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}