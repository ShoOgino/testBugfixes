{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#migrateIndex(Directory,FacetIndexingParams).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#migrateIndex(Directory,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  private void migrateIndex(Directory indexDir, FacetIndexingParams fip) throws Exception {\n    final Map<String,Term> fieldTerms = FacetsPayloadMigrationReader.buildFieldTermsMap(indexDir, fip);\n    DirectoryReader reader = DirectoryReader.open(indexDir);\n    List<AtomicReaderContext> leaves = reader.leaves();\n    int numReaders = leaves.size();\n    AtomicReader wrappedLeaves[] = new AtomicReader[numReaders];\n    for (int i = 0; i < numReaders; i++) {\n      wrappedLeaves[i] = new FacetsPayloadMigrationReader(leaves.get(i).reader(), fieldTerms);\n    }\n    \n    IndexWriter writer = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.deleteAll();\n    try {\n      writer.addIndexes(new MultiReader(wrappedLeaves));\n      writer.commit();\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#migrateIndex(Directory,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  private void migrateIndex(Directory indexDir, FacetIndexingParams fip) throws Exception {\n    final Map<String,Term> fieldTerms = FacetsPayloadMigrationReader.buildFieldTermsMap(indexDir, fip);\n    DirectoryReader reader = DirectoryReader.open(indexDir);\n    List<AtomicReaderContext> leaves = reader.leaves();\n    int numReaders = leaves.size();\n    AtomicReader wrappedLeaves[] = new AtomicReader[numReaders];\n    for (int i = 0; i < numReaders; i++) {\n      wrappedLeaves[i] = new FacetsPayloadMigrationReader(leaves.get(i).reader(), fieldTerms);\n    }\n    \n    IndexWriter writer = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.deleteAll();\n    try {\n      writer.addIndexes(new MultiReader(wrappedLeaves));\n      writer.commit();\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#migrateIndex(Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#migrateIndex(Directory,FacetIndexingParams).mjava","sourceNew":"  private void migrateIndex(Directory indexDir, FacetIndexingParams fip) throws Exception {\n    final Map<String,Term> fieldTerms = FacetsPayloadMigrationReader.buildFieldTermsMap(indexDir, fip);\n    DirectoryReader reader = DirectoryReader.open(indexDir);\n    List<AtomicReaderContext> leaves = reader.leaves();\n    int numReaders = leaves.size();\n    AtomicReader wrappedLeaves[] = new AtomicReader[numReaders];\n    for (int i = 0; i < numReaders; i++) {\n      wrappedLeaves[i] = new FacetsPayloadMigrationReader(leaves.get(i).reader(), fieldTerms);\n    }\n    \n    IndexWriter writer = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.deleteAll();\n    try {\n      writer.addIndexes(new MultiReader(wrappedLeaves));\n      writer.commit();\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }\n\n","sourceOld":"  private void migrateIndex(Directory indexDir, FacetIndexingParams fip) throws Exception {\n    final Map<String,Term> fieldTerms = FacetsPayloadMigrationReader.buildFieldTermsMap(indexDir, fip);\n    DirectoryReader reader = DirectoryReader.open(indexDir);\n    List<AtomicReaderContext> leaves = reader.leaves();\n    int numReaders = leaves.size();\n    AtomicReader wrappedLeaves[] = new AtomicReader[numReaders];\n    for (int i = 0; i < numReaders; i++) {\n      wrappedLeaves[i] = new FacetsPayloadMigrationReader(leaves.get(i).reader(), fieldTerms);\n    }\n    \n    IndexWriter writer = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    writer.deleteAll();\n    try {\n      writer.addIndexes(new MultiReader(wrappedLeaves));\n      writer.commit();\n    } finally {\n      reader.close();\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}