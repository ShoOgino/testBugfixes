{"path":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","commits":[{"id":"d74a843adda3407ffb154bb97dcbb7dffae25582","date":1282418303,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory(random);\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory(random);\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","date":1306320383,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1f653cfcf159baeaafe5d01682a911e95bba4012","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["d74a843adda3407ffb154bb97dcbb7dffae25582"],"d74a843adda3407ffb154bb97dcbb7dffae25582":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["1f653cfcf159baeaafe5d01682a911e95bba4012","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"]},"commit2Childs":{"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d74a843adda3407ffb154bb97dcbb7dffae25582":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d74a843adda3407ffb154bb97dcbb7dffae25582","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}