{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d0da1152c8dd998675c30a3f6f599a91770c2b","date":1342792640,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @param data\n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    return createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL) != null;\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    return createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL) != null;\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    for (;;) {\n      try {\n        zookeeper.create(dir + \"/\" + prefix, data, acl,\n            CreateMode.PERSISTENT_SEQUENTIAL, true);\n        return true;\n      } catch (KeeperException.NoNodeException e) {\n        try {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException ne) {\n        //someone created it\n        }\n      }\n    }\n\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      return createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL) != null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    return createData(dir + \"/\" + prefix, data,\n        CreateMode.PERSISTENT_SEQUENTIAL) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.\n   * \n   * @return true if data was successfully added\n   */\n  public boolean offer(byte[] data) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      return createData(dir + \"/\" + prefix, data,\n          CreateMode.PERSISTENT_SEQUENTIAL) != null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["224821deeb481fa237ac4f146f3b94e9f274aabc","224821deeb481fa237ac4f146f3b94e9f274aabc","6321195fe07e4a4627b4f36c48221de10cb6c26e","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    TimerContext time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6321195fe07e4a4627b4f36c48221de10cb6c26e","date":1492541055,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // We don't need to explicitly set isDirty here; if there is a watcher, it will\n          // see the update and set the bit itself; if there is no watcher we can defer\n          // the update anyway.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"224821deeb481fa237ac4f146f3b94e9f274aabc","date":1499299312,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  Successfully calling this method does NOT guarantee\n   * that the element will be immediately available in the in-memory queue. In particular,\n   * calling this method on an empty queue will not necessarily cause {@link #poll()} to\n   * return the offered element.  Use a blocking method if you must wait for the offered\n   * element to become visible.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  public void offer(byte[] data) throws KeeperException, InterruptedException {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          zookeeper.create(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);\n          isDirty = true;\n          return;\n        } catch (KeeperException.NoNodeException e) {\n          try {\n            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          } catch (KeeperException.NodeExistsException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["a5093a9e893633cc091cf2f729d7863671c2b715"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e73d8d559120669b47658108d818b637df5456ea"],"224821deeb481fa237ac4f146f3b94e9f274aabc":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"9f45f67a018421da088ea39274f23ad5d339b97d":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"727bb765ff2542275f6d31f67be18d7104bae148":["2a282020d6c9a4ea32a359539e283e4771a2fda8","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e73d8d559120669b47658108d818b637df5456ea":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","224821deeb481fa237ac4f146f3b94e9f274aabc"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["224821deeb481fa237ac4f146f3b94e9f274aabc"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["9f45f67a018421da088ea39274f23ad5d339b97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["dd45d4a2ee01a1932d33eec42f5272c2402da679","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e73d8d559120669b47658108d818b637df5456ea"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","727bb765ff2542275f6d31f67be18d7104bae148","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"224821deeb481fa237ac4f146f3b94e9f274aabc":["e73d8d559120669b47658108d818b637df5456ea","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"9f45f67a018421da088ea39274f23ad5d339b97d":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9f45f67a018421da088ea39274f23ad5d339b97d","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c2d0da1152c8dd998675c30a3f6f599a91770c2b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"e73d8d559120669b47658108d818b637df5456ea":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","727bb765ff2542275f6d31f67be18d7104bae148"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["224821deeb481fa237ac4f146f3b94e9f274aabc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","727bb765ff2542275f6d31f67be18d7104bae148","aba371508186796cc6151d8223a5b4e16d02e26e","6240b74b884c5587f2a4062dd27d6c32bf228889","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}