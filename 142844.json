{"path":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new Token object, by default. However, if you want, you\n   * can create and return subclass objects based on the value of ofKind.\n   * Simply add the cases to the switch for all those special cases.\n   * For example, if you have a subclass of Token called IDToken that\n   * you want to create if ofKind is ID, simlpy add something like :\n   *\n   *    case MyParserConstants.ID : return new IDToken();\n   *\n   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use it in your lexical actions.\n   */\n  public static final Token newToken(int ofKind)\n  {\n     switch(ofKind)\n     {\n       default : return new Token();\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80895407a253178cac9acedf29e0d70c1365b50","date":1255908073,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","sourceNew":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","sourceOld":"  /**\n   * Returns a new Token object, by default. However, if you want, you\n   * can create and return subclass objects based on the value of ofKind.\n   * Simply add the cases to the switch for all those special cases.\n   * For example, if you have a subclass of Token called IDToken that\n   * you want to create if ofKind is ID, simlpy add something like :\n   *\n   *    case MyParserConstants.ID : return new IDToken();\n   *\n   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use it in your lexical actions.\n   */\n  public static final Token newToken(int ofKind)\n  {\n     switch(ofKind)\n     {\n       default : return new Token();\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/parser/Token#newToken(int).mjava","sourceNew":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","sourceOld":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c80895407a253178cac9acedf29e0d70c1365b50":["d04b321158481d3895702b3cbf6821a3083e6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c80895407a253178cac9acedf29e0d70c1365b50"]},"commit2Childs":{"d04b321158481d3895702b3cbf6821a3083e6c15":["c80895407a253178cac9acedf29e0d70c1365b50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"c80895407a253178cac9acedf29e0d70c1365b50":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}