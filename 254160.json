{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abe5a5b55ce06226629251ec4c197c1d08c70b18","date":1341826007,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22659e4b60cbbd3c13216360578240ddeca2d8b4","date":1341827398,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testPerField().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n\n    Map<String, Analyzer> analyzerPerField = new HashMap<String, Analyzer>();\n    analyzerPerField.put(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), analyzerPerField);\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n        new StringReader(text));\n    CharTermAttribute termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.toString());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n        new StringReader(text));\n    termAtt = tokenStream.getAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22659e4b60cbbd3c13216360578240ddeca2d8b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abe5a5b55ce06226629251ec4c197c1d08c70b18"]},"commit2Childs":{"04e7f30683f53928b2fce016e6430c9795caff22":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","abe5a5b55ce06226629251ec4c197c1d08c70b18","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"22659e4b60cbbd3c13216360578240ddeca2d8b4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}