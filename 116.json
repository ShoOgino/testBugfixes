{"path":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","commits":[{"id":"053c4cbd30d228154839dc536ca5a15a5f0c48bf","date":1564559417,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    ResourceLoader loader = core.getResourceLoader();\n\n    SolrCache inst = null;\n    CacheRegenerator regen = null;\n    try {\n      inst = loader.findClass(cacheImpl, SolrCache.class).getConstructor().newInstance();\n      regen = null;\n      if (regenImpl != null) {\n        regen = loader.findClass(regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + jsonStr(), e);\n\n    }\n    if (regen == null && defRegen != null) regen = defRegen;\n\n    persistence[0] =  inst.init(args, persistence[0], regen);\n\n    return new SolrCacheHolder<>(inst, this);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    ResourceLoader loader = core.getResourceLoader();\n\n    SolrCache inst = null;\n    CacheRegenerator regen = null;\n    try {\n      inst = loader.findClass(cacheImpl, SolrCache.class).getConstructor().newInstance();\n      regen = null;\n      if (regenImpl != null) {\n        regen = loader.findClass(regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + jsonStr(), e);\n\n    }\n    if (regen == null && defRegen != null) regen = defRegen;\n\n    persistence[0] =  inst.init(args, persistence[0], regen);\n\n    return new SolrCacheHolder<>(inst, this);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","sourceNew":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    return new SolrCacheHolder<>(new CacheInfo(this, core));\n  }\n\n","sourceOld":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    ResourceLoader loader = core.getResourceLoader();\n\n    SolrCache inst = null;\n    CacheRegenerator regen = null;\n    try {\n      inst = loader.findClass(cacheImpl, SolrCache.class).getConstructor().newInstance();\n      regen = null;\n      if (regenImpl != null) {\n        regen = loader.findClass(regenImpl, CacheRegenerator.class).getConstructor().newInstance();\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error loading cache \" + jsonStr(), e);\n\n    }\n    if (regen == null && defRegen != null) regen = defRegen;\n\n    persistence[0] =  inst.init(args, persistence[0], regen);\n\n    return new SolrCacheHolder<>(inst, this);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3b59188cab7d9f3036275c6d97b172addebbf8","date":1566241978,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","sourceNew":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    return new SolrCacheHolder(new CacheInfo(this, core));\n  }\n\n","sourceOld":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    return new SolrCacheHolder<>(new CacheInfo(this, core));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","sourceNew":null,"sourceOld":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    return new SolrCacheHolder(new CacheInfo(this, core));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#[K,V]_newInstance(SolrCore).mjava","sourceNew":null,"sourceOld":"  public <K, V> SolrCacheHolder<K, V> newInstance(SolrCore core) {\n    return new SolrCacheHolder(new CacheInfo(this, core));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b3b59188cab7d9f3036275c6d97b172addebbf8":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["3b3b59188cab7d9f3036275c6d97b172addebbf8"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3b3b59188cab7d9f3036275c6d97b172addebbf8","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["3b3b59188cab7d9f3036275c6d97b172addebbf8"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","f8061ddd97f3352007d927dae445884a6f3d857b"],"3b3b59188cab7d9f3036275c6d97b172addebbf8":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}