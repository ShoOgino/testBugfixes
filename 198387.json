{"path":"solr/core/src/java/org/apache/solr/schema/TrieDateField#parseMath(Date,String).mjava","commits":[{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieDateField#parseMath(Date,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateFormatUtil#parseMath(Date,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieDateField#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public static Date parseMath(Date now, String val) {\n    String math;\n    final DateMathParser p = new DateMathParser();\n  \n    if (null != now) p.setNow(now);\n  \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n  \n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n  \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser();\n\n    if (null != now) p.setNow(now);\n\n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                  \"Invalid Date in Date Math String:'\" + val + '\\'', e);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n\n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                              \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2106271e380c198349e0f6eac0395bb462913fab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"2106271e380c198349e0f6eac0395bb462913fab":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2106271e380c198349e0f6eac0395bb462913fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}