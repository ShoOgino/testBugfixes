{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#Lucene43DictionaryCompoundWordTokenFilter(TokenStream,CharArraySet,int,int,int,boolean).mjava","commits":[{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":2,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#Lucene43DictionaryCompoundWordTokenFilter(TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#DictionaryCompoundWordTokenFilter(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link Lucene43DictionaryCompoundWordTokenFilter}\n   *\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param dictionary\n   *          the word dictionary to match against.\n   * @param minWordSize\n   *          only words longer than this get processed\n   * @param minSubwordSize\n   *          only subwords longer than this get to the output stream\n   * @param maxSubwordSize\n   *          only subwords shorter than this get to the output stream\n   * @param onlyLongestMatch\n   *          Add only the longest matching subword to the stream\n   */\n  public Lucene43DictionaryCompoundWordTokenFilter(TokenStream input, CharArraySet dictionary,\n                                                   int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);\n    if (dictionary == null) {\n      throw new IllegalArgumentException(\"dictionary cannot be null\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link DictionaryCompoundWordTokenFilter}\n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase.html#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param dictionary\n   *          the word dictionary to match against.\n   * @param minWordSize\n   *          only words longer than this get processed\n   * @param minSubwordSize\n   *          only subwords longer than this get to the output stream\n   * @param maxSubwordSize\n   *          only subwords shorter than this get to the output stream\n   * @param onlyLongestMatch\n   *          Add only the longest matching subword to the stream\n   */\n  public DictionaryCompoundWordTokenFilter(Version matchVersion, TokenStream input, CharArraySet dictionary,\n      int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(matchVersion, input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);\n    if (dictionary == null) {\n      throw new IllegalArgumentException(\"dictionary cannot be null\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43DictionaryCompoundWordTokenFilter#Lucene43DictionaryCompoundWordTokenFilter(TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link Lucene43DictionaryCompoundWordTokenFilter}\n   *\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param dictionary\n   *          the word dictionary to match against.\n   * @param minWordSize\n   *          only words longer than this get processed\n   * @param minSubwordSize\n   *          only subwords longer than this get to the output stream\n   * @param maxSubwordSize\n   *          only subwords shorter than this get to the output stream\n   * @param onlyLongestMatch\n   *          Add only the longest matching subword to the stream\n   */\n  public Lucene43DictionaryCompoundWordTokenFilter(TokenStream input, CharArraySet dictionary,\n                                                   int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input, dictionary, minWordSize, minSubwordSize, maxSubwordSize, onlyLongestMatch);\n    if (dictionary == null) {\n      throw new IllegalArgumentException(\"dictionary cannot be null\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}