{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    scratchBytesRef1.length = packedBytesLength;\n    heapPointWriter.getPackedValueSlice(0, scratchBytesRef1);\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      heapPointWriter.getPackedValueSlice(i, scratchBytesRef1);\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, scratchBytesRef1.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#computeCommonPrefixLength(HeapPointWriter,byte[]).mjava","sourceNew":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix, int from, int to) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    scratchBytesRef1.length = packedBytesLength;\n    heapPointWriter.getPackedValueSlice(from, scratchBytesRef1);\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = from + 1; i < to; i++) {\n      heapPointWriter.getPackedValueSlice(i, scratchBytesRef1);\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, scratchBytesRef1.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void computeCommonPrefixLength(HeapPointWriter heapPointWriter, byte[] commonPrefix) {\n    Arrays.fill(commonPrefixLengths, bytesPerDim);\n    scratchBytesRef1.length = packedBytesLength;\n    heapPointWriter.getPackedValueSlice(0, scratchBytesRef1);\n    for (int dim = 0; dim < numDataDims; dim++) {\n      System.arraycopy(scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, commonPrefix, dim * bytesPerDim, bytesPerDim);\n    }\n    for (int i = 1; i < heapPointWriter.count(); i++) {\n      heapPointWriter.getPackedValueSlice(i, scratchBytesRef1);\n      for (int dim = 0; dim < numDataDims; dim++) {\n        if (commonPrefixLengths[dim] != 0) {\n          int j = FutureArrays.mismatch(commonPrefix, dim * bytesPerDim, dim * bytesPerDim + commonPrefixLengths[dim], scratchBytesRef1.bytes, scratchBytesRef1.offset + dim * bytesPerDim, scratchBytesRef1.offset + dim * bytesPerDim + commonPrefixLengths[dim]);\n          if (j != -1) {\n            commonPrefixLengths[dim] = j;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}