{"path":"lucene/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c06a413042e52dc241808ed12b0a1324acaffd","date":1315790003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","sourceNew":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","sourceOld":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","bugFix":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BasicModelD#score(BasicStats,float).mjava","sourceNew":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","sourceOld":"  @Override\n  public final float score(BasicStats stats, float tfn) {\n    // we have to ensure phi is always < 1 for tiny TTF values, otherwise nphi can go negative,\n    // resulting in NaN. cleanest way is to unconditionally always add tfn to totalTermFreq\n    // to create a 'normalized' F.\n    double F = stats.getTotalTermFreq() + 1 + tfn;\n    double phi = (double)tfn / F;\n    double nphi = 1 - phi;\n    double p = 1.0 / (stats.getNumberOfDocuments() + 1);\n    double D = phi * log2(phi / p) + nphi * log2(nphi / (1 - p));\n    return (float)(D * F + 0.5 * log2(1 + 2 * Math.PI * tfn * nphi));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}