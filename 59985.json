{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpeted keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee13909dc9aa9b5a6384e0e9553259dba8b1297e","9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpeted keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee13909dc9aa9b5a6384e0e9553259dba8b1297e","date":1499358800,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpeted keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","bugFix":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpeted keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","date":1527210146,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           final Map<String,TermFacet> expected,\n                                           final SolrParams baseParams,\n                                           final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the baseParams query does not match any docs with our field X\n        final long docsWithField = getRandClient(random()).query\n          (facet.applyValueConstraintAndDomain(baseParams, facetKey, \"[* TO *]\")).getResults().getNumFound();\n        assertEquals(facetKey + \" has no buckets, but docs in query exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n      \n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivilent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(Map<String,TermFacet> expected,\n                                           SolrParams baseParams,\n                                           NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(facet.subFacets,\n                                      verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ee13909dc9aa9b5a6384e0e9553259dba8b1297e":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["ee13909dc9aa9b5a6384e0e9553259dba8b1297e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["e9017cf144952056066919f1ebc7897ff9bd71b1","ee13909dc9aa9b5a6384e0e9553259dba8b1297e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1"]},"commit2Childs":{"ee13909dc9aa9b5a6384e0e9553259dba8b1297e":["efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1","e73d8d559120669b47658108d818b637df5456ea"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["ee13909dc9aa9b5a6384e0e9553259dba8b1297e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"efe1ad0eb9567f77ec7d5bf446d38340ad8d2bd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e73d8d559120669b47658108d818b637df5456ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e73d8d559120669b47658108d818b637df5456ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}