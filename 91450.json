{"path":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","commits":[{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n\n            waitForSchemaUpdateToPropagate(newSchema);\n\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n\n            waitForSchemaUpdateToPropagate(newSchema);\n\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n\n            waitForSchemaUpdateToPropagate(newSchema);\n\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n\n            waitForSchemaUpdateToPropagate(newSchema);\n\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/DynamicFieldCollectionResource#post(Representation).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"*_foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newDynamicFields = new ArrayList<>();\n            List<NewFieldArguments> newDynamicFieldArguments = new ArrayList<>();\n            ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n            Map<String,Collection<String>> copyFields = new HashMap<>();\n            for (Map<String,Object> map : list) {\n              String fieldNamePattern = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldNamePattern) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>)copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldNamePattern, copyTo);\n              }\n              newDynamicFields.add(oldSchema.newDynamicField(fieldNamePattern, fieldType, map));\n              newDynamicFieldArguments.add(new NewFieldArguments(fieldNamePattern, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while ( ! success) {\n              try {\n                if ( ! firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newDynamicFields.clear();\n                  for (NewFieldArguments args : newDynamicFieldArguments) {\n                    newDynamicFields.add(oldSchema.newDynamicField(args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addDynamicFields(newDynamicFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add dynamic fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n              }\n            }\n\n            waitForSchemaUpdateToPropagate(newSchema);\n\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["106069d345c14ee5c76f0ea76397b02a656f883c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["37e5b631c49de2fb88f245c36ecf87650cfa4a24","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"106069d345c14ee5c76f0ea76397b02a656f883c":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["f494bc636a1302995e4930fdccd371eeda452f87","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}