{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrServer],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrClient client = null;\n        try {\n          client = new HttpSolrClient(baseUrl);\n          client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (client != null) {\n            client.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrServer> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrServer server = null;\n        try {\n          server = new HttpSolrServer(baseUrl);\n          server.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          server.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (server != null) {\n            server.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrServer(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n          client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        HttpSolrClient client = null;\n        try {\n          client = new HttpSolrClient(baseUrl);\n          client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        } finally {\n          if (client != null) {\n            client.shutdown();\n          }\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n          // client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n          client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n          // client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = new Callable() {\n      @Override\n      public Object call() {\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n          // client.setConnectionTimeout(15000);\n          Create createCmd = new Create();\n          createCmd.setRoles(\"none\");\n          createCmd.setCoreName(collection + num);\n          createCmd.setCollection(collection);\n          \n          if (random().nextBoolean()) {\n            // sometimes we use an explicit core node name\n            createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n          }\n          \n          if (shardId == null) {\n            createCmd.setNumShards(2);\n          }\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          if (shardId != null) {\n            createCmd.setShardId(shardId);\n          }\n          client.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fail\n        }\n        return null;\n      }\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createSolrCore(String,List[SolrClient],String,int,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    @SuppressWarnings({\"rawtypes\"})\n    Callable call = () -> {\n      try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","sourceOld":"  private void createSolrCore(final String collection,\n      List<SolrClient> collectionClients, final String baseUrl, final int num,\n      final String shardId) {\n    Callable call = () -> {\n      try (HttpSolrClient client = getHttpSolrClient(baseUrl)) {\n        // client.setConnectionTimeout(15000);\n        Create createCmd = new Create();\n        createCmd.setRoles(\"none\");\n        createCmd.setCoreName(collection + num);\n        createCmd.setCollection(collection);\n\n        if (random().nextBoolean()) {\n          // sometimes we use an explicit core node name\n          createCmd.setCoreNodeName(\"anode\" + nodeCounter.incrementAndGet());\n        }\n\n        if (shardId == null) {\n          createCmd.setNumShards(2);\n        }\n        createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n        if (shardId != null) {\n          createCmd.setShardId(shardId);\n        }\n        client.request(createCmd);\n      } catch (Exception e) {\n        e.printStackTrace();\n        //fail\n      }\n      return null;\n    };\n    \n    pending.add(completionService.submit(call));\n \n    \n    collectionClients.add(createNewSolrClient(collection + num, baseUrl));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043df2e9a841864922c32756a44c939ed768cb89":["859081acf00749f5dd462772c571d611d4a4d2db"],"859081acf00749f5dd462772c571d611d4a4d2db":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b6284684320a9808c41a5e43de958b2da22f89bd":["859081acf00749f5dd462772c571d611d4a4d2db","043df2e9a841864922c32756a44c939ed768cb89"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b6284684320a9808c41a5e43de958b2da22f89bd","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"859081acf00749f5dd462772c571d611d4a4d2db":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e98520789adb1d5ad05afb4956eca0944a929688"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}