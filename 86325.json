{"path":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","commits":[{"id":"69cad0546debf9ce9d44e309ecfa26760fecd5d8","date":1425846082,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginRegistry#close().mjava","sourceNew":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.tag, exp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.tag, exp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","sourceNew":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.getCleanTag(), exp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.tag, exp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.getCleanTag(), exp);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#close().mjava","sourceNew":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin {} of type : {}\", e.getKey(), meta.getCleanTag(), exp);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this registry. This will in turn call a close on all the contained plugins\n   */\n  @Override\n  public void close() {\n    for (Map.Entry<String, PluginHolder<T>> e : registry.entrySet()) {\n      try {\n        e.getValue().close();\n      } catch (Exception exp) {\n        log.error(\"Error closing plugin \" + e.getKey() + \" of type : \" + meta.getCleanTag(), exp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"140be51d03394488536f4aacedace29f9b318347":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}