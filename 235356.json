{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","commits":[{"id":"c850a9faa7f2268d78aa6e8a611d281658781a99","date":1329403874,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    PrepRecovery prepCmd = new PrepRecovery();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(4000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    PrepRecovery prepCmd = new PrepRecovery();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(4000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(4000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":["c850a9faa7f2268d78aa6e8a611d281658781a99"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws MalformedURLException, SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    prepCmd.setPauseFor(6000);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(120000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(120000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(45000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(120000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl,\n      String leaderCoreName) throws SolrServerException,\n      IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    server.setConnectionTimeout(45000);\n    server.setSoTimeout(120000);\n    WaitForState prepCmd = new WaitForState();\n    prepCmd.setCoreName(leaderCoreName);\n    prepCmd.setNodeName(zkController.getNodeName());\n    prepCmd.setCoreNodeName(coreZkNodeName);\n    prepCmd.setState(ZkStateReader.RECOVERING);\n    prepCmd.setCheckLive(true);\n    prepCmd.setOnlyIfLeader(true);\n    \n    server.request(prepCmd);\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e415cc960b0e7b8c945b0ed0004272b8435433ac","date":1384648739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(30000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(120000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(30000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(45000);\n      server.setSoTimeout(120000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97bd2b0da4beced82821b752b29576be986cf1ff","date":1387747012,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#sendPrepRecoveryCmd(String,String).mjava","sourceNew":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName, Slice slice)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(30000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      if (!Slice.CONSTRUCTION.equals(slice.getState())) {\n        prepCmd.setOnlyIfLeaderActive(true);\n      }\n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  private void sendPrepRecoveryCmd(String leaderBaseUrl, String leaderCoreName)\n      throws SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(leaderBaseUrl);\n    try {\n      server.setConnectionTimeout(30000);\n      WaitForState prepCmd = new WaitForState();\n      prepCmd.setCoreName(leaderCoreName);\n      prepCmd.setNodeName(zkController.getNodeName());\n      prepCmd.setCoreNodeName(coreZkNodeName);\n      prepCmd.setState(ZkStateReader.RECOVERING);\n      prepCmd.setCheckLive(true);\n      prepCmd.setOnlyIfLeader(true);\n      \n      server.request(prepCmd);\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f0d275eddd9810d17e658bef5d4b8c227e7bd0f7","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a6378064655e76cd7b908b1cab4ce425b384b508","a69439d0df009e0bb0038d1e427159f449dd670d"],"97bd2b0da4beced82821b752b29576be986cf1ff":["e415cc960b0e7b8c945b0ed0004272b8435433ac"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","6b834dd353486678973f4157b3ba402ac3a7ca88"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a69439d0df009e0bb0038d1e427159f449dd670d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"c850a9faa7f2268d78aa6e8a611d281658781a99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a6378064655e76cd7b908b1cab4ce425b384b508":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a69439d0df009e0bb0038d1e427159f449dd670d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2d750082a4223c20902ef11ff6a9831d55738ea4","e415cc960b0e7b8c945b0ed0004272b8435433ac"],"e415cc960b0e7b8c945b0ed0004272b8435433ac":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["c850a9faa7f2268d78aa6e8a611d281658781a99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97bd2b0da4beced82821b752b29576be986cf1ff"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"97bd2b0da4beced82821b752b29576be986cf1ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6b834dd353486678973f4157b3ba402ac3a7ca88":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2d750082a4223c20902ef11ff6a9831d55738ea4"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c850a9faa7f2268d78aa6e8a611d281658781a99":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","a6378064655e76cd7b908b1cab4ce425b384b508"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69439d0df009e0bb0038d1e427159f449dd670d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c850a9faa7f2268d78aa6e8a611d281658781a99"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","e415cc960b0e7b8c945b0ed0004272b8435433ac"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"e415cc960b0e7b8c945b0ed0004272b8435433ac":["97bd2b0da4beced82821b752b29576be986cf1ff","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6b834dd353486678973f4157b3ba402ac3a7ca88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}