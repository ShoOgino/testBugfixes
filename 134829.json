{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64d8c4b572c9d5e49a6f831e8d4ebc203b770272","date":1310038257,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut(IOContext.DEFAULT);\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (entries.isEmpty()) {\n        throw new IllegalStateException(\"CFS has no entries\");\n      }\n      \n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut(IOContext.DEFAULT);\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut(IOContext.DEFAULT);\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut();\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb18dddc5f47fbf80dac395dde293655d5ad74db","date":1310299358,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      initDataOut(IOContext.DEFAULT);\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeSafely(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#close().mjava","sourceNew":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes all resources and writes the entry table\n   * \n   * @throws IllegalStateException\n   *           if close() had been called before or if no file has been added to\n   *           this object\n   */\n  public void close() throws IOException {\n    if (closed) {\n      throw new IllegalStateException(\"already closed\");\n    }\n    IOException priorException = null;\n    IndexOutput entryTableOut = null;\n    try {\n      if (!pendingEntries.isEmpty() || outputTaken.get()) {\n        throw new IllegalStateException(\"CFS has pending open files\");\n      }\n      closed = true;\n      // open the compound stream\n      getOutput();\n      assert dataOut != null;\n      long finalLength = dataOut.getFilePointer();\n      assert assertFileLength(finalLength, dataOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, dataOut);\n    }\n    try {\n      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);\n      writeEntryTable(entries.values(), entryTableOut);\n    } catch (IOException e) {\n      priorException = e;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorException, entryTableOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["bb18dddc5f47fbf80dac395dde293655d5ad74db"],"64d8c4b572c9d5e49a6f831e8d4ebc203b770272":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bc0b8069918917b33f361011899a1af0cdd2d462":["64d8c4b572c9d5e49a6f831e8d4ebc203b770272"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb18dddc5f47fbf80dac395dde293655d5ad74db":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bc0b8069918917b33f361011899a1af0cdd2d462","1291e4568eb7d9463d751627596ef14baf4c1603"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["24230fe54121f9be9d85f2c2067536296785e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"64d8c4b572c9d5e49a6f831e8d4ebc203b770272":["bc0b8069918917b33f361011899a1af0cdd2d462"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["64d8c4b572c9d5e49a6f831e8d4ebc203b770272","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"bb18dddc5f47fbf80dac395dde293655d5ad74db":["24230fe54121f9be9d85f2c2067536296785e421"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bb18dddc5f47fbf80dac395dde293655d5ad74db","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}