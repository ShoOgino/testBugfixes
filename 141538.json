{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","commits":[{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    String dim = paths[0].components[0];\n    if (drillDownDims.contains(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      if (paths[0].length == 0) {\n        throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n      }\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n    drillDownDims.add(dim);\n\n    final ConstantScoreQuery drillDownQuery = new ConstantScoreQuery(q);\n    drillDownQuery.setBoost(0.0f);\n    query.add(drillDownQuery, Occur.MUST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","sourceNew":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n    drillDownDims.put(dim, drillDownDims.size());\n\n    final ConstantScoreQuery drillDownQuery = new ConstantScoreQuery(q);\n    drillDownQuery.setBoost(0.0f);\n    query.add(drillDownQuery, Occur.MUST);\n  }\n\n","sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    String dim = paths[0].components[0];\n    if (drillDownDims.contains(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      if (paths[0].length == 0) {\n        throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n      }\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n    drillDownDims.add(dim);\n\n    final ConstantScoreQuery drillDownQuery = new ConstantScoreQuery(q);\n    drillDownQuery.setBoost(0.0f);\n    query.add(drillDownQuery, Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fbd2626d3f584f8146e25acf62ee817361580","date":1367266329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","sourceNew":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n    drillDownDims.put(dim, drillDownDims.size());\n\n    final ConstantScoreQuery drillDownQuery = new ConstantScoreQuery(q);\n    drillDownQuery.setBoost(0.0f);\n    query.add(drillDownQuery, Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(FacetLabel...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","sourceNew":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"378fbd2626d3f584f8146e25acf62ee817361580":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["378fbd2626d3f584f8146e25acf62ee817361580","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["378fbd2626d3f584f8146e25acf62ee817361580"]},"commit2Childs":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["378fbd2626d3f584f8146e25acf62ee817361580"],"378fbd2626d3f584f8146e25acf62ee817361580":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}