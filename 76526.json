{"path":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      if (readOnly)\n        instance = (SegmentReader)READONLY_IMPL.newInstance();\n      else\n        instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      if (readOnly)\n        instance = (SegmentReader)READONLY_IMPL.newInstance();\n      else\n        instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(dir, si, readBufferSize);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"277b20588f94e26ec21ffdfc360528133991372e","date":1256467913,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      if (readOnly)\n        instance = (SegmentReader)READONLY_IMPL.newInstance();\n      else\n        instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653534f92e19662cbe285c9c01801afbe2247da3","date":1260576498,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"653534f92e19662cbe285c9c01801afbe2247da3":["277b20588f94e26ec21ffdfc360528133991372e"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"277b20588f94e26ec21ffdfc360528133991372e":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["653534f92e19662cbe285c9c01801afbe2247da3"]},"commit2Childs":{"653534f92e19662cbe285c9c01801afbe2247da3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"961159f13aece73fbb30aea720e77a2237e8bafd":["277b20588f94e26ec21ffdfc360528133991372e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"277b20588f94e26ec21ffdfc360528133991372e":["653534f92e19662cbe285c9c01801afbe2247da3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}