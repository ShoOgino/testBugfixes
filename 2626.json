{"path":"modules/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Cell,Cell).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Cell,Cell).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Cell,Cell).mjava","sourceNew":"  /**\n   * Merge the given Cells and return the resulting Cell.\n   * \n   * @param m the master Cell\n   * @param e the existing Cell\n   * @return the resulting Cell, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Cell merge(Cell m, Cell e) {\n    Cell n = new Cell();\n    \n    if (m.skip != e.skip) {\n      return null;\n    }\n    \n    if (m.cmd >= 0) {\n      if (e.cmd >= 0) {\n        if (m.cmd == e.cmd) {\n          n.cmd = m.cmd;\n        } else {\n          return null;\n        }\n      } else {\n        n.cmd = m.cmd;\n      }\n    } else {\n      n.cmd = e.cmd;\n    }\n    if (m.ref >= 0) {\n      if (e.ref >= 0) {\n        if (m.ref == e.ref) {\n          if (m.skip == e.skip) {\n            n.ref = m.ref;\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        n.ref = m.ref;\n      }\n    } else {\n      n.ref = e.ref;\n    }\n    n.cnt = m.cnt + e.cnt;\n    n.skip = m.skip;\n    return n;\n  }\n\n","sourceOld":"  /**\n   * Merge the given Cells and return the resulting Cell.\n   * \n   * @param m the master Cell\n   * @param e the existing Cell\n   * @return the resulting Cell, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Cell merge(Cell m, Cell e) {\n    Cell n = new Cell();\n    \n    if (m.skip != e.skip) {\n      return null;\n    }\n    \n    if (m.cmd >= 0) {\n      if (e.cmd >= 0) {\n        if (m.cmd == e.cmd) {\n          n.cmd = m.cmd;\n        } else {\n          return null;\n        }\n      } else {\n        n.cmd = m.cmd;\n      }\n    } else {\n      n.cmd = e.cmd;\n    }\n    if (m.ref >= 0) {\n      if (e.ref >= 0) {\n        if (m.ref == e.ref) {\n          if (m.skip == e.skip) {\n            n.ref = m.ref;\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        n.ref = m.ref;\n      }\n    } else {\n      n.ref = e.ref;\n    }\n    n.cnt = m.cnt + e.cnt;\n    n.skip = m.skip;\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Cell,Cell).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#merge(Cell,Cell).mjava","sourceNew":"  /**\n   * Merge the given Cells and return the resulting Cell.\n   * \n   * @param m the master Cell\n   * @param e the existing Cell\n   * @return the resulting Cell, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Cell merge(Cell m, Cell e) {\n    Cell n = new Cell();\n    \n    if (m.skip != e.skip) {\n      return null;\n    }\n    \n    if (m.cmd >= 0) {\n      if (e.cmd >= 0) {\n        if (m.cmd == e.cmd) {\n          n.cmd = m.cmd;\n        } else {\n          return null;\n        }\n      } else {\n        n.cmd = m.cmd;\n      }\n    } else {\n      n.cmd = e.cmd;\n    }\n    if (m.ref >= 0) {\n      if (e.ref >= 0) {\n        if (m.ref == e.ref) {\n          if (m.skip == e.skip) {\n            n.ref = m.ref;\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        n.ref = m.ref;\n      }\n    } else {\n      n.ref = e.ref;\n    }\n    n.cnt = m.cnt + e.cnt;\n    n.skip = m.skip;\n    return n;\n  }\n\n","sourceOld":"  /**\n   * Merge the given Cells and return the resulting Cell.\n   * \n   * @param m the master Cell\n   * @param e the existing Cell\n   * @return the resulting Cell, or <tt>null</tt> if the operation cannot be\n   *         realized\n   */\n  public Cell merge(Cell m, Cell e) {\n    Cell n = new Cell();\n    \n    if (m.skip != e.skip) {\n      return null;\n    }\n    \n    if (m.cmd >= 0) {\n      if (e.cmd >= 0) {\n        if (m.cmd == e.cmd) {\n          n.cmd = m.cmd;\n        } else {\n          return null;\n        }\n      } else {\n        n.cmd = m.cmd;\n      }\n    } else {\n      n.cmd = e.cmd;\n    }\n    if (m.ref >= 0) {\n      if (e.ref >= 0) {\n        if (m.ref == e.ref) {\n          if (m.skip == e.skip) {\n            n.ref = m.ref;\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        n.ref = m.ref;\n      }\n    } else {\n      n.ref = e.ref;\n    }\n    n.cnt = m.cnt + e.cnt;\n    n.skip = m.skip;\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}