{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean).mjava","commits":[{"id":"ea73f58403a6c26bcb09b4933832348d80deb45b","date":1202849732,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTimeout(boolean multiThreaded) {\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    long timeAllowed = timeAllowed(multiThreaded);\n    HitCollector tlCollector = new TimeLimitedCollector(myHc, timeAllowed);\n\n    TimeLimitedCollector.TimeExceededException exception = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      exception = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    assertNotNull( \"Timeout expected!\", exception );\n    assertTrue( \"no hits found!\", myHc.hitCount() > 0 );\n    assertTrue( \"last doc collected cannot be 0!\", exception.getLastDocCollected() > 0 );\n    assertEquals( exception.getTimeAllowed(), timeAllowed);\n    assertTrue ( \"elapsed=\"+exception.getTimeElapsed()+\" <= (allowed-resolution)=\"+(timeAllowed-TimeLimitedCollector.getResolution()),\n        exception.getTimeElapsed() > timeAllowed-TimeLimitedCollector.getResolution());\n    assertTrue ( \"lastDoc=\"+exception.getLastDocCollected()+\" ,&& elapsed=\"+exception.getTimeElapsed()+\n        \" >= (allowed+resolution+slowdown)=\"+(timeAllowed+TimeLimitedCollector.getResolution()+SLOW_DOWN),\n        exception.getTimeElapsed() < timeAllowed+TimeLimitedCollector.getResolution()+SLOW_DOWN);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ce8825677e635ae7c7529ca806883b0d0a4396","date":1202889042,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded) {\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = new TimeLimitedCollector(myHc, TIME_ALLOWED);\n\n    TimeLimitedCollector.TimeExceededException exception = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      exception = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    assertNotNull( \"Timeout expected!\", exception );\n    assertTrue( \"no hits found!\", myHc.hitCount() > 0 );\n    assertTrue( \"last doc collected cannot be 0!\", exception.getLastDocCollected() > 0 );\n    assertEquals( exception.getTimeAllowed(), TIME_ALLOWED);\n    assertTrue ( \"elapsed=\"+exception.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        exception.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    assertTrue ( \"lastDoc=\"+exception.getLastDocCollected()+\n        \" ,&& allowed=\"+exception.getTimeAllowed() +\n        \" ,&& elapsed=\"+exception.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded),\n        exception.getTimeElapsed() < maxTime(multiThreaded));\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded) {\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    long timeAllowed = timeAllowed(multiThreaded);\n    HitCollector tlCollector = new TimeLimitedCollector(myHc, timeAllowed);\n\n    TimeLimitedCollector.TimeExceededException exception = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      exception = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    assertNotNull( \"Timeout expected!\", exception );\n    assertTrue( \"no hits found!\", myHc.hitCount() > 0 );\n    assertTrue( \"last doc collected cannot be 0!\", exception.getLastDocCollected() > 0 );\n    assertEquals( exception.getTimeAllowed(), timeAllowed);\n    assertTrue ( \"elapsed=\"+exception.getTimeElapsed()+\" <= (allowed-resolution)=\"+(timeAllowed-TimeLimitedCollector.getResolution()),\n        exception.getTimeElapsed() > timeAllowed-TimeLimitedCollector.getResolution());\n    assertTrue ( \"lastDoc=\"+exception.getLastDocCollected()+\" ,&& elapsed=\"+exception.getTimeElapsed()+\n        \" >= (allowed+resolution+slowdown)=\"+(timeAllowed+TimeLimitedCollector.getResolution()+SLOW_DOWN),\n        exception.getTimeElapsed() < timeAllowed+TimeLimitedCollector.getResolution()+SLOW_DOWN);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestTimeout(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestTimeout(boolean multiThreaded) {\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    HitCollector tlCollector = new TimeLimitedCollector(myHc, TIME_ALLOWED);\n\n    TimeLimitedCollector.TimeExceededException exception = null;\n    try {\n      search(tlCollector);\n    } catch (TimeLimitedCollector.TimeExceededException x) {\n      exception = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    assertNotNull( \"Timeout expected!\", exception );\n    assertTrue( \"no hits found!\", myHc.hitCount() > 0 );\n    assertTrue( \"last doc collected cannot be 0!\", exception.getLastDocCollected() > 0 );\n    assertEquals( exception.getTimeAllowed(), TIME_ALLOWED);\n    assertTrue ( \"elapsed=\"+exception.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitedCollector.getResolution()),\n        exception.getTimeElapsed() > TIME_ALLOWED-TimeLimitedCollector.getResolution());\n    assertTrue ( \"lastDoc=\"+exception.getLastDocCollected()+\n        \" ,&& allowed=\"+exception.getTimeAllowed() +\n        \" ,&& elapsed=\"+exception.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded),\n        exception.getTimeElapsed() < maxTime(multiThreaded));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"]},"commit2Childs":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}