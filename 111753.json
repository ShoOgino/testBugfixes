{"path":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}