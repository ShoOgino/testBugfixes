{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","sourceNew":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom(Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom(Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"363c827acabcdf749ab543fe459e291e7acc1f1e","date":1337801906,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","sourceNew":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom((int)Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom(Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52dd493156fb4023d158d49e1ea92dbf3c20871","date":1337893063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","sourceNew":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom((int)Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom(Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testIntermediateMerges().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","sourceNew":"  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.defaultTempDir(), 2), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom((int)Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testIntermediateMerges().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testIntermediateMerges().mjava","sourceNew":"  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.defaultTempDir(), 2), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","sourceOld":"  @Test\n  public void testIntermediateMerges() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer, binary merging.\n    SortInfo info = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), 2), \n        generateRandom((int)Sort.MB * 20));\n    assertTrue(info.mergeRounds > 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"363c827acabcdf749ab543fe459e291e7acc1f1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["363c827acabcdf749ab543fe459e291e7acc1f1e","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["363c827acabcdf749ab543fe459e291e7acc1f1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52dd493156fb4023d158d49e1ea92dbf3c20871":["b89678825b68eccaf09e6ab71675fc0b0af1e099","363c827acabcdf749ab543fe459e291e7acc1f1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["363c827acabcdf749ab543fe459e291e7acc1f1e","b52dd493156fb4023d158d49e1ea92dbf3c20871"],"363c827acabcdf749ab543fe459e291e7acc1f1e":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e","b52dd493156fb4023d158d49e1ea92dbf3c20871"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b52dd493156fb4023d158d49e1ea92dbf3c20871":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b52dd493156fb4023d158d49e1ea92dbf3c20871","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}