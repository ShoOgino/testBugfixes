{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#listCollection().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#listCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#listCollection().mjava","sourceNew":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","sourceOld":"  private void listCollection() throws IOException, SolrServerException {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.LIST.toString());\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      List<String> collections = (List<String>) rsp.get(\"collections\");\n      assertTrue(\"control_collection was not found in list\", collections.contains(\"control_collection\"));\n      assertTrue(DEFAULT_COLLECTION + \" was not found in list\", collections.contains(DEFAULT_COLLECTION));\n      assertTrue(COLLECTION_NAME + \" was not found in list\", collections.contains(COLLECTION_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}