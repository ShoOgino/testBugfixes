{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","commits":[{"id":"d196c8ed32bc794a6555ac1b2c4efea6dcb57635","date":1357135393,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"/dev/null","sourceNew":"  protected Shape parseShape(String shapeStr) {\n    try {\n      return ctx.readShape(shapeStr);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"/dev/null","sourceNew":"  protected Shape parseShape(String shapeStr) {\n    try {\n      return ctx.readShape(shapeStr);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","sourceNew":"  protected Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n    //In Solr trunk we only support \"lat, lon\" (or x y) as an additional format; in v4.0 we do the\n    // weird Circle & Rect formats too (Spatial4j LegacyShapeReadWriterFormat).\n    try {\n      Shape shape = LegacyShapeReadWriterFormat.readShapeOrNull(str, ctx);\n      if (shape != null)\n        return shape;\n      return ctx.readShapeFromWkt(str);\n    } catch (Exception e) {\n      String message = e.getMessage();\n      if (!message.contains(str))\n        message = \"Couldn't parse shape '\" + str + \"' because: \" + message;\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message, e);\n    }\n  }\n\n","sourceOld":"  protected Shape parseShape(String shapeStr) {\n    try {\n      return ctx.readShape(shapeStr);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862fe0ddb727c373fe11596c809321056ffbc018","date":1421158638,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","sourceNew":"  protected Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n    if (Character.isLetter(str.charAt(0))) {//WKT starts with a letter\n      try {\n        return ctx.readShapeFromWkt(str);\n      } catch (Exception e) {\n        String message = e.getMessage();\n        if (!message.contains(str))\n          message = \"Couldn't parse shape '\" + str + \"' because: \" + message;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message, e);\n      }\n    } else {\n      return SpatialUtils.parsePointSolrException(str, ctx);\n    }\n  }\n\n","sourceOld":"  protected Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n    //In Solr trunk we only support \"lat, lon\" (or x y) as an additional format; in v4.0 we do the\n    // weird Circle & Rect formats too (Spatial4j LegacyShapeReadWriterFormat).\n    try {\n      Shape shape = LegacyShapeReadWriterFormat.readShapeOrNull(str, ctx);\n      if (shape != null)\n        return shape;\n      return ctx.readShapeFromWkt(str);\n    } catch (Exception e) {\n      String message = e.getMessage();\n      if (!message.contains(str))\n        message = \"Couldn't parse shape '\" + str + \"' because: \" + message;\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d8df7e95735d8cda6a255c42e0997c699bb176","date":1458157920,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","sourceNew":"  /** Create a {@link Shape} from the input string */\n  public Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n\n    Shape shape = null;\n    if(shapeReader!=null) {\n      shape = shapeReader.readIfSupported(str);\n    }\n\n    if(shape==null) {\n      // Try all supported formats\n      shape = ctx.getFormats().read(str);\n    }\n\n    if(shape==null) {\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to parse shape from: \"+str);\n    }\n    return shape;\n  }\n\n","sourceOld":"  protected Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n    if (Character.isLetter(str.charAt(0))) {//WKT starts with a letter\n      try {\n        return ctx.readShapeFromWkt(str);\n      } catch (Exception e) {\n        String message = e.getMessage();\n        if (!message.contains(str))\n          message = \"Couldn't parse shape '\" + str + \"' because: \" + message;\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message, e);\n      }\n    } else {\n      return SpatialUtils.parsePointSolrException(str, ctx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23aec8f6a0b5a11d050d784a13871261bef7c925","date":1465332514,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","sourceNew":"  /** Create a {@link Shape} from the input string */\n  public Shape parseShape(String str) {\n    str = str.trim();\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n\n    // If the first char is promising, try to parse with SpatialUtils.parsePoint\n    char firstChar = str.charAt(0);\n    if (firstChar == '+' || firstChar == '-' || (firstChar >= '0' && firstChar <= '9')) {\n      try {\n        return SpatialUtils.parsePoint(str, ctx);\n      } catch (Exception e) {//ignore\n      }\n    }\n\n    try {\n      return shapeReader.read(str);\n    } catch (Exception e) {\n      String msg = \"Unable to parse shape given formats\" +\n          \" \\\"lat,lon\\\", \\\"x y\\\" or as \" + shapeReader.getFormatName() + \" because \" + e;\n      if (!msg.contains(str)) {\n        msg += \" input: \" + str;\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, e);\n    }\n  }\n\n","sourceOld":"  /** Create a {@link Shape} from the input string */\n  public Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n\n    Shape shape = null;\n    if(shapeReader!=null) {\n      shape = shapeReader.readIfSupported(str);\n    }\n\n    if(shape==null) {\n      // Try all supported formats\n      shape = ctx.getFormats().read(str);\n    }\n\n    if(shape==null) {\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to parse shape from: \"+str);\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#parseShape(String).mjava","sourceNew":"  /** Create a {@link Shape} from the input string */\n  public Shape parseShape(String str) {\n    str = str.trim();\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n\n    // If the first char is promising, try to parse with SpatialUtils.parsePoint\n    char firstChar = str.charAt(0);\n    if (firstChar == '+' || firstChar == '-' || (firstChar >= '0' && firstChar <= '9')) {\n      try {\n        return SpatialUtils.parsePoint(str, ctx);\n      } catch (Exception e) {//ignore\n      }\n    }\n\n    try {\n      return shapeReader.read(str);\n    } catch (Exception e) {\n      String msg = \"Unable to parse shape given formats\" +\n          \" \\\"lat,lon\\\", \\\"x y\\\" or as \" + shapeReader.getFormatName() + \" because \" + e;\n      if (!msg.contains(str)) {\n        msg += \" input: \" + str;\n      }\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, e);\n    }\n  }\n\n","sourceOld":"  /** Create a {@link Shape} from the input string */\n  public Shape parseShape(String str) {\n    if (str.length() == 0)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"empty string shape\");\n\n    Shape shape = null;\n    if(shapeReader!=null) {\n      shape = shapeReader.readIfSupported(str);\n    }\n\n    if(shape==null) {\n      // Try all supported formats\n      shape = ctx.getFormats().read(str);\n    }\n\n    if(shape==null) {\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to parse shape from: \"+str);\n    }\n    return shape;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03d8df7e95735d8cda6a255c42e0997c699bb176":["862fe0ddb727c373fe11596c809321056ffbc018"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"862fe0ddb727c373fe11596c809321056ffbc018":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["03d8df7e95735d8cda6a255c42e0997c699bb176","23aec8f6a0b5a11d050d784a13871261bef7c925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23aec8f6a0b5a11d050d784a13871261bef7c925"]},"commit2Childs":{"d196c8ed32bc794a6555ac1b2c4efea6dcb57635":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d196c8ed32bc794a6555ac1b2c4efea6dcb57635","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["862fe0ddb727c373fe11596c809321056ffbc018"],"03d8df7e95735d8cda6a255c42e0997c699bb176":["23aec8f6a0b5a11d050d784a13871261bef7c925","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"862fe0ddb727c373fe11596c809321056ffbc018":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}