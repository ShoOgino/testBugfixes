{"path":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoader.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoader.FieldAdder adder = new CSVLoader.FieldAdder();\n    CSVLoader.FieldAdder adderKeepEmpty = new CSVLoader.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoader.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoader.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoader.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c11575b17e97a75fa89f92c21725abb692781b46","date":1373038242,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      //TODO: need to look at this in light of schemaless\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","bugFix":null,"bugIntro":["908c8e2c79736122e37d47d73a053999c24bac65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      //TODO: need to look at this in light of schemaless\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"908c8e2c79736122e37d47d73a053999c24bac65","date":1374200099,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      //TODO: need to look at this in light of schemaless\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","bugFix":["be5cd4bcb73378e3d5f06021287a5edc79995e4e","4f483a44e10befaaa6da11d433e2eb0f52829eec","c11575b17e97a75fa89f92c21725abb692781b46"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    fields = new SchemaField[fieldnames.length];\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fields.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      fields[i] = schema.getField(fname);\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      //TODO: need to look at this in light of schemaless\n      SchemaField sf = schema.getFieldOrNull(name);\n      if(sf == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid field name for literal:'\"+ name +\"'\");\n      literals.put(sf, params.get(pname));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df476dd588f9e2c99c43fd9d3d896fd30221938f","date":1457020485,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy\n            (fsep, fenc, CSVStrategy.COMMENTS_DISABLED, fesc, false, false, false, false, \"\\n\");\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","bugFix":["043be52e4a637fdb0d38454fa788a92c1b48a036"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#prepareFields().mjava","sourceNew":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy\n            (fsep, fenc, CSVStrategy.COMMENTS_DISABLED, fesc, false, false, false, false, \"\\n\");\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","sourceOld":"  /** create the FieldAdders that control how each field  is indexed */\n  void prepareFields() {\n    // Possible future optimization: for really rapid incremental indexing\n    // from a POST, one could cache all of this setup info based on the params.\n    // The link from FieldAdder to this would need to be severed for that to happen.\n\n    adders = new CSVLoaderBase.FieldAdder[fieldnames.length];\n    String skipStr = params.get(SKIP);\n    List<String> skipFields = skipStr==null ? null : StrUtils.splitSmart(skipStr,',');\n\n    CSVLoaderBase.FieldAdder adder = new CSVLoaderBase.FieldAdder();\n    CSVLoaderBase.FieldAdder adderKeepEmpty = new CSVLoaderBase.FieldAdderEmpty();\n\n    for (int i=0; i<fieldnames.length; i++) {\n      String fname = fieldnames[i];\n      // to skip a field, leave the entries in fields and addrs null\n      if (fname.length()==0 || (skipFields!=null && skipFields.contains(fname))) continue;\n\n      boolean keepEmpty = params.getFieldBool(fname,EMPTY,false);\n      adders[i] = keepEmpty ? adderKeepEmpty : adder;\n\n      // Order that operations are applied: split -> trim -> map -> add\n      // so create in reverse order.\n      // Creation of FieldAdders could be optimized and shared among fields\n\n      String[] fmap = params.getFieldParams(fname,MAP);\n      if (fmap!=null) {\n        for (String mapRule : fmap) {\n          String[] mapArgs = colonSplit.split(mapRule,-1);\n          if (mapArgs.length!=2)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Map rules must be of the form 'from:to' ,got '\"+mapRule+\"'\");\n          adders[i] = new CSVLoaderBase.FieldMapperSingle(mapArgs[0], mapArgs[1], adders[i]);\n        }\n      }\n \n      if (params.getFieldBool(fname,TRIM,false)) {\n        adders[i] = new CSVLoaderBase.FieldTrimmer(adders[i]);\n      }\n\n      if (params.getFieldBool(fname,SPLIT,false)) {\n        String sepStr = params.getFieldParam(fname,SEPARATOR);\n        char fsep = sepStr==null || sepStr.length()==0 ? ',' : sepStr.charAt(0);\n        String encStr = params.getFieldParam(fname,ENCAPSULATOR);\n        char fenc = encStr==null || encStr.length()==0 ? (char)-2 : encStr.charAt(0);\n        String escStr = params.getFieldParam(fname,ESCAPE);\n        char fesc = escStr==null || escStr.length()==0 ? CSVStrategy.ESCAPE_DISABLED : escStr.charAt(0);\n\n        CSVStrategy fstrat = new CSVStrategy(fsep,fenc,CSVStrategy.COMMENTS_DISABLED,fesc, false, false, false, false);\n        adders[i] = new CSVLoaderBase.FieldSplitter(fstrat, adders[i]);\n      }\n    }\n    // look for any literal fields - literal.foo=xyzzy\n    Iterator<String> paramNames = params.getParameterNamesIterator();\n    while (paramNames.hasNext()) {\n      String pname = paramNames.next();\n      if (!pname.startsWith(LITERALS_PREFIX)) continue;\n\n      String name = pname.substring(LITERALS_PREFIX.length());\n      literals.put(name, params.get(pname));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["042e4d934397657ba04c82b46cc5665076bc5c58","c11575b17e97a75fa89f92c21725abb692781b46"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908c8e2c79736122e37d47d73a053999c24bac65":["c11575b17e97a75fa89f92c21725abb692781b46"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["908c8e2c79736122e37d47d73a053999c24bac65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c11575b17e97a75fa89f92c21725abb692781b46":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["908c8e2c79736122e37d47d73a053999c24bac65","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"042e4d934397657ba04c82b46cc5665076bc5c58":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c11575b17e97a75fa89f92c21725abb692781b46"],"908c8e2c79736122e37d47d73a053999c24bac65":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","df476dd588f9e2c99c43fd9d3d896fd30221938f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"c11575b17e97a75fa89f92c21725abb692781b46":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}