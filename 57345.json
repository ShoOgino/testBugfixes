{"path":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand(req);\n\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                addCmd.overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(req, XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand(req);\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(req, processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b5653af107efef582afd0bc6aff175972359fdd6":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["b5653af107efef582afd0bc6aff175972359fdd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b5653af107efef582afd0bc6aff175972359fdd6"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b5653af107efef582afd0bc6aff175972359fdd6":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}