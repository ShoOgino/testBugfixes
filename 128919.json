{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if (sourceQuery instanceof MultiTermQuery && reader != null) {\n      MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n      copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n      BooleanQuery mtqTerms = (BooleanQuery) copy.rewrite(reader);\n      flatten(mtqTerms, reader, flatQueries);\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if (sourceQuery instanceof MultiTermQuery && reader != null) {\n      MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n      copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n      BooleanQuery mtqTerms = (BooleanQuery) copy.rewrite(reader);\n      flatten(mtqTerms, reader, flatQueries);\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081b68cb9e8f4b5405b40bfb223fd7c587171aa1","date":1360072766,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (reader != null){\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if (sourceQuery instanceof MultiTermQuery && reader != null) {\n      MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n      copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n      BooleanQuery mtqTerms = (BooleanQuery) copy.rewrite(reader);\n      flatten(mtqTerms, reader, flatQueries);\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":["a4388b311bcdd7863e5e3c63404688e60d8e14fe","94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (reader != null){\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if (sourceQuery instanceof MultiTermQuery && reader != null) {\n      MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n      copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n      BooleanQuery mtqTerms = (BooleanQuery) copy.rewrite(reader);\n      flatten(mtqTerms, reader, flatQueries);\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94221e4190ec47a1ec4f0bd8f99b3648af295a06","date":1389175887,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null){\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten(q, reader, flatQueries);\n      }\n    } else if (reader != null){\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707","b77dee084743b07be452cf7c07c992a225b11146","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4388b311bcdd7863e5e3c63404688e60d8e14fe","date":1434124772,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null){\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof FilteredQuery) {\n      final Query q = ((FilteredQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query],float).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost ) throws IOException{\n    while (sourceQuery instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) sourceQuery;\n      sourceQuery = bq.getQuery();\n      boost *= bq.getBoost();\n    }\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( clause.getQuery(), reader, flatQueries, boost );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries, boost );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      PhraseQuery pq = (PhraseQuery)sourceQuery;\n      if( pq.getTerms().length == 1 )\n        sourceQuery = new TermQuery( pq.getTerms()[0] );\n      if (boost != 1f) {\n        sourceQuery = new BoostQuery(sourceQuery, boost);\n      }\n      flatQueries.add(sourceQuery);\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( q, reader, flatQueries, boost);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      Query rewritten;\n      if (sourceQuery instanceof MultiTermQuery) {\n        rewritten = new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS).rewrite(reader, (MultiTermQuery) query);\n      } else {\n        rewritten = query.rewrite(reader);\n      }\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries, boost);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq ) {\n        if( !clause.isProhibited() ) {\n          flatten( applyParentBoost( clause.getQuery(), bq ), reader, flatQueries );\n        }\n      }\n    } else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( applyParentBoost( query, dmq ), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          Query flat = new TermQuery( pq.getTerms()[0] );\n          flat.setBoost( pq.getBoost() );\n          flatQueries.add( flat );\n        }\n      }\n    } else if (sourceQuery instanceof ConstantScoreQuery) {\n      final Query q = ((ConstantScoreQuery) sourceQuery).getQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (sourceQuery instanceof CustomScoreQuery) {\n      final Query q = ((CustomScoreQuery) sourceQuery).getSubQuery();\n      if (q != null) {\n        flatten( applyParentBoost( q, sourceQuery ), reader, flatQueries);\n      }\n    } else if (reader != null) {\n      Query query = sourceQuery;\n      if (sourceQuery instanceof MultiTermQuery) {\n        MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n        copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n        query = copy;\n      }\n      Query rewritten = query.rewrite(reader);\n      if (rewritten != query) {\n        // only rewrite once and then flatten again - the rewritten query could have a speacial treatment\n        // if this method is overwritten in a subclass.\n        flatten(rewritten, reader, flatQueries);\n        \n      } \n      // if the query is already rewritten we discard it\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["a4388b311bcdd7863e5e3c63404688e60d8e14fe"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1db68e96dd908fcd79ef809095822736aa601d08"],"a4388b311bcdd7863e5e3c63404688e60d8e14fe":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4388b311bcdd7863e5e3c63404688e60d8e14fe":["1db68e96dd908fcd79ef809095822736aa601d08"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["a4388b311bcdd7863e5e3c63404688e60d8e14fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}