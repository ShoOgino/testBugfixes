{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"/dev/null","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"/dev/null","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene42\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene45\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":["11a746437bc5c0a0b3df0337ed249c387c812871"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae889c32f4f301251f60804d7082a520e0594c6","date":1402924441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Disk\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene49\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a19b69cac04945230af7260c5b1cee8341235d13","date":1413591570,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(\"Lucene410\", format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Direct\", format.getDocValuesFormatForField(\"foo_direct\").getName());\n    assertEquals(\"Direct\", format.getDocValuesFormatForField(\"bar_direct\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"foo_memory\").getName());\n    assertEquals(\"Memory\", format.getDocValuesFormatForField(\"bar_memory\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2953731e7e1c193da6c8994067babb73115a95b6","date":1567710709,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testDynamicFieldsDocValuesFormats().mjava","sourceNew":"  public void testDynamicFieldsDocValuesFormats() {\n    // NOTE: Direct (and Disk) DocValues formats were removed, so we use \"Asserting\" \n    // as a way to vet that the configuration actually matters.\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Asserting\", format.getDocValuesFormatForField(\"foo_direct\").getName());\n    assertEquals(\"Asserting\", format.getDocValuesFormatForField(\"bar_direct\").getName());\n  }\n\n","sourceOld":"  public void testDynamicFieldsDocValuesFormats() {\n    Codec codec = h.getCore().getCodec();\n    PerFieldDocValuesFormat format = (PerFieldDocValuesFormat) codec.docValuesFormat();\n\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"foo_disk\").getName());\n    assertEquals(TestUtil.getDefaultDocValuesFormat().getName(), format.getDocValuesFormatForField(\"bar_disk\").getName());\n    assertEquals(\"Direct\", format.getDocValuesFormatForField(\"foo_direct\").getName());\n    assertEquals(\"Direct\", format.getDocValuesFormatForField(\"bar_direct\").getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a19b69cac04945230af7260c5b1cee8341235d13":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["73bb5a57dc75b54a39494f99986599cae7dff417","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["73bb5a57dc75b54a39494f99986599cae7dff417","11a746437bc5c0a0b3df0337ed249c387c812871"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","6ae889c32f4f301251f60804d7082a520e0594c6"],"11a746437bc5c0a0b3df0337ed249c387c812871":["73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"24f89e8a6aac05753cde4c83d62a74356098200d":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2953731e7e1c193da6c8994067babb73115a95b6":["24f89e8a6aac05753cde4c83d62a74356098200d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","a19b69cac04945230af7260c5b1cee8341235d13"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["6ae889c32f4f301251f60804d7082a520e0594c6"],"6ae889c32f4f301251f60804d7082a520e0594c6":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2953731e7e1c193da6c8994067babb73115a95b6"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a19b69cac04945230af7260c5b1cee8341235d13":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"24f89e8a6aac05753cde4c83d62a74356098200d":["2953731e7e1c193da6c8994067babb73115a95b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","6ae889c32f4f301251f60804d7082a520e0594c6"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["24f89e8a6aac05753cde4c83d62a74356098200d"],"2953731e7e1c193da6c8994067babb73115a95b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a19b69cac04945230af7260c5b1cee8341235d13","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6ae889c32f4f301251f60804d7082a520e0594c6":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"73bb5a57dc75b54a39494f99986599cae7dff417":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}