{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simUpdateNodeValue(String,String,Function[Object,Object]).mjava","commits":[{"id":"bffd02b7c57b27d76ece244beb098f61c974b9d9","date":1568827127,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simUpdateNodeValue(String,String,Function[Object,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically update a node value.\n   * @param node node id\n   * @param key property name\n   * @param updater updater function\n   * @return previous property value or null if property or node didn't exist.\n   */\n  public Object simUpdateNodeValue(String node, String key, Function<Object, Object> updater) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      return values.put(key, updater.apply(values.get(key)));\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simUpdateNodeValue(String,String,Function[Object,Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Atomically update a node value.\n   * @param node node id\n   * @param key property name\n   * @param updater updater function\n   * @return previous property value or null if property or node didn't exist.\n   */\n  public Object simUpdateNodeValue(String node, String key, Function<Object, Object> updater) throws InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());\n      return values.put(key, updater.apply(values.get(key)));\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["bffd02b7c57b27d76ece244beb098f61c974b9d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"bffd02b7c57b27d76ece244beb098f61c974b9d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bffd02b7c57b27d76ece244beb098f61c974b9d9"],"bffd02b7c57b27d76ece244beb098f61c974b9d9":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}