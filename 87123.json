{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#addHttpConfigurer(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          \n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void addHttpConfigurer(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientInterceptorPlugin) {\n      // Setup HttpClient to use the plugin's configurer for internode communication\n      HttpClientConfigurer configurer = ((HttpClientInterceptorPlugin) authcPlugin).getClientConfigurer();\n      HttpClientUtil.setConfigurer(configurer);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring the shard handler factory and update shard handler.\");\n      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {\n        ((HttpShardHandlerFactory) getShardHandlerFactory()).reconfigureHttpClient(configurer);\n      }\n      getUpdateShardHandler().reconfigureHttpClient(configurer);\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        addHttpConfigurer(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          \n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.info(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n          \n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n    }\n    // Always register PKI auth interceptor, which will then delegate the decision of who should secure\n    // each request to the configured authentication plugin.\n    if (pkiAuthenticationPlugin != null && !pkiAuthenticationPlugin.isInterceptorRegistered()) {\n      pkiAuthenticationPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n\n    } else {\n      if (pkiAuthenticationPlugin != null) {\n        //this happened due to an authc plugin reload. no need to register the pkiAuthc plugin again\n        if(pkiAuthenticationPlugin.isInterceptorRegistered()) return;\n        log.info(\"PKIAuthenticationPlugin is managing internode requests\");\n        setupHttpClientForAuthPlugin(pkiAuthenticationPlugin);\n        pkiAuthenticationPlugin.setInterceptorRegistered();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      HttpClientBuilderPlugin builderPlugin = ((HttpClientBuilderPlugin) authcPlugin);\n      SolrHttpClientBuilder builder = builderPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(builderPlugin);\n      updateShardHandler.setSecurityBuilder(builderPlugin);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n    }\n    // Always register PKI auth interceptor, which will then delegate the decision of who should secure\n    // each request to the configured authentication plugin.\n    if (pkiAuthenticationPlugin != null && !pkiAuthenticationPlugin.isInterceptorRegistered()) {\n      pkiAuthenticationPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(pkiAuthenticationPlugin);\n      updateShardHandler.setSecurityBuilder(pkiAuthenticationPlugin);\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      SolrHttpClientBuilder builder = ((HttpClientBuilderPlugin) authcPlugin).getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      \n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n    }\n    // Always register PKI auth interceptor, which will then delegate the decision of who should secure\n    // each request to the configured authentication plugin.\n    if (pkiAuthenticationPlugin != null && !pkiAuthenticationPlugin.isInterceptorRegistered()) {\n      pkiAuthenticationPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#setupHttpClientForAuthPlugin(Object).mjava","sourceNew":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      HttpClientBuilderPlugin builderPlugin = ((HttpClientBuilderPlugin) authcPlugin);\n      SolrHttpClientBuilder builder = builderPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(builderPlugin);\n      updateShardHandler.setSecurityBuilder(builderPlugin);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n\n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n    }\n    // Always register PKI auth interceptor, which will then delegate the decision of who should secure\n    // each request to the configured authentication plugin.\n    if (pkiAuthenticationPlugin != null && !pkiAuthenticationPlugin.isInterceptorRegistered()) {\n      pkiAuthenticationPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(pkiAuthenticationPlugin);\n      updateShardHandler.setSecurityBuilder(pkiAuthenticationPlugin);\n    }\n  }\n\n","sourceOld":"  private void setupHttpClientForAuthPlugin(Object authcPlugin) {\n    if (authcPlugin instanceof HttpClientBuilderPlugin) {\n      // Setup HttpClient for internode communication\n      HttpClientBuilderPlugin builderPlugin = ((HttpClientBuilderPlugin) authcPlugin);\n      SolrHttpClientBuilder builder = builderPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(builderPlugin);\n      updateShardHandler.setSecurityBuilder(builderPlugin);\n\n      // The default http client of the core container's shardHandlerFactory has already been created and\n      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's\n      // http client configurer to set it up for internode communication.\n      log.debug(\"Reconfiguring HttpClient settings.\");\n\n      SolrHttpClientContextBuilder httpClientBuilder = new SolrHttpClientContextBuilder();\n      if (builder.getCredentialsProviderProvider() != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n          \n          @Override\n          public CredentialsProvider getCredentialsProvider() {\n            return builder.getCredentialsProviderProvider().getCredentialsProvider();\n          }\n        });\n      }\n      if (builder.getAuthSchemeRegistryProvider() != null) {\n        httpClientBuilder.setAuthSchemeRegistryProvider(new AuthSchemeRegistryProvider() {\n\n          @Override\n          public Lookup<AuthSchemeProvider> getAuthSchemeRegistry() {\n            return builder.getAuthSchemeRegistryProvider().getAuthSchemeRegistry();\n          }\n        });\n      }\n\n      HttpClientUtil.setHttpClientRequestContextBuilder(httpClientBuilder);\n    }\n    // Always register PKI auth interceptor, which will then delegate the decision of who should secure\n    // each request to the configured authentication plugin.\n    if (pkiAuthenticationPlugin != null && !pkiAuthenticationPlugin.isInterceptorRegistered()) {\n      pkiAuthenticationPlugin.getHttpClientBuilder(HttpClientUtil.getHttpClientBuilder());\n      shardHandlerFactory.setSecurityBuilder(pkiAuthenticationPlugin);\n      updateShardHandler.setSecurityBuilder(pkiAuthenticationPlugin);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"126d6ad24eed13163ba0959435d5a80e5672837c":["e22a92d60a5a6320f9653856966fcd77c60953b3","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e22a92d60a5a6320f9653856966fcd77c60953b3","126d6ad24eed13163ba0959435d5a80e5672837c"],"b627755385655c7cd3fb296f17593658805cf4d5":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["b627755385655c7cd3fb296f17593658805cf4d5"],"859081acf00749f5dd462772c571d611d4a4d2db":["e22a92d60a5a6320f9653856966fcd77c60953b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4bb519c79b76e52145e37b6681a7012525ed5f4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}