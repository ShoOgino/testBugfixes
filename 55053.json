{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","commits":[{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","pathOld":"/dev/null","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    boolean waitedEnough = false;\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      TreeMap<Long, String> orderedChildren;\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n\n        if (orderedChildren.size() == 0) {\n          if(waitedEnough) return null;\n          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n          waitedEnough = wait != Long.MAX_VALUE;\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          if (headNode != null && topN.size() < n) {\n            try {\n              String id = dir + \"/\" + headNode;\n              if (excludeSet != null && excludeSet.contains(id)) continue;\n              QueueEvent queueEvent = new QueueEvent(id,\n                  zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n              topN.add(queueEvent);\n            } catch (KeeperException.NoNodeException e) {\n              // Another client removed the node first, try next\n            }\n          } else {\n            if (topN.size() >= 1) {\n              printQueueEventsListElementIds(topN);\n              return topN;\n            }\n          }\n        }\n\n        if (topN.size() > 0 ) {\n          printQueueEventsListElementIds(topN);\n          return topN;\n        }\n        if (waitedEnough) {\n          LOG.debug(\"Waited enough, returning null after peekTopN\");\n          return null;\n        }\n        childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","pathOld":"/dev/null","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    boolean waitedEnough = false;\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      TreeMap<Long, String> orderedChildren;\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n\n        if (orderedChildren.size() == 0) {\n          if(waitedEnough) return null;\n          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n          waitedEnough = wait != Long.MAX_VALUE;\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          if (headNode != null && topN.size() < n) {\n            try {\n              String id = dir + \"/\" + headNode;\n              if (excludeSet != null && excludeSet.contains(id)) continue;\n              QueueEvent queueEvent = new QueueEvent(id,\n                  zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n              topN.add(queueEvent);\n            } catch (KeeperException.NoNodeException e) {\n              // Another client removed the node first, try next\n            }\n          } else {\n            if (topN.size() >= 1) {\n              printQueueEventsListElementIds(topN);\n              return topN;\n            }\n          }\n        }\n\n        if (topN.size() > 0 ) {\n          printQueueEventsListElementIds(topN);\n          return topN;\n        }\n        if (waitedEnough) {\n          LOG.debug(\"Waited enough, returning null after peekTopN\");\n          return null;\n        }\n        childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ada2a0b40c19e896a9d20355e13cae9601c251c","date":1407460596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      TreeMap<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        if (headNode != null && topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet != null && excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    boolean waitedEnough = false;\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      TreeMap<Long, String> orderedChildren;\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n\n        if (orderedChildren.size() == 0) {\n          if(waitedEnough) return null;\n          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n          waitedEnough = wait != Long.MAX_VALUE;\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          if (headNode != null && topN.size() < n) {\n            try {\n              String id = dir + \"/\" + headNode;\n              if (excludeSet != null && excludeSet.contains(id)) continue;\n              QueueEvent queueEvent = new QueueEvent(id,\n                  zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n              topN.add(queueEvent);\n            } catch (KeeperException.NoNodeException e) {\n              // Another client removed the node first, try next\n            }\n          } else {\n            if (topN.size() >= 1) {\n              printQueueEventsListElementIds(topN);\n              return topN;\n            }\n          }\n        }\n\n        if (topN.size() > 0 ) {\n          printQueueEventsListElementIds(topN);\n          return topN;\n        }\n        if (waitedEnough) {\n          LOG.debug(\"Waited enough, returning null after peekTopN\");\n          return null;\n        }\n        childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa7843ca6910809c5d95c44205d1b78ebee893da","date":1407507547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      Map<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        if (headNode != null && topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet != null && excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      TreeMap<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        if (headNode != null && topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet != null && excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekTopN(int,Set[String],Long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, Long wait)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: \" + excludeSet.toString());\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + wait);\n\n    try {\n      Map<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        if (headNode != null && topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet != null && excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ada2a0b40c19e896a9d20355e13cae9601c251c":["6f26f74e4969851a019d28f10315cb1c77786f22"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a282020d6c9a4ea32a359539e283e4771a2fda8"]},"commit2Childs":{"0ada2a0b40c19e896a9d20355e13cae9601c251c":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["0ada2a0b40c19e896a9d20355e13cae9601c251c","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}