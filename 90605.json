{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = new MockRAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory(random);\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new MockRAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory(random);\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = new RAMDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newInOrderLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new Field(\"bin1\", bin));\n        doc.add(new Field(\"junk\", \"junk text\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        Field[] fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        Field b1 = fields[0];\n        assertTrue(b1.isBinary());\n        byte[] data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        Set<String> lazyFields = new HashSet<String>();\n        lazyFields.add(\"bin1\");\n        FieldSelector sel = new SetBasedFieldSelector(new HashSet<String>(), lazyFields);\n        doc = reader.document(reader.maxDoc() - 1, sel);\n        Fieldable[] fieldables = doc.getFieldables(\"bin1\");\n        assertNotNull(fieldables);\n        assertEquals(1, fieldables.length);\n        Fieldable fb1 = fieldables[0];\n        assertTrue(fb1.isBinary());\n        assertEquals(bin.length, fb1.getBinaryLength());\n        data1 = fb1.getBinaryValue();\n        assertEquals(bin.length, fb1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + fb1.getBinaryOffset()]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc = reader.document(reader.maxDoc() - 1);\n        fields = doc.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.isBinary());\n        data1 = b1.getBinaryValue();\n        assertEquals(bin.length, b1.getBinaryLength());\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], data1[i + b1.getBinaryOffset()]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force optimize\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.optimize();\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, false);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new BinaryField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = IndexReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"c19f985e36a65cc969e8e564fe337a0d41512075":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fa0f44f887719e97183771e977cfc4bfb485b766","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["fa0f44f887719e97183771e977cfc4bfb485b766"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","fa0f44f887719e97183771e977cfc4bfb485b766"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}