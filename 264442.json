{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","commits":[{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene70SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene70SegmentInfoFormat.CODEC_NAME,\n                                                Lucene70SegmentInfoFormat.VERSION_START,\n                                                Lucene70SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        byte hasMinVersion = input.readByte();\n        final Version minVersion;\n        switch (hasMinVersion) {\n          case 0:\n            minVersion = null;\n            break;\n          case 1:\n            minVersion = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n            break;\n          default:\n            throw new CorruptIndexException(\"Illegal boolean value \" + hasMinVersion, input);\n        }\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, minVersion, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene70SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene70SegmentInfoFormat.CODEC_NAME,\n                                                Lucene70SegmentInfoFormat.VERSION_START,\n                                                Lucene70SegmentInfoFormat.VERSION_CURRENT,\n                                                segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        byte hasMinVersion = input.readByte();\n        final Version minVersion;\n        switch (hasMinVersion) {\n          case 0:\n            minVersion = null;\n            break;\n          case 1:\n            minVersion = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n            break;\n          default:\n            throw new CorruptIndexException(\"Illegal boolean value \" + hasMinVersion, input);\n        }\n\n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n        final Map<String,String> diagnostics = input.readMapOfStrings();\n        final Set<String> files = input.readSetOfStrings();\n        final Map<String,String> attributes = input.readMapOfStrings();\n\n        int numSortFields = input.readVInt();\n        Sort indexSort;\n        if (numSortFields > 0) {\n          SortField[] sortFields = new SortField[numSortFields];\n          for(int i=0;i<numSortFields;i++) {\n            String fieldName = input.readString();\n            int sortTypeID = input.readVInt();\n            SortField.Type sortType;\n            SortedSetSelector.Type sortedSetSelector = null;\n            SortedNumericSelector.Type sortedNumericSelector = null;\n            switch(sortTypeID) {\n            case 0:\n              sortType = SortField.Type.STRING;\n              break;\n            case 1:\n              sortType = SortField.Type.LONG;\n              break;\n            case 2:\n              sortType = SortField.Type.INT;\n              break;\n            case 3:\n              sortType = SortField.Type.DOUBLE;\n              break;\n            case 4:\n              sortType = SortField.Type.FLOAT;\n              break;\n            case 5:\n              sortType = SortField.Type.STRING;\n              byte selector = input.readByte();\n              if (selector == 0) {\n                sortedSetSelector = SortedSetSelector.Type.MIN;\n              } else if (selector == 1) {\n                sortedSetSelector = SortedSetSelector.Type.MAX;\n              } else if (selector == 2) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MIN;\n              } else if (selector == 3) {\n                sortedSetSelector = SortedSetSelector.Type.MIDDLE_MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedSetSelector ID: \" + selector, input);\n              }\n              break;\n            case 6:\n              byte type = input.readByte();\n              if (type == 0) {\n                sortType = SortField.Type.LONG;\n              } else if (type == 1) {\n                sortType = SortField.Type.INT;\n              } else if (type == 2) {\n                sortType = SortField.Type.DOUBLE;\n              } else if (type == 3) {\n                sortType = SortField.Type.FLOAT;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSortField type ID: \" + type, input);\n              }\n              byte numericSelector = input.readByte();\n              if (numericSelector == 0) {\n                sortedNumericSelector = SortedNumericSelector.Type.MIN;\n              } else if (numericSelector == 1) {\n                sortedNumericSelector = SortedNumericSelector.Type.MAX;\n              } else {\n                throw new CorruptIndexException(\"invalid index SortedNumericSelector ID: \" + numericSelector, input);\n              }\n              break;\n            default:\n              throw new CorruptIndexException(\"invalid index sort field type ID: \" + sortTypeID, input);\n            }\n            byte b = input.readByte();\n            boolean reverse;\n            if (b == 0) {\n              reverse = true;\n            } else if (b == 1) {\n              reverse = false;\n            } else {\n              throw new CorruptIndexException(\"invalid index sort reverse: \" + b, input);\n            }\n\n            if (sortedSetSelector != null) {\n              sortFields[i] = new SortedSetSortField(fieldName, reverse, sortedSetSelector);\n            } else if (sortedNumericSelector != null) {\n              sortFields[i] = new SortedNumericSortField(fieldName, sortType, reverse, sortedNumericSelector);\n            } else {\n              sortFields[i] = new SortField(fieldName, sortType, reverse);\n            }\n\n            Object missingValue;\n            b = input.readByte();\n            if (b == 0) {\n              missingValue = null;\n            } else {\n              switch(sortType) {\n              case STRING:\n                if (b == 1) {\n                  missingValue = SortField.STRING_LAST;\n                } else if (b == 2) {\n                  missingValue = SortField.STRING_FIRST;\n                } else {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                break;\n              case LONG:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readLong();\n                break;\n              case INT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = input.readInt();\n                break;\n              case DOUBLE:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Double.longBitsToDouble(input.readLong());\n                break;\n              case FLOAT:\n                if (b != 1) {\n                  throw new CorruptIndexException(\"invalid missing value flag: \" + b, input);\n                }\n                missingValue = Float.intBitsToFloat(input.readInt());\n                break;\n              default:\n                throw new AssertionError(\"unhandled sortType=\" + sortType);\n              }\n            }\n            if (missingValue != null) {\n              sortFields[i].setMissingValue(missingValue);\n            }\n          }\n          indexSort = new Sort(sortFields);\n        } else if (numSortFields < 0) {\n          throw new CorruptIndexException(\"invalid index sort field count: \" + numSortFields, input);\n        } else {\n          indexSort = null;\n        }\n\n        si = new SegmentInfo(dir, version, minVersion, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, indexSort);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}