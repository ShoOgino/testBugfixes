{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<FieldFacetAccumulator>();\n    this.hiddenFieldFacets = new HashSet<String>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<RangeFacetRequest>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<QueryFacetRequest>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<FieldFacetAccumulator>();\n    this.hiddenFieldFacets = new HashSet<String>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<RangeFacetRequest>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<QueryFacetRequest>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<String,Map<String,Expression[]>>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<String,Map<String,StatsCollector[]>>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<FieldFacetAccumulator>();\n    this.hiddenFieldFacets = new HashSet<String>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<RangeFacetRequest>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<QueryFacetRequest>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"645e9dc687d04dbe961b35c0f3a305c48e892615","date":1396352607,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ff403346522eaa9de75403763e297e83a3ea585c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#FacetingAccumulator(SolrIndexSearcher,DocSet,AnalyticsRequest,SolrQueryRequest).mjava","sourceNew":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","sourceOld":"  public FacetingAccumulator(SolrIndexSearcher searcher, DocSet docs, AnalyticsRequest request, SolrQueryRequest queryRequest) throws IOException {\n    // The parent Basic Accumulator keeps track of overall stats while\n    // the Faceting Accumulator only manages the facet stats\n    super(searcher, docs, request);\n    this.analyticsRequest = request;\n    this.queryRequest = queryRequest;\n    basicsAndFieldFacetsComputed = false;\n    List<FieldFacetRequest> fieldFreqs = request.getFieldFacets();\n    List<RangeFacetRequest> rangeFreqs = request.getRangeFacets();\n    List<QueryFacetRequest> queryFreqs = request.getQueryFacets();\n\n    this.fieldFacetExpressions = new TreeMap<>();\n    this.rangeFacetExpressions = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetExpressions = new LinkedHashMap<>(queryFreqs.size());\n    this.fieldFacetCollectors = new LinkedHashMap<>(fieldFreqs.size());\n    this.rangeFacetCollectors = new LinkedHashMap<>(rangeFreqs.size());\n    this.queryFacetCollectors = new LinkedHashMap<>(queryFreqs.size());\n    this.facetAccumulators = new ArrayList<>();\n    this.hiddenFieldFacets = new HashSet<>();\n    \n    /**\n     * For each field facet request add a bucket to the {@link Expression} map and {@link StatsCollector} map.\n     * Field facets are computed during the initial collection of documents, therefore\n     * the FieldFacetAccumulators are created initially.\n     */\n    for( FieldFacetRequest freq : fieldFreqs ){\n      final FieldFacetRequest fr = (FieldFacetRequest) freq;\n      if (fr.isHidden()) {\n        hiddenFieldFacets.add(fr.getName());\n      }\n      final SchemaField ff = fr.getField();\n      final FieldFacetAccumulator facc = FieldFacetAccumulator.create(searcher, this, ff);\n      facetAccumulators.add(facc);\n      fieldFacetExpressions.put(freq.getName(), new TreeMap<String, Expression[]>() );\n      fieldFacetCollectors.put(freq.getName(), new TreeMap<String,StatsCollector[]>());\n    }\n    /**\n     * For each range and query facet request add a bucket to the corresponding\n     * {@link Expression} map and {@link StatsCollector} map.\n     * Range and Query Facets are computed in the post processing, so the accumulators\n     * are not created initially.\n     */\n    for( RangeFacetRequest freq : rangeFreqs ){\n      if( rangeFacets == null ) rangeFacets = new ArrayList<>();\n      rangeFacets.add(freq);\n      rangeFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      rangeFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    for( QueryFacetRequest freq : queryFreqs ){\n      if( queryFacets == null ) queryFacets = new ArrayList<>();\n      queryFacets.add(freq);\n      queryFacetExpressions.put(freq.getName(), new LinkedHashMap<String,Expression[]>() );\n      queryFacetCollectors.put(freq.getName(), new LinkedHashMap<String,StatsCollector[]>());\n    }\n    this.queryCount = 0l;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","645e9dc687d04dbe961b35c0f3a305c48e892615"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"645e9dc687d04dbe961b35c0f3a305c48e892615":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","645e9dc687d04dbe961b35c0f3a305c48e892615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"645e9dc687d04dbe961b35c0f3a305c48e892615":["5eb2511ababf862ea11e10761c70ee560cd84510","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}