{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":null,"sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}