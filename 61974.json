{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","commits":[{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,float,boolean,int).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs, bytesPageBits);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs, bytesPageBits);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    this.allowArrayArcs = allowArrayArcs;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, bytesPageBits);\n    bytes = fst.bytes;\n    assert bytes != null;\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, allowArrayArcs, bytesPageBits);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, fst.bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean allowArrayArcs, int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.allowArrayArcs = allowArrayArcs;\n    fst = new FST<>(inputType, outputs, bytesPageBits);\n    bytes = fst.bytes;\n    assert bytes != null;\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    this.allowArrayArcs = allowArrayArcs;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, bytesPageBits);\n    bytes = fst.bytes;\n    assert bytes != null;\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean allowArrayArcs, int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.allowArrayArcs = allowArrayArcs;\n    fst = new FST<>(inputType, outputs, bytesPageBits);\n    bytes = fst.bytes;\n    assert bytes != null;\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single suffix path for all input sequences. This will result in a larger\n   *    FST, but requires substantially less memory and CPU during building.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param doPackFST Pass true to create a packed FST.\n   * \n   * @param acceptableOverheadRatio How to trade speed for space when building the FST. This option\n   *    is only relevant when doPackFST is true. @see PackedInts#getMutable(int, int, float)\n   *\n   * @param allowArrayArcs Pass false to disable the array arc optimization\n   *    while building the FST; this will make the resulting\n   *    FST smaller but slower to traverse.\n   *\n   * @param bytesPageBits How many bits wide to make each\n   *    byte[] block in the BytesStore; if you know the FST\n   *    will be large then make this larger.  For example 15\n   *    bits = 32768 byte pages.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 boolean doPackFST, float acceptableOverheadRatio, boolean allowArrayArcs,\n                 int bytesPageBits) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    this.allowArrayArcs = allowArrayArcs;\n    fst = new FST<>(inputType, outputs, doPackFST, acceptableOverheadRatio, bytesPageBits);\n    bytes = fst.bytes;\n    assert bytes != null;\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<>(fst, bytes.getReverseReader(false));\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["f838187609fee3a1afa5f162f93c796046242c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["1abb939fb41b2fe4f89fd518f3da288c0213341d","6244579a467d5f2673ac98265d74bddbea1a8114"],"f838187609fee3a1afa5f162f93c796046242c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6244579a467d5f2673ac98265d74bddbea1a8114"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f838187609fee3a1afa5f162f93c796046242c84"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"f838187609fee3a1afa5f162f93c796046242c84":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}