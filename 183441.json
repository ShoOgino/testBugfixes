{"path":"lucene/core/src/java/org/apache/lucene/util/fst/PositiveIntOutputs#common(Long,Long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PositiveIntOutputs#common(Long,Long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/PositiveIntOutputs#common(Long,Long).mjava","sourceNew":"  @Override\n  public Long common(Long output1, Long output2) {\n    assert valid(output1);\n    assert valid(output2);\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Long common(Long output1, Long output2) {\n    assert valid(output1);\n    assert valid(output2);\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PositiveIntOutputs#common(Long,Long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/PositiveIntOutputs#common(Long,Long).mjava","sourceNew":"  @Override\n  public Long common(Long output1, Long output2) {\n    assert valid(output1);\n    assert valid(output2);\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Long common(Long output1, Long output2) {\n    assert valid(output1);\n    assert valid(output2);\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}