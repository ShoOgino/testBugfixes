{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","commits":[{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","pathOld":"/dev/null","sourceNew":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","sourceNew":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","sourceOld":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","pathOld":"/dev/null","sourceNew":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","pathOld":"/dev/null","sourceNew":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","sourceOld":"  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SystemLogListener#addOperations(SolrInputDocument,List[SolrRequest]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  private void addOperations(SolrInputDocument doc, List<SolrRequest> operations) {\n    if (operations == null || operations.isEmpty()) {\n      return;\n    }\n    Set<String> collections = new HashSet<>();\n    for (SolrRequest req : operations) {\n      SolrParams params = req.getParams();\n      if (params == null) {\n        continue;\n      }\n      if (params.get(CollectionAdminParams.COLLECTION) != null) {\n        collections.add(params.get(CollectionAdminParams.COLLECTION));\n      }\n      // build a whitespace-separated param string\n      StringJoiner paramJoiner = new StringJoiner(\" \");\n      paramJoiner.setEmptyValue(\"\");\n      for (Iterator<String> it = params.getParameterNamesIterator(); it.hasNext(); ) {\n        final String name = it.next();\n        final String [] values = params.getParams(name);\n        for (String value : values) {\n          paramJoiner.add(name + \"=\" + value);\n        }\n      }\n      String paramString = paramJoiner.toString();\n      if (!paramString.isEmpty()) {\n        doc.addField(\"operations.params_ts\", paramString);\n      }\n    }\n    if (!collections.isEmpty()) {\n      doc.addField(COLLECTIONS_FIELD, collections);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}