{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasksWithRate().mjava","sourceNew":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasksWithRate() throws Exception {\n    initTasksArray();\n    long delayStep = (perMin ? 60000 : 1000) /rate;\n    long nextStartTime = System.currentTimeMillis();\n    int count = 0;\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for (int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        while(!stopNow) {\n          long waitMore = nextStartTime - System.currentTimeMillis();\n          if (waitMore > 0) {\n            // TODO: better to use condition to notify\n            Thread.sleep(1);\n          } else {\n            break;\n          }\n        }\n        if (stopNow) {\n          break;\n        }\n        nextStartTime += delayStep; // this aims at avarage rate. \n        try {\n          final int inc = task.runAndMaybeStats(letChildReport);\n          count += inc;\n          if (countsByTime != null) {\n            final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n            if (slot >= countsByTime.length) {\n              countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n            }\n            countsByTime[slot] += inc;\n          }\n\n          if (anyExhaustibleTasks)\n            updateExhausted(task);\n        } catch (NoMoreDataException e) {\n          exhausted = true;\n        }\n      }\n    }\n    stopNow = false;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}