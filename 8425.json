{"path":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    try {\n      FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n      Document doc = reader.doc(0);\n      assertTrue(doc != null);\n      assertTrue(doc.getField(\"textField1\") != null);\n      Field field = doc.getField(\"textField2\");\n      assertTrue(field != null);\n      assertTrue(field.isTermVectorStored() == true);\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    try {\n      FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n      Document doc = reader.doc(0);\n      assertTrue(doc != null);\n      assertTrue(doc.getField(\"textField1\") != null);\n      Field field = doc.getField(\"textField2\");\n      assertTrue(field != null);\n      assertTrue(field.isTermVectorStored() == true);\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ecb6864b77a0263c37819f134b34239b8c9299f","date":1129740971,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    \n    \n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    \n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    \n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    \n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    \n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(\"textField3\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    \n    \n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    \n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    \n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(\"textField1\") != null);\n    \n    Field field = doc.getField(\"textField2\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n    \n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(\"textField3\");\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, \"test\", fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTf() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTf() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTf() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n\n\n    reader.close();\n  }\n\n","bugFix":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTf() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTf() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTf() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f44f07aa147c21735d6c43bafa4fde560d0362e1":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"7ecb6864b77a0263c37819f134b34239b8c9299f":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12d40284fd9481f79444bc63bc5d13847caddd3d":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["7ecb6864b77a0263c37819f134b34239b8c9299f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"f44f07aa147c21735d6c43bafa4fde560d0362e1":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"7ecb6864b77a0263c37819f134b34239b8c9299f":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["7ecb6864b77a0263c37819f134b34239b8c9299f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}