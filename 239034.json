{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","commits":[{"id":"059062eb4071e7bbb5a38b6513158f2f87ede135","date":1163808719,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d","date":1210334686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.TOKENIZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367","date":1241174228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"712be41a80a289d25186217345860f2ddec4cab8","date":1254838366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["712be41a80a289d25186217345860f2ddec4cab8"],"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"712be41a80a289d25186217345860f2ddec4cab8":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5bf26a11728ffdf1d7a0eac68fd2cd501d45f367"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["712be41a80a289d25186217345860f2ddec4cab8"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5bf26a11728ffdf1d7a0eac68fd2cd501d45f367":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"712be41a80a289d25186217345860f2ddec4cab8":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}