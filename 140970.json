{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", collectionName, clusterShape(1, 2));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 2));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", collectionName, clusterShape(1, 2));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    waitForState(\"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 2, false, true));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 2));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionSplitShard().mjava","sourceNew":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 2, false, true));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","sourceOld":"  public void testCreateCollectionSplitShard() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String firstNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int firstNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(firstNode, ImplicitSnitch.PORT);\n\n    String secondNode;\n    int secondNodePort;\n    while (true)  {\n      secondNode = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n      secondNodePort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(secondNode, ImplicitSnitch.PORT);\n      if (secondNodePort != firstNodePort)  break;\n    }\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + firstNodePort + \"'}, {replica:1, shard:'#EACH', port:'\" + secondNodePort + \"'}]}}\";\n    NamedList<Object> response = solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    assertEquals(\"success\", response.get(\"result\"));\n\n    String collectionName = \"testCreateCollectionSplitShard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 2, false, true));\n\n    DocCollection docCollection = getCollectionState(collectionName);\n    List<Replica> list = docCollection.getReplicas(firstNode);\n    int replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    int replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + firstNodePort, 1, replicasOnNode1);\n    assertEquals(\"Expected exactly one replica of collection on node with port: \" + secondNodePort, 1, replicasOnNode2);\n\n    CollectionAdminRequest.splitShard(collectionName).setShardName(\"shard1\").process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 6 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 6);\n\n    docCollection = getCollectionState(collectionName);\n    list = docCollection.getReplicas(firstNode);\n    replicasOnNode1 = list != null ? list.size() : 0;\n    list = docCollection.getReplicas(secondNode);\n    replicasOnNode2 = list != null ? list.size() : 0;\n\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + firstNodePort, 3, replicasOnNode1);\n    assertEquals(\"Expected exactly three replica of collection on node with port: \" + secondNodePort, 3, replicasOnNode2);\n    CollectionAdminRequest.deleteCollection(collectionName).process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}