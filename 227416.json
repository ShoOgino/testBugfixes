{"path":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","commits":[{"id":"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c","date":1475421873,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        return client.exists((String) invocation.getArguments()[0], true);\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        return client.exists((String) invocation.getArguments()[0], true);\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        return client.exists((String) invocation.getArguments()[0], true);\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b","date":1485551348,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        return client.exists((String) invocation.getArguments()[0], true);\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","date":1485624051,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        return client.exists((String) invocation.getArguments()[0], true);\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    assumeWorkingMockito();\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    assumeWorkingMockito();\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchemaThreadSafety#createZkController(SolrZkClient).mjava","sourceNew":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    assumeWorkingMockito();\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    ZkController zkController = mock(ZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","sourceOld":"  private ZkController createZkController(SolrZkClient client) throws KeeperException, InterruptedException {\n    assumeWorkingMockito();\n    \n    CoreContainer mockAlwaysUpCoreContainer = mock(CoreContainer.class, \n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n    when(mockAlwaysUpCoreContainer.isShutDown()).thenReturn(Boolean.FALSE);  // Allow retry on session expiry\n    \n    \n    MockZkController zkController = mock(MockZkController.class,\n        Mockito.withSettings().defaultAnswer(Mockito.CALLS_REAL_METHODS));\n\n    when(zkController.getCoreContainer()).thenReturn(mockAlwaysUpCoreContainer);\n\n    when(zkController.getZkClient()).thenReturn(client);\n    Mockito.doAnswer(new Answer<Boolean>() {\n      volatile boolean sessionExpired=false;\n      \n      @Override\n      public Boolean answer(InvocationOnMock invocation) throws Throwable {\n        String path = (String) invocation.getArguments()[0];\n        perhapsExpired();\n        Boolean exists = client.exists(path, true);\n        perhapsExpired();\n        return exists;\n      }\n\n      private void perhapsExpired() throws SessionExpiredException {\n        if (!sessionExpired && rarely()) {\n          sessionExpired = true;\n          throw new KeeperException.SessionExpiredException();\n        }\n      }\n    }).when(zkController).pathExists(Mockito.anyString());\n    return zkController;\n  }\n\n","bugFix":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c"],"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bf90aca5594a4b2ffa5cb9dff23e0a27b7a6126b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6586bbbc5a9acb1d4613edc6ba8d90836f7cba2c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f0ad0ec211daaa6cc11fe7fe1ffa94aa5a1edec5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}