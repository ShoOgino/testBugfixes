{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    StoredDocument newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc.asIndexable());\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    StoredDocument newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc.asIndexable());\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68b98ddc74778e6afa5ec788e2a4466f60ddddb","date":1391709406,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random().nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.shutdown();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.shutdown();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f695337371af9f2554c2d7ecc301f4306bd864b","date":1433621466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = new Document(r1.document(10));\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    System.out.println(\"TEST: now get reader\");\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    iwc.setMergePolicy(NoMergePolicy.INSTANCE);\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newStringField(\"id\", Integer.toString(8000), Field.Store.YES));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    assertTrue(r2.isCurrent());\n    writer.close();\n    // writer.close wrote a new commit\n    assertFalse(r2.isCurrent());\n    \n    DirectoryReader r3 = DirectoryReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertFalse(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    writer.addDocument(doc);\n    assertFalse(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"527cc14542789f47d75da436cb4287d1ab887e34":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["1d028314cced5858683a1bb4741423d0f934257b"],"409324b31a1419d7c05a38211168cf317e39be77":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"d68b98ddc74778e6afa5ec788e2a4466f60ddddb":["527cc14542789f47d75da436cb4287d1ab887e34"],"28288370235ed02234a64753cdbf0c6ec096304a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","409324b31a1419d7c05a38211168cf317e39be77"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d68b98ddc74778e6afa5ec788e2a4466f60ddddb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4f695337371af9f2554c2d7ecc301f4306bd864b"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"527cc14542789f47d75da436cb4287d1ab887e34":["d68b98ddc74778e6afa5ec788e2a4466f60ddddb"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["527cc14542789f47d75da436cb4287d1ab887e34"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["409324b31a1419d7c05a38211168cf317e39be77"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"d68b98ddc74778e6afa5ec788e2a4466f60ddddb":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4f695337371af9f2554c2d7ecc301f4306bd864b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}