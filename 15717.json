{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = TempBlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = TempBlockTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = TempBlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}