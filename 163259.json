{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testPalatalization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testPalatalization().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testPalatalization().mjava","sourceNew":"  /**\n   * Note: we intentionally don't handle the ambiguous\n   * (s,t) -> š and (d,z) -> ž\n   */\n  public void testPalatalization() throws IOException {\n    checkOneTerm(a, \"krāsns\", \"krāsn\"); // nom. sing.\n    checkOneTerm(a, \"krāšņu\", \"krāsn\"); // gen. pl.\n    checkOneTerm(a, \"zvaigzne\", \"zvaigzn\"); // nom. sing.\n    checkOneTerm(a, \"zvaigžņu\", \"zvaigzn\"); // gen. pl.\n    checkOneTerm(a, \"kāpslis\", \"kāpsl\"); // nom. sing.\n    checkOneTerm(a, \"kāpšļu\",  \"kāpsl\"); // gen. pl.\n    checkOneTerm(a, \"zizlis\", \"zizl\"); // nom. sing.\n    checkOneTerm(a, \"zižļu\",  \"zizl\"); // gen. pl.\n    checkOneTerm(a, \"vilnis\", \"viln\"); // nom. sing.\n    checkOneTerm(a, \"viļņu\",  \"viln\"); // gen. pl.\n    checkOneTerm(a, \"lelle\", \"lell\"); // nom. sing.\n    checkOneTerm(a, \"leļļu\", \"lell\"); // gen. pl.\n    checkOneTerm(a, \"pinne\", \"pinn\"); // nom. sing.\n    checkOneTerm(a, \"piņņu\", \"pinn\"); // gen. pl.\n    checkOneTerm(a, \"rīkste\", \"rīkst\"); // nom. sing.\n    checkOneTerm(a, \"rīkšu\",  \"rīkst\"); // gen. pl.\n  }\n\n","sourceOld":"  /**\n   * Note: we intentionally don't handle the ambiguous\n   * (s,t) -> š and (d,z) -> ž\n   */\n  public void testPalatalization() throws IOException {\n    checkOneTerm(a, \"krāsns\", \"krāsn\"); // nom. sing.\n    checkOneTerm(a, \"krāšņu\", \"krāsn\"); // gen. pl.\n    checkOneTerm(a, \"zvaigzne\", \"zvaigzn\"); // nom. sing.\n    checkOneTerm(a, \"zvaigžņu\", \"zvaigzn\"); // gen. pl.\n    checkOneTerm(a, \"kāpslis\", \"kāpsl\"); // nom. sing.\n    checkOneTerm(a, \"kāpšļu\",  \"kāpsl\"); // gen. pl.\n    checkOneTerm(a, \"zizlis\", \"zizl\"); // nom. sing.\n    checkOneTerm(a, \"zižļu\",  \"zizl\"); // gen. pl.\n    checkOneTerm(a, \"vilnis\", \"viln\"); // nom. sing.\n    checkOneTerm(a, \"viļņu\",  \"viln\"); // gen. pl.\n    checkOneTerm(a, \"lelle\", \"lell\"); // nom. sing.\n    checkOneTerm(a, \"leļļu\", \"lell\"); // gen. pl.\n    checkOneTerm(a, \"pinne\", \"pinn\"); // nom. sing.\n    checkOneTerm(a, \"piņņu\", \"pinn\"); // gen. pl.\n    checkOneTerm(a, \"rīkste\", \"rīkst\"); // nom. sing.\n    checkOneTerm(a, \"rīkšu\",  \"rīkst\"); // gen. pl.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testPalatalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testPalatalization().mjava","sourceNew":"  /**\n   * Note: we intentionally don't handle the ambiguous\n   * (s,t) -&gt; š and (d,z) -&gt; ž\n   */\n  public void testPalatalization() throws IOException {\n    checkOneTerm(a, \"krāsns\", \"krāsn\"); // nom. sing.\n    checkOneTerm(a, \"krāšņu\", \"krāsn\"); // gen. pl.\n    checkOneTerm(a, \"zvaigzne\", \"zvaigzn\"); // nom. sing.\n    checkOneTerm(a, \"zvaigžņu\", \"zvaigzn\"); // gen. pl.\n    checkOneTerm(a, \"kāpslis\", \"kāpsl\"); // nom. sing.\n    checkOneTerm(a, \"kāpšļu\",  \"kāpsl\"); // gen. pl.\n    checkOneTerm(a, \"zizlis\", \"zizl\"); // nom. sing.\n    checkOneTerm(a, \"zižļu\",  \"zizl\"); // gen. pl.\n    checkOneTerm(a, \"vilnis\", \"viln\"); // nom. sing.\n    checkOneTerm(a, \"viļņu\",  \"viln\"); // gen. pl.\n    checkOneTerm(a, \"lelle\", \"lell\"); // nom. sing.\n    checkOneTerm(a, \"leļļu\", \"lell\"); // gen. pl.\n    checkOneTerm(a, \"pinne\", \"pinn\"); // nom. sing.\n    checkOneTerm(a, \"piņņu\", \"pinn\"); // gen. pl.\n    checkOneTerm(a, \"rīkste\", \"rīkst\"); // nom. sing.\n    checkOneTerm(a, \"rīkšu\",  \"rīkst\"); // gen. pl.\n  }\n\n","sourceOld":"  /**\n   * Note: we intentionally don't handle the ambiguous\n   * (s,t) -> š and (d,z) -> ž\n   */\n  public void testPalatalization() throws IOException {\n    checkOneTerm(a, \"krāsns\", \"krāsn\"); // nom. sing.\n    checkOneTerm(a, \"krāšņu\", \"krāsn\"); // gen. pl.\n    checkOneTerm(a, \"zvaigzne\", \"zvaigzn\"); // nom. sing.\n    checkOneTerm(a, \"zvaigžņu\", \"zvaigzn\"); // gen. pl.\n    checkOneTerm(a, \"kāpslis\", \"kāpsl\"); // nom. sing.\n    checkOneTerm(a, \"kāpšļu\",  \"kāpsl\"); // gen. pl.\n    checkOneTerm(a, \"zizlis\", \"zizl\"); // nom. sing.\n    checkOneTerm(a, \"zižļu\",  \"zizl\"); // gen. pl.\n    checkOneTerm(a, \"vilnis\", \"viln\"); // nom. sing.\n    checkOneTerm(a, \"viļņu\",  \"viln\"); // gen. pl.\n    checkOneTerm(a, \"lelle\", \"lell\"); // nom. sing.\n    checkOneTerm(a, \"leļļu\", \"lell\"); // gen. pl.\n    checkOneTerm(a, \"pinne\", \"pinn\"); // nom. sing.\n    checkOneTerm(a, \"piņņu\", \"pinn\"); // gen. pl.\n    checkOneTerm(a, \"rīkste\", \"rīkst\"); // nom. sing.\n    checkOneTerm(a, \"rīkšu\",  \"rīkst\"); // gen. pl.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}