{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n      DoubleValues inner = in.getValues(readerContext, scores);\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2d542ab7559ca157c6e4b57408dd97ed5a3d6db2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n      DoubleValues inner = in.getValues(readerContext, scores);\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n      DoubleValues inner = in.getValues(readerContext, scores);\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n\n      IndexSearcher searcher = (IndexSearcher) context.get(\"searcher\");\n      DoubleValues inner;\n      if (searcher != null)\n        inner = in.rewrite(searcher).getValues(readerContext, scores);\n      else\n        inner = in.getValues(readerContext, scores);\n\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n      DoubleValues inner = in.getValues(readerContext, scores);\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d542ab7559ca157c6e4b57408dd97ed5a3d6db2","date":1553702905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorable scorer = (Scorable) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n\n      IndexSearcher searcher = (IndexSearcher) context.get(\"searcher\");\n      DoubleValues inner;\n      if (searcher != null)\n        inner = in.rewrite(searcher).getValues(readerContext, scores);\n      else\n        inner = in.getValues(readerContext, scores);\n\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorer scorer = (Scorer) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n\n      IndexSearcher searcher = (IndexSearcher) context.get(\"searcher\");\n      DoubleValues inner;\n      if (searcher != null)\n        inner = in.rewrite(searcher).getValues(readerContext, scores);\n      else\n        inner = in.getValues(readerContext, scores);\n\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","bugFix":["32b9119890a8e82252b6cc341ac491d18fa1e49b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.FromDoubleValuesSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n      Scorable scorer = (Scorable) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n\n      IndexSearcher searcher = (IndexSearcher) context.get(\"searcher\");\n      DoubleValues inner;\n      if (searcher != null)\n        inner = in.rewrite(searcher).getValues(readerContext, scores);\n      else\n        inner = in.getValues(readerContext, scores);\n\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      Scorable scorer = (Scorable) context.get(\"scorer\");\n      DoubleValues scores = scorer == null ? null : DoubleValuesSource.fromScorer(scorer);\n\n      IndexSearcher searcher = (IndexSearcher) context.get(\"searcher\");\n      DoubleValues inner;\n      if (searcher != null)\n        inner = in.rewrite(searcher).getValues(readerContext, scores);\n      else\n        inner = in.getValues(readerContext, scores);\n\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) throws IOException {\n          return in.toString();\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return (float) inner.doubleValue();\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          if (inner.advanceExact(doc) == false)\n            return 0;\n          return inner.doubleValue();\n        }\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return inner.advanceExact(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["2d542ab7559ca157c6e4b57408dd97ed5a3d6db2"],"2d542ab7559ca157c6e4b57408dd97ed5a3d6db2":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d542ab7559ca157c6e4b57408dd97ed5a3d6db2":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a38488a55cc52553c9792da5044dd31b15128cd8":["2d542ab7559ca157c6e4b57408dd97ed5a3d6db2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a38488a55cc52553c9792da5044dd31b15128cd8"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}