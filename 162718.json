{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = INTERNAL_JAR_PATTERN.matcher(dependency);\n      if (matcher.matches()) {\n        // Pattern.compile(\".*(lucene|solr)([^/]*?)-(?:\\\\d\\\\.)+\\\\d(?:-SNAPSHOT)?\\\\.jar)\")\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25d54572ea9273dffb6e6f670b9ecd12bcc5e478","c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b7c54f258655edeed72e255b47d3e15d9ffe534","date":1391018604,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      // Local:   lucene/build/analysis/common/lucene-analyzers-common-5.0-SNAPSHOT.jar\n      // Jenkins: lucene/build/analysis/common/lucene-analyzers-common-5.0-2013-10-31_18-52-24.jar\n      // Also support any custom version, which won't necessarily conform to any predefined pattern.\n      Pattern internalJarPattern = Pattern.compile(\".*(lucene|solr)([^/]*?)-\"\n                                 + Pattern.quote(getProject().getProperty(\"version\")) + \"\\\\.jar\");\n\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // Pattern.compile(\".*(lucene|solr)([^/]*?)-(?:\\\\d\\\\.)+\\\\d(?:-SNAPSHOT)?\\\\.jar)\")\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = INTERNAL_JAR_PATTERN.matcher(dependency);\n      if (matcher.matches()) {\n        // Pattern.compile(\".*(lucene|solr)([^/]*?)-(?:\\\\d\\\\.)+\\\\d(?:-SNAPSHOT)?\\\\.jar)\")\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":null,"bugIntro":["25d54572ea9273dffb6e6f670b9ecd12bcc5e478"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d54572ea9273dffb6e6f670b9ecd12bcc5e478","date":1391023212,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      // Local:   lucene/build/analysis/common/lucene-analyzers-common-5.0-SNAPSHOT.jar\n      // Jenkins: lucene/build/analysis/common/lucene-analyzers-common-5.0-2013-10-31_18-52-24.jar\n      // Also support any custom version, which won't necessarily conform to any predefined pattern.\n      Pattern internalJarPattern = Pattern.compile(\".*(lucene|solr)([^/]*?)-\"\n                                 + Pattern.quote(getProject().getProperty(\"version\")) + \"\\\\.jar\");\n\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // Pattern.compile(\".*(lucene|solr)([^/]*?)-(?:\\\\d\\\\.)+\\\\d(?:-SNAPSHOT)?\\\\.jar)\")\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c","6b7c54f258655edeed72e255b47d3e15d9ffe534"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec","date":1396503127,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"bugIntro":["47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58","date":1468426355,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replaceAll(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":["c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replaceAll(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replace(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#dependencyToArtifactId(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts either a compile output directory or an internal jar\n   * dependency, taken from an Ant (test.)classpath, into an artifactId\n   */\n  private String dependencyToArtifactId(String newPropertyKey, String dependency) {\n    StringBuilder artifactId = new StringBuilder();\n    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);\n    if (matcher.matches()) {\n      // Pattern.compile(\"(lucene|solr)/build/(.*)/classes/java\");\n      String artifact = matcher.group(2);\n      artifact = artifact.replace('/', '-');\n      artifact = artifact.replaceAll(\"(?<!solr-)analysis-\", \"analyzers-\");\n      if (\"lucene\".equals(matcher.group(1))) {\n        artifactId.append(\"lucene-\");\n      }\n      artifactId.append(artifact);\n    } else {\n      matcher = internalJarPattern.matcher(dependency);\n      if (matcher.matches()) {\n        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\\.jar/,\n        // where <version> is the value of the Ant \"version\" property\n        artifactId.append(matcher.group(1));\n        artifactId.append(matcher.group(2));\n      } else {\n        throw new BuildException\n            (\"Malformed module dependency from '\" + newPropertyKey + \"': '\" + dependency + \"'\");\n      }\n    }\n    return artifactId.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["25d54572ea9273dffb6e6f670b9ecd12bcc5e478","c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec"],"25d54572ea9273dffb6e6f670b9ecd12bcc5e478":["6b7c54f258655edeed72e255b47d3e15d9ffe534"],"47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58":["c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec":["25d54572ea9273dffb6e6f670b9ecd12bcc5e478"],"6b7c54f258655edeed72e255b47d3e15d9ffe534":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec","47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"25d54572ea9273dffb6e6f670b9ecd12bcc5e478":["5eb2511ababf862ea11e10761c70ee560cd84510","c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec"],"47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58":["e025cf1c07150c8db28879d785db17eb3a66ca9f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["6b7c54f258655edeed72e255b47d3e15d9ffe534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"c76eb3d36b1e3e50d5bc3bf44f8eb68e80506fec":["5eb2511ababf862ea11e10761c70ee560cd84510","47f03d92e1aabf33d970e7f8d6d1b9a84fb88b58","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6b7c54f258655edeed72e255b47d3e15d9ffe534":["25d54572ea9273dffb6e6f670b9ecd12bcc5e478"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}