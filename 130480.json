{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":6,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLucene70DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}