{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","bugFix":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, scoreMode.needsScores() ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, scoreMode.needsScores() ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.wasBuiltFor(topContext) == false) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["598b5d23aa7c9732bf473c21a9cd309c44599394","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}