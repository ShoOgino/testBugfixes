{"path":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#createVarianceTable(SegmentInfos,int,int).mjava","commits":[{"id":"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584","date":1254399783,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#createVarianceTable(SegmentInfos,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private double[][] createVarianceTable(SegmentInfos infos, int last, int maxNumSegments) throws IOException {\n    int maxMergeSegments = last - maxNumSegments + 1;\n    double[][] variance = new double[last][maxMergeSegments];\n    \n    // compute the optimal segment size\n    long optSize = 0;\n    long[] sizeArr = new long[last];\n    for(int i = 0; i < sizeArr.length; i++) {\n      sizeArr[i] = size(infos.info(i));\n      optSize += sizeArr[i];\n    }\n    optSize = (optSize / maxNumSegments);\n    \n    for(int i = 0; i < last; i++) {\n      long size = 0;\n      for(int j = 0; j < maxMergeSegments; j++) {\n        if((i + j) < last) {\n          size += sizeArr[i + j];\n          double residual = ((double)size/(double)optSize) - 1.0d;\n          variance[i][j] = residual * residual;\n        } else {\n          variance[i][j] = Double.NaN;\n        }\n      }\n    }\n    return variance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#createVarianceTable(SegmentInfos,int,int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#createVarianceTable(SegmentInfos,int,int).mjava","sourceNew":"  private double[][] createVarianceTable(SegmentInfos infos, int last, int maxNumSegments) throws IOException {\n    int maxMergeSegments = last - maxNumSegments + 1;\n    double[][] variance = new double[last][maxMergeSegments];\n    \n    // compute the optimal segment size\n    long optSize = 0;\n    long[] sizeArr = new long[last];\n    for(int i = 0; i < sizeArr.length; i++) {\n      sizeArr[i] = size(infos.info(i));\n      optSize += sizeArr[i];\n    }\n    optSize = (optSize / maxNumSegments);\n    \n    for(int i = 0; i < last; i++) {\n      long size = 0;\n      for(int j = 0; j < maxMergeSegments; j++) {\n        if((i + j) < last) {\n          size += sizeArr[i + j];\n          double residual = ((double)size/(double)optSize) - 1.0d;\n          variance[i][j] = residual * residual;\n        } else {\n          variance[i][j] = Double.NaN;\n        }\n      }\n    }\n    return variance;\n  }\n\n","sourceOld":"  private double[][] createVarianceTable(SegmentInfos infos, int last, int maxNumSegments) throws IOException {\n    int maxMergeSegments = last - maxNumSegments + 1;\n    double[][] variance = new double[last][maxMergeSegments];\n    \n    // compute the optimal segment size\n    long optSize = 0;\n    long[] sizeArr = new long[last];\n    for(int i = 0; i < sizeArr.length; i++) {\n      sizeArr[i] = size(infos.info(i));\n      optSize += sizeArr[i];\n    }\n    optSize = (optSize / maxNumSegments);\n    \n    for(int i = 0; i < last; i++) {\n      long size = 0;\n      for(int j = 0; j < maxMergeSegments; j++) {\n        if((i + j) < last) {\n          size += sizeArr[i + j];\n          double residual = ((double)size/(double)optSize) - 1.0d;\n          variance[i][j] = residual * residual;\n        } else {\n          variance[i][j] = Double.NaN;\n        }\n      }\n    }\n    return variance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"]},"commit2Childs":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}