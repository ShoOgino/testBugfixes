{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","pathOld":"/dev/null","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","pathOld":"/dev/null","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","pathOld":"/dev/null","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed7235f58ecdcb4212c16c44a402263059aa742","date":1541140729,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle],boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#cureLocalIntersections(Node,List[Triangle]).mjava","sourceNew":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation, final boolean mortonOptimized) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // compute edges from polygon\n        boolean abFromPolygon = (a.next == node) ? a.isNextEdgeFromPolygon : isEdgeFromPolygon(a, node, mortonOptimized);\n        boolean bcFromPolygon = (node.next == b) ? node.isNextEdgeFromPolygon : isEdgeFromPolygon(node, b, mortonOptimized);\n        boolean caFromPolygon = (b.next == a) ? b.isNextEdgeFromPolygon : isEdgeFromPolygon(a, b, mortonOptimized);\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon,  b, caFromPolygon));\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, abFromPolygon, node, bcFromPolygon, b, caFromPolygon));\n\n        // remove two nodes involved\n        removeNode(node, caFromPolygon);\n        removeNode(node.next, caFromPolygon);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","sourceOld":"  /** Iterate through all polygon nodes and remove small local self-intersections **/\n  private static final Node cureLocalIntersections(Node startNode, final List<Triangle> tessellation) {\n    Node node = startNode;\n    Node nextNode;\n    do {\n      nextNode = node.next;\n      Node a = node.previous;\n      Node b = nextNode.next;\n\n      // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])\n      if (isVertexEquals(a, b) == false\n          && isIntersectingPolygon(a, a.getX(), a.getY(), b.getX(), b.getY()) == false\n          && linesIntersect(a.getX(), a.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY(), b.getX(), b.getY())\n          && isLocallyInside(a, b) && isLocallyInside(b, a)) {\n        // Return the triangulated vertices to the tessellation\n        tessellation.add(new Triangle(a, node, b));\n\n        // remove two nodes involved\n        removeNode(node);\n        removeNode(node.next);\n        node = startNode = b;\n      }\n      node = node.next;\n    } while (node != startNode);\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ed90f8ba7e7be13d155f954862178b23a324125":["0ed7235f58ecdcb4212c16c44a402263059aa742"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ed90f8ba7e7be13d155f954862178b23a324125"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0ed7235f58ecdcb4212c16c44a402263059aa742","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5ed90f8ba7e7be13d155f954862178b23a324125":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ed7235f58ecdcb4212c16c44a402263059aa742":["5ed90f8ba7e7be13d155f954862178b23a324125"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}