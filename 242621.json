{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.fastGet(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.fastSet(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.fastGet(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.fastSet(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = Float.intBitsToFloat((int)vals.get(contextDoc));\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = Float.intBitsToFloat((int)vals.get(contextDoc));\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = Float.intBitsToFloat((int)vals.get(contextDoc));\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#collapse(int,int,int).mjava","sourceNew":null,"sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float val = Float.intBitsToFloat((int)vals.get(contextDoc));\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"56572ec06f1407c066d6b7399413178b33176cd8":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"]},"commit2Childs":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","56572ec06f1407c066d6b7399413178b33176cd8"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}