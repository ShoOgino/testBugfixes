{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","date":1412358952,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName, context);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName, context);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundReader#Lucene40CompoundReader(Directory,String,IOContext,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene40CompoundReader(Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= Lucene40CompoundWriter.VERSION_CHECKSUM) {\n          CodecUtil.checkHeader(handle, Lucene40CompoundWriter.DATA_CODEC, version, version);\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof Lucene40CompoundReader) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new Lucene40CompoundWriter(directory, fileName, context);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["989d940c4bf402188f4f0ae13736836885227383"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}