{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#assertNumberOfReplicas(int,int,int,boolean,boolean).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#assertNumberOfReplicas(int,int,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection assertNumberOfReplicas(int numNrtReplicas, int numTlogReplicas, int numPullReplicas, boolean updateCollection, boolean activeOnly) throws KeeperException, InterruptedException {\n    if (updateCollection) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collectionName);\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    assertNotNull(docCollection);\n    assertEquals(\"Unexpected number of writer replicas: \" + docCollection, numNrtReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of pull replicas: \" + docCollection, numPullReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of active replicas: \" + docCollection, numTlogReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    return docCollection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#assertNumberOfReplicas(int,int,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection assertNumberOfReplicas(int numNrtReplicas, int numTlogReplicas, int numPullReplicas, boolean updateCollection, boolean activeOnly) throws KeeperException, InterruptedException {\n    if (updateCollection) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collectionName);\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    assertNotNull(docCollection);\n    assertEquals(\"Unexpected number of writer replicas: \" + docCollection, numNrtReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of pull replicas: \" + docCollection, numPullReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of active replicas: \" + docCollection, numTlogReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    return docCollection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#assertNumberOfReplicas(int,int,int,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#assertNumberOfReplicas(int,int,int,boolean,boolean).mjava","sourceNew":"  private DocCollection assertNumberOfReplicas(int numNrtReplicas, int numTlogReplicas, int numPullReplicas, boolean updateCollection, boolean activeOnly) throws KeeperException, InterruptedException {\n    if (updateCollection) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collectionName);\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    assertNotNull(docCollection);\n    assertEquals(\"Unexpected number of writer replicas: \" + docCollection, numNrtReplicas,\n        docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of pull replicas: \" + docCollection, numPullReplicas,\n        docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of active replicas: \" + docCollection, numTlogReplicas,\n        docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    return docCollection;\n  }\n\n","sourceOld":"  private DocCollection assertNumberOfReplicas(int numNrtReplicas, int numTlogReplicas, int numPullReplicas, boolean updateCollection, boolean activeOnly) throws KeeperException, InterruptedException {\n    if (updateCollection) {\n      cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collectionName);\n    }\n    DocCollection docCollection = getCollectionState(collectionName);\n    assertNotNull(docCollection);\n    assertEquals(\"Unexpected number of writer replicas: \" + docCollection, numNrtReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of pull replicas: \" + docCollection, numPullReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    assertEquals(\"Unexpected number of active replicas: \" + docCollection, numTlogReplicas, \n        docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).stream().filter(r->!activeOnly || r.getState() == Replica.State.ACTIVE).count());\n    return docCollection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}