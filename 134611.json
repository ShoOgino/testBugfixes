{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#mySetup().mjava","commits":[{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#mySetup().mjava","pathOld":"/dev/null","sourceNew":"  public void mySetup() throws IOException {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    this.ctx = new SpatialContext(false, null, new RectangleImpl(0, 256, -128, 128, null));\n    //A fairly shallow grid, and default 2.5% distErrPct\n    this.grid = new QuadPrefixTree(ctx, randomIntBetween(1, 8));\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    System.out.println(\"Strategy: \"+strategy.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3702440de9629167be64098f307cea70809df488","date":1365439741,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#mySetup(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#mySetup().mjava","sourceNew":"  public void mySetup(int maxLevels) throws IOException {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    this.ctx = new SpatialContext(false, null, new RectangleImpl(0, 256, -128, 128, null));\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    System.out.println(\"Strategy: \"+strategy.toString());\n  }\n\n","sourceOld":"  public void mySetup() throws IOException {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    this.ctx = new SpatialContext(false, null, new RectangleImpl(0, 256, -128, 128, null));\n    //A fairly shallow grid, and default 2.5% distErrPct\n    this.grid = new QuadPrefixTree(ctx, randomIntBetween(1, 8));\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    System.out.println(\"Strategy: \"+strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3702440de9629167be64098f307cea70809df488":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3702440de9629167be64098f307cea70809df488"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"3702440de9629167be64098f307cea70809df488":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["3702440de9629167be64098f307cea70809df488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}