{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","commits":[{"id":"bb6a4d0a88fea57ec3a4044266f6ed46659457a5","date":1490362041,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeAdded\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"timeout\\\" : \\\"1h\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aca0f701e3e993fe76cff8ec1758a74d8dd3318","date":1491221274,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeAdded\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"timeout\\\" : \\\"1h\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeAdded\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"timeout\\\" : \\\"1h\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af23aec47e40b09ca5924f5df074422b8e5e7b04","date":1491812898,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true'}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeAdded\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_added_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"#EACH\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"timeout\\\" : \\\"1h\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a648360be52f2b0cc9971af641fe1e68778dab","date":1493361164,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true'}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f71b6d873161f41cef30256f162ac6fa8f88858","date":1494576240,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '#EACH'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c77a387d47ede09f8574d5d4abe19efa4ae53ad","date":1496757723,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e302b4ecab1242453fbd12784e424ad50c66398","date":1501517060,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>)response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testSuspendTrigger().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSuspendTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String suspendEachCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String resumeEachCommand = \"{\\n\" +\n        \"\\t\\\"resume-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"\" + Policy.EACH + \"\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    // these should be no-ops because there are no triggers, and it should succeed\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendEachCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeEachCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[]\");\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String suspendTriggerCommand = \"{\\n\" +\n        \"\\t\\\"suspend-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertEquals(response.get(\"changed\").toString(), \"[node_lost_trigger]\");\n\n    Stat stat = new Stat();\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    assertTrue(triggers.containsKey(\"node_added_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    Map<String, Object> nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    List<String> changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"false\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'node_added_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_added_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : '\" + Policy.EACH + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"true\", nodeLostTrigger.get(\"enabled\").toString());\n    nodeAddedTrigger = (Map<String, Object>) triggers.get(\"node_added_trigger\");\n    assertEquals(4, nodeAddedTrigger.size());\n    assertEquals(\"true\", nodeAddedTrigger.get(\"enabled\").toString());\n\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'timeout' : '1h'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    changed = (List<String>) response.get(\"changed\");\n    assertEquals(1, changed.size());\n    assertTrue(changed.contains(\"node_lost_trigger\"));\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, countNotImplicitTriggers(triggers));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(5, nodeLostTrigger.size());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    assertTrue(nodeLostTrigger.containsKey(\"resumeAt\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e302b4ecab1242453fbd12784e424ad50c66398"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"af23aec47e40b09ca5924f5df074422b8e5e7b04":["4aca0f701e3e993fe76cff8ec1758a74d8dd3318"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["560c18d71dad43d675158783c3840f8c80d6d39c","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["560c18d71dad43d675158783c3840f8c80d6d39c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"4aca0f701e3e993fe76cff8ec1758a74d8dd3318":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["af23aec47e40b09ca5924f5df074422b8e5e7b04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"9e302b4ecab1242453fbd12784e424ad50c66398":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["9e302b4ecab1242453fbd12784e424ad50c66398"],"af23aec47e40b09ca5924f5df074422b8e5e7b04":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["89948af0461fead48f44ba8fb7866f107ce83f22"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"4aca0f701e3e993fe76cff8ec1758a74d8dd3318":["af23aec47e40b09ca5924f5df074422b8e5e7b04"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","bb6a4d0a88fea57ec3a4044266f6ed46659457a5","560c18d71dad43d675158783c3840f8c80d6d39c"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["4aca0f701e3e993fe76cff8ec1758a74d8dd3318"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"9e302b4ecab1242453fbd12784e424ad50c66398":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}