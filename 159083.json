{"path":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"43aba035b2a37ad571a7b19496d3108f44e0b97d","date":1329961988,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        factory.setLogLevel(category, level);\n      }\n    }\n\n    rsp.add(\"framework\", factory.getName());\n    rsp.add(\"levels\", factory.getAllLevels());\n\n    List<LoggerWrapper> loggers = new ArrayList<LogLevelHandler.LoggerWrapper>(factory.getLoggers());\n    Collections.sort(loggers);\n\n    List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n    for(LoggerWrapper wrap:loggers) {\n      info.add(wrap.getInfo());\n    }\n    rsp.add(\"loggers\", info);\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        factory.setLogLevel(category, level);\n      }\n    }\n\n    rsp.add(\"framework\", factory.getName());\n    rsp.add(\"levels\", factory.getAllLevels());\n\n    List<LoggerWrapper> loggers = new ArrayList<LogLevelHandler.LoggerWrapper>(factory.getLoggers());\n    Collections.sort(loggers);\n\n    List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n    for(LoggerWrapper wrap:loggers) {\n      info.add(wrap.getInfo());\n    }\n    rsp.add(\"loggers\", info);\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54d9cd7a1fb3deb9fd44d6257a434e3b86289877","date":1334333912,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(factory==null) {\n      rsp.add(\"error\", \"Unsupported Logging Framework: \"+slf4jImpl);\n      return;\n    }\n    \n    SolrParams params = req.getParams();\n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        factory.setLogLevel(category, level);\n      }\n    }\n\n    rsp.add(\"framework\", factory.getName());\n    rsp.add(\"slfj4\", slf4jImpl);\n    rsp.add(\"levels\", factory.getAllLevels());\n\n    List<LoggerWrapper> loggers = new ArrayList<LogLevelHandler.LoggerWrapper>(factory.getLoggers());\n    Collections.sort(loggers);\n\n    List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n    for(LoggerWrapper wrap:loggers) {\n      info.add(wrap.getInfo());\n    }\n    rsp.add(\"loggers\", info);\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        factory.setLogLevel(category, level);\n      }\n    }\n\n    rsp.add(\"framework\", factory.getName());\n    rsp.add(\"levels\", factory.getAllLevels());\n\n    List<LoggerWrapper> loggers = new ArrayList<LogLevelHandler.LoggerWrapper>(factory.getLoggers());\n    Collections.sort(loggers);\n\n    List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n    for(LoggerWrapper wrap:loggers) {\n      info.add(wrap.getInfo());\n    }\n    rsp.add(\"loggers\", info);\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(factory==null) {\n      rsp.add(\"error\", \"Unsupported Logging Framework: \"+slf4jImpl);\n      return;\n    }\n    \n    SolrParams params = req.getParams();\n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        factory.setLogLevel(category, level);\n      }\n    }\n\n    rsp.add(\"framework\", factory.getName());\n    rsp.add(\"slfj4\", slf4jImpl);\n    rsp.add(\"levels\", factory.getAllLevels());\n\n    List<LoggerWrapper> loggers = new ArrayList<LogLevelHandler.LoggerWrapper>(factory.getLoggers());\n    Collections.sort(loggers);\n\n    List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n    for(LoggerWrapper wrap:loggers) {\n      info.add(wrap.getInfo());\n    }\n    rsp.add(\"loggers\", info);\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43aba035b2a37ad571a7b19496d3108f44e0b97d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["54d9cd7a1fb3deb9fd44d6257a434e3b86289877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"54d9cd7a1fb3deb9fd44d6257a434e3b86289877":["43aba035b2a37ad571a7b19496d3108f44e0b97d"]},"commit2Childs":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","54d9cd7a1fb3deb9fd44d6257a434e3b86289877"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43aba035b2a37ad571a7b19496d3108f44e0b97d","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54d9cd7a1fb3deb9fd44d6257a434e3b86289877":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}