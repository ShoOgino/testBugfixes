{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","commits":[{"id":"45f06bdc846cdc9b2546a27a8a1492d613e87879","date":1097422035,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c91d0d5a0302dda9a167c2abec3343b3944a3a81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}