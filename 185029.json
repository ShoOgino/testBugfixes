{"path":"src/java/org/apache/lucene/util/NumericUtils#addRange(Object,int,long,long,int).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/NumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53b6c192847de8643a5da505cc433cbf8476a175"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}