{"path":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}