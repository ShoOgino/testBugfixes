{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   IndexInput expected,\n                                   IndexInput test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg,\n                                   IndexInput expected,\n                                   IndexInput test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput).mjava","sourceNew":null,"sourceOld":"    private void assertSameStreams(String msg,\n                                   IndexInput expected,\n                                   IndexInput test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}