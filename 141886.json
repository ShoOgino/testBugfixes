{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","commits":[{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all AtomicReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (AtomicReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all AtomicReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (AtomicReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","sourceNew":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all AtomicReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (LeafReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","sourceOld":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all AtomicReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (AtomicReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(IndexReader,boolean).mjava","sourceNew":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all LeafReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (LeafReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","sourceOld":"  /**\n   * Given an IndexReader, asserts that there is at least one AtomcReader leaf,\n   * and that all AtomicReader leaves are SegmentReader's that have a compound \n   * file status that matches the expected input.\n   */\n  private static void assertCompoundSegments(IndexReader reader, \n                                             boolean compound) {\n\n    assertNotNull(\"Null leaves\", reader.leaves());\n    assertTrue(\"no leaves\", 0 < reader.leaves().size());\n\n    for (LeafReaderContext atomic : reader.leaves()) {\n      assertTrue(\"not a segment reader: \" + atomic.reader().toString(), \n                 atomic.reader() instanceof SegmentReader);\n      \n      assertEquals(\"Compound status incorrect for: \" + \n                   atomic.reader().toString(),\n                   compound,\n                   ((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}