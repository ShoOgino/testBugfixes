{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  public void assertQueryEquals(String query, Analyzer a, String result) \n  throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer();\n    QueryParser qp = new QueryParser(\"field\", a);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      System.err.println(\"Query /\" + query + \"/ yielded /\" + s \n                         + \"/, expecting /\" + result + \"/\");\n      assert(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d3dec2223c4ab37942f127cae43fbf1cd28731","date":1011232809,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","sourceNew":"  public void assertQueryEquals(String query, Analyzer a, String result) \n  throws Exception {\n    Query q = getQuery(query, a);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s \n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertQueryEquals(String query, Analyzer a, String result) \n  throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer();\n    QueryParser qp = new QueryParser(\"field\", a);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      System.err.println(\"Query /\" + query + \"/ yielded /\" + s \n                         + \"/, expecting /\" + result + \"/\");\n      assert(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","sourceNew":"    public void assertQueryEquals(String query, Analyzer a, String result)\n\tthrows Exception {\n\tQuery q = getQuery(query, a);\n\tString s = q.toString(\"field\");\n\tif (!s.equals(result)) {\n\t    fail(\"Query /\" + query + \"/ yielded /\" + s\n\t\t+ \"/, expecting /\" + result + \"/\");\n\t}\n    }\n\n","sourceOld":"  public void assertQueryEquals(String query, Analyzer a, String result) \n  throws Exception {\n    Query q = getQuery(query, a);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s \n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","sourceNew":"  public void assertQueryEquals(String query, Analyzer a, String result)\n    throws Exception {\n    Query q = getQuery(query, a);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"    public void assertQueryEquals(String query, Analyzer a, String result)\n\tthrows Exception {\n\tQuery q = getQuery(query, a);\n\tString s = q.toString(\"field\");\n\tif (!s.equals(result)) {\n\t    fail(\"Query /\" + query + \"/ yielded /\" + s\n\t\t+ \"/, expecting /\" + result + \"/\");\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertQueryEquals(String,Analyzer,String).mjava","sourceNew":"  public void assertQueryEquals(String query, Analyzer a, String result)\n    throws Exception {\n    Query q = getQuery(query, a);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertQueryEquals(String query, Analyzer a, String result)\n    throws Exception {\n    Query q = getQuery(query, a);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}