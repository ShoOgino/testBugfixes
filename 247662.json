{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + \".\" + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, boolean simple, boolean compact,\n                             BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (simple && (o instanceof Map)) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          consumer.accept(name + \".\" + entry.getKey().toString(), entry.getValue());\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"value\", gauge.getValue());\n      consumer.accept(name, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + \".\" + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             String separator, BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + separator + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + \".\" + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertGauge(String,Gauge,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             String separator, BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + separator + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a {@link Gauge}.\n   * @param name metric name\n   * @param gauge gauge instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param compact if true then only return {@link Gauge#getValue()}. If false\n   *                then return a map with a \"value\" field.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,\n                             BiConsumer<String, Object> consumer) {\n    if (compact || simple) {\n      Object o = gauge.getValue();\n      if (o instanceof Map) {\n        if (simple) {\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              consumer.accept(name + \".\" + prop, entry.getValue());\n            }\n          }\n        } else {\n          Map<String, Object> val = new HashMap<>();\n          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n            String prop = entry.getKey().toString();\n            if (propertyFilter.accept(prop)) {\n              val.put(prop, entry.getValue());\n            }\n          }\n          if (!val.isEmpty()) {\n            consumer.accept(name, val);\n          }\n        }\n      } else {\n        consumer.accept(name, o);\n      }\n    } else {\n      Object o = gauge.getValue();\n      Map<String, Object> response = new LinkedHashMap<>();\n      if (o instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {\n          String prop = entry.getKey().toString();\n          if (propertyFilter.accept(prop)) {\n            response.put(prop, entry.getValue());\n          }\n        }\n        if (!response.isEmpty()) {\n          consumer.accept(name, Collections.singletonMap(\"value\", response));\n        }\n      } else {\n        if (propertyFilter.accept(\"value\")) {\n          response.put(\"value\", o);\n          consumer.accept(name, response);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}