{"path":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert termStates[pos].hasOnlyRealTerms() == false || reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermStates[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermStates[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","sourceOld":"  @Override\n  public final Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final B builder = getTopLevelBuilder();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort();\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(builder, term, termStates[pos].docFreq(), boost[pos], termStates[pos]);\n      }\n    }\n    return build(builder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["2dfdf766e55e943d942055d7de53c7ad6bc45283","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","a6e9f769521480a623f897c0d59089b919fa4239"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3e8715d826e588419327562287d5d6a8040d63d6"],"a6e9f769521480a623f897c0d59089b919fa4239":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["af2638813028b254a88b418ebeafb541afb49653","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["af2638813028b254a88b418ebeafb541afb49653"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["af2638813028b254a88b418ebeafb541afb49653","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["b94236357aaa22b76c10629851fe4e376e0cea82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a6e9f769521480a623f897c0d59089b919fa4239"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}