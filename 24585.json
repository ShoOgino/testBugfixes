{"path":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","commits":[{"id":"b4d01dd8bb594fcd007a358009375967f9333d0a","date":1425496373,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk));\n    byte[] samplefile = readFile(\"samplefile.bin\");\n    //there are no keys\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys\", true);\n\n    createNode(zk, \"pubk1.der\");\n    createNode(zk, \"pubk2.der\");\n\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk);\n\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n\n\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk));\n    byte[] samplefile = readFile(\"samplefile.bin\");\n    //there are no keys\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys\", true);\n\n    createNode(zk, \"pubk1.der\");\n    createNode(zk, \"pubk2.der\");\n\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk);\n\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n\n\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime?wt=json\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    LinkedHashMapWriter map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = map._getStr( \"error/msg\",null);\n    assertNotNull(map.toString(), s);\n    assertTrue(map.toString(), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(map.toString(), s);//No key matched signature for jar\n    assertTrue(map.toString(), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(TestBlobHandler.getAsString(map), s);//No key matched signature for jar\n    assertTrue(TestBlobHandler.getAsString(map), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedHashMapWriter map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = map._getStr( \"error/msg\",null);\n    assertNotNull(map.toString(), s);\n    assertTrue(map.toString(), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(map.toString(), s);//No key matched signature for jar\n    assertTrue(map.toString(), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    LinkedHashMapWriter map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = map._getStr( \"error/msg\",null);\n    assertNotNull(map.toString(), s);\n    assertTrue(map.toString(), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(map.toString(), s);//No key matched signature for jar\n    assertTrue(map.toString(), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCryptoKeys#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n    String pk1sig = \"G8LEW7uJ1is81Aqqfl3Sld3qDtOxPuVFeTLJHFJWecgDvUkmJNFXmf7nkHOVlXnDWahp1vqZf0W02VHXg37lBw==\";\n    String pk2sig = \"pCyBQycB/0YvLVZfKLDIIqG1tFwM/awqzkp2QNpO7R3ThTqmmrj11wEJFDRLkY79efuFuQPHt40EE7jrOKoj9jLNELsfEqvU3jw9sZKiDONY+rV9Bj9QPeW8Pgt+F9Y1\";\n    String wrongKeySig = \"xTk2hTipfpb+J5s4x3YZGOXkmHWtnJz05Vvd8RTm/Q1fbQVszR7vMk6dQ1URxX08fcg4HvxOo8g9bG2TSMOGjg==\";\n    String result = null;\n    CryptoKeys cryptoKeys = null;\n    SolrZkClient zk = getCommonCloudSolrClient().getZkStateReader().getZkClient();\n    cryptoKeys = new CryptoKeys(CloudUtil.getTrustedKeys(zk, \"exe\"));\n    ByteBuffer samplefile = ByteBuffer.wrap(readFile(\"cryptokeys/samplefile.bin\"));\n    //there are no keys yet created in ZK\n\n    result = cryptoKeys.verify( pk1sig,samplefile);\n    assertNull(result);\n\n    zk.makePath(\"/keys/exe\", true);\n    zk.create(\"/keys/exe/pubk1.der\", readFile(\"cryptokeys/pubk1.der\"), CreateMode.PERSISTENT, true);\n    zk.create(\"/keys/exe/pubk2.der\", readFile(\"cryptokeys/pubk2.der\"), CreateMode.PERSISTENT, true);\n    Map<String, byte[]> trustedKeys = CloudUtil.getTrustedKeys(zk, \"exe\");\n\n    cryptoKeys = new CryptoKeys(trustedKeys);\n    result = cryptoKeys.verify(pk2sig, samplefile);\n    assertEquals(\"pubk2.der\", result);\n\n\n    result = cryptoKeys.verify(pk1sig, samplefile);\n    assertEquals(\"pubk1.der\", result);\n\n    try {\n      result = cryptoKeys.verify(wrongKeySig,samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n    try {\n      result = cryptoKeys.verify( \"SGVsbG8gV29ybGQhCg==\", samplefile);\n      assertNull(result);\n    } catch (Exception e) {\n      //pass\n    }\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    ByteBuffer jar = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    String blobName = \"signedjar\";\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true }\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n\n\n    payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'signedjar' ,'version':1}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedHashMapWriter map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    String s = map._getStr( \"error/msg\",null);\n    assertNotNull(map.toString(), s);\n    assertTrue(map.toString(), s.contains(\"should be signed with one of the keys in ZK /keys/exe\"));\n\n    String wrongSig = \"QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'QKqHtd37QN02iMW9UEgvAO9g9qOOuG5vEBNkbUsN7noc2hhXKic/ABFIOYJA9PKw61mNX2EmNFXOcO3WClYdSw=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        wrongSig, 10);\n\n    map = TestSolrConfigHandler.getRespMap(\"/runtime\", client);\n    s = (String) Utils.getObjectByPath(map, false, Arrays.asList(\"error\", \"msg\"));\n    assertNotNull(map.toString(), s);//No key matched signature for jar\n    assertTrue(map.toString(), s.contains(\"No key matched signature for jar\"));\n\n    String rightSig = \"YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q==\";\n\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'YkTQgOtvcM/H/5EQdABGl3wjjrPhonAGlouIx59vppBy2cZEofX3qX1yZu5sPNRmJisNXEuhHN2149dxeUmk2Q=='}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n\n    rightSig = \"VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D\";\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'signedjar' ,'version':1, 'sig': 'VJPMTxDf8Km3IBj2B5HWkIOqeM/o+HHNobOYCNA3WjrEVfOMZbMMqS1Lo7uLUUp//RZwOGkOhrUhuPNY1z2CGEIKX2/m8VGH64L14d52oSvFiwhoTDDuuyjW1TFGu35D'}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"sig\"),\n        rightSig, 10);\n\n    map = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(map, MemClassLoader.class.getName(), asList(\"loader\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["0853c291617e0f9d0474b720bf609eb350e9225c"],"e98520789adb1d5ad05afb4956eca0944a929688":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a52341299179de5479672f7cf518bf4b173f34b3":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["e98520789adb1d5ad05afb4956eca0944a929688"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b693a83132c9e45afcd564fd65a25b60ed80388b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["b693a83132c9e45afcd564fd65a25b60ed80388b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"0853c291617e0f9d0474b720bf609eb350e9225c":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b4d01dd8bb594fcd007a358009375967f9333d0a"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}