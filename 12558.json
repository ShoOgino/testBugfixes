{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#hasCoreUrlPrefix(Object,String).mjava","commits":[{"id":"a2576170b353998ba9157b6d148ebfde21138316","date":1523488980,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#hasCoreUrlPrefix(Object,String).mjava","pathOld":"/dev/null","sourceNew":"    private boolean hasCoreUrlPrefix(Object o, String prefix) {\n      final String s;\n      if (o instanceof String) {\n        s = (String)o;\n      }\n      else if (o instanceof Replica) {\n        s = ((Replica)o).getCoreUrl();\n      } else {\n        return false;\n      }\n      if (prefix.equals(ShardParams.REPLICA_LOCAL)) {\n        if (null == localHostAddress) {\n          final ZkController zkController = this.request.getCore().getCoreContainer().getZkController();\n          localHostAddress = zkController != null ? zkController.getBaseUrl() : \"\";\n          if (localHostAddress.isEmpty()) {\n            log.warn(\"Couldn't determine current host address for sorting of local replicas\");\n          }\n        }\n        if (!localHostAddress.isEmpty()) {\n          if (s.startsWith(localHostAddress)) {\n            return true;\n          }\n        }\n      } else {\n        if (s.startsWith(prefix)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#hasCoreUrlPrefix(Object,String).mjava","pathOld":"/dev/null","sourceNew":"    private boolean hasCoreUrlPrefix(Object o, String prefix) {\n      final String s;\n      if (o instanceof String) {\n        s = (String)o;\n      }\n      else if (o instanceof Replica) {\n        s = ((Replica)o).getCoreUrl();\n      } else {\n        return false;\n      }\n      if (prefix.equals(ShardParams.REPLICA_LOCAL)) {\n        if (null == localHostAddress) {\n          final ZkController zkController = this.request.getCore().getCoreContainer().getZkController();\n          localHostAddress = zkController != null ? zkController.getBaseUrl() : \"\";\n          if (localHostAddress.isEmpty()) {\n            log.warn(\"Couldn't determine current host address for sorting of local replicas\");\n          }\n        }\n        if (!localHostAddress.isEmpty()) {\n          if (s.startsWith(localHostAddress)) {\n            return true;\n          }\n        }\n      } else {\n        if (s.startsWith(prefix)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#hasCoreUrlPrefix(Object,String).mjava","sourceNew":null,"sourceOld":"    private boolean hasCoreUrlPrefix(Object o, String prefix) {\n      final String s;\n      if (o instanceof String) {\n        s = (String)o;\n      }\n      else if (o instanceof Replica) {\n        s = ((Replica)o).getCoreUrl();\n      } else {\n        return false;\n      }\n      if (prefix.equals(ShardParams.REPLICA_LOCAL)) {\n        if (null == localHostAddress) {\n          final ZkController zkController = this.request.getCore().getCoreContainer().getZkController();\n          localHostAddress = zkController != null ? zkController.getBaseUrl() : \"\";\n          if (localHostAddress.isEmpty()) {\n            log.warn(\"Couldn't determine current host address for sorting of local replicas\");\n          }\n        }\n        if (!localHostAddress.isEmpty()) {\n          if (s.startsWith(localHostAddress)) {\n            return true;\n          }\n        }\n      } else {\n        if (s.startsWith(prefix)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2576170b353998ba9157b6d148ebfde21138316"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2576170b353998ba9157b6d148ebfde21138316":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","a2576170b353998ba9157b6d148ebfde21138316"],"a2576170b353998ba9157b6d148ebfde21138316":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}