{"path":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","commits":[{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Field f;\n    int scoreAndID = i + 1;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    customType.setOmitNorms(true);\n    \n    f = newField(ID_FIELD, id2String(scoreAndID), customType); // for debug purposes\n    d.add(f);\n\n    FieldType customType2 = new FieldType(TextField.TYPE_UNSTORED);\n    customType2.setOmitNorms(true);\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), customType2); // for regular search\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, customType); // for function scoring\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", customType); // for function scoring\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}