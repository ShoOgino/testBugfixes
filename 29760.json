{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","date":1336412267,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ENGLISH)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3532ef9e3edcbdf674841a5f549101f5416c62a5","date":1416413081,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList stats = null;\n        if (useCachedStatsBetweenGetMBeanInfoCalls) {\n          NamedList cachedStats = this.cachedDynamicStats;\n          if (cachedStats != null) {\n            stats = cachedStats;\n          }\n        }\n        if (stats == null) {\n          stats = infoBean.getStatistics();\n        }\n        val = stats.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList stats = null;\n        if (useCachedStatsBetweenGetMBeanInfoCalls) {\n          NamedList cachedStats = this.cachedDynamicStats;\n          if (cachedStats != null) {\n            stats = cachedStats;\n          }\n        }\n        if (stats == null) {\n          stats = infoBean.getStatistics();\n        }\n        val = stats.get(attribute);\n      }\n\n      if (val != null) {\n        // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList stats = null;\n        if (useCachedStatsBetweenGetMBeanInfoCalls) {\n          NamedList cachedStats = this.cachedDynamicStats;\n          if (cachedStats != null) {\n            stats = cachedStats;\n          }\n        }\n        if (stats == null) {\n          stats = infoBean.getStatistics();\n        }\n        val = stats.get(attribute);\n      }\n\n      if (val != null) {\n        // Its String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // Its an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList stats = null;\n        if (useCachedStatsBetweenGetMBeanInfoCalls) {\n          NamedList cachedStats = this.cachedDynamicStats;\n          if (cachedStats != null) {\n            stats = cachedStats;\n          }\n        }\n        if (stats == null) {\n          stats = infoBean.getStatistics();\n        }\n        val = stats.get(attribute);\n      }\n\n      if (val != null) {\n        // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (\"coreHashCode\".equals(attribute)) {\n        val = coreHashCode;\n      } else if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList stats = null;\n        if (useCachedStatsBetweenGetMBeanInfoCalls) {\n          NamedList cachedStats = this.cachedDynamicStats;\n          if (cachedStats != null) {\n            stats = cachedStats;\n          }\n        }\n        if (stats == null) {\n          stats = infoBean.getStatistics();\n        }\n        val = stats.get(attribute);\n      }\n\n      if (val != null) {\n        // It's String or one of the simple types, just return it as JMX suggests direct support for such types\n        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {\n          if (val.getClass().getName().equals(simpleTypeName)) {\n            return val;\n          }\n        }\n        // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is\n        // a workable representation of the object\n        return val.toString();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2acf500f78aa12b92e371fd89c719291986b6b90","7530de27b87b961b51f01bd1299b7004d46e8823"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"2acf500f78aa12b92e371fd89c719291986b6b90":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"816521ebaad5add9cb96bb88c577394e2938c40b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"46d8ada1fff8d18cb197c38c7983225162599948":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","2acf500f78aa12b92e371fd89c719291986b6b90"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3532ef9e3edcbdf674841a5f549101f5416c62a5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"c26f00b574427b55127e869b935845554afde1fa":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3532ef9e3edcbdf674841a5f549101f5416c62a5","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}