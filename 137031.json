{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","commits":[{"id":"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273","date":1420568044,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, \n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, \n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, \n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15af9ab52794c4f3888b19ff3cf55ccea043db2","date":1479337431,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild,\n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n    this(dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild, allTermsRequired, highlight, \n         DEFAULT_CLOSE_INDEXWRITER_ON_BUILD);\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, \n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Directory,Analyzer,Analyzer,int,boolean,boolean,boolean).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild,\n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n    this(dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild, allTermsRequired, highlight, \n         DEFAULT_CLOSE_INDEXWRITER_ON_BUILD);\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   *\n   *  @param allTermsRequired All terms in the suggest query must be matched.\n   *  @param highlight Highlight suggest query in suggestions.\n   *\n   */\n  public AnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild, \n                                 boolean allTermsRequired, boolean highlight) throws IOException {\n                                    \n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n    this.allTermsRequired = allTermsRequired;\n    this.highlight = highlight;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"e15af9ab52794c4f3888b19ff3cf55ccea043db2":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["7b516a692d03225c8f0e81a13ceed2dc32bb457d","e15af9ab52794c4f3888b19ff3cf55ccea043db2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e15af9ab52794c4f3888b19ff3cf55ccea043db2"]},"commit2Childs":{"7055cd9d1615c97eb7ddc5b4964c4e66e71ce273":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7055cd9d1615c97eb7ddc5b4964c4e66e71ce273"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["e15af9ab52794c4f3888b19ff3cf55ccea043db2","2e859e664a65796dadf8aaf65db6f66f3a885368"],"e15af9ab52794c4f3888b19ff3cf55ccea043db2":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}