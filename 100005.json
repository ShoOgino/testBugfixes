{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++)\n        (new IndexSearcher(directory, true)).close();\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++)\n        (new IndexSearcher(directory, true)).close();\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory, true);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++)\n        (new IndexSearcher(directory, true)).close();\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory, true);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory, true);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory, true);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        is.close();\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        ir.close();\n      }\n      count += 100;\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      for (int i=0; i<100; i++) {\n        IndexReader ir = IndexReader.open(directory);\n        IndexSearcher is = new IndexSearcher(ir);\n        ir.close();\n      }\n      count += 100;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0e7c2454a6a8237bfd0e953f5b940838408c9055","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}