{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(double,LongSupplier,int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(double,LongSupplier,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestNumericsVsStoredFields(double density, LongSupplier longs, int minDocs) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast((int) (minDocs*1.172));\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // max(256, minDocs) values\n    writer.forceMerge(numDocs / Math.max(256, minDocs));\n\n    writer.close();\n    // compare\n    assertDVIterate(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(double,LongSupplier,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestNumericsVsStoredFields(double density, LongSupplier longs, int minDocs) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast((int) (minDocs*1.172));\n    // numDocs should be always > 256 so that in case of a codec that optimizes\n    // for numbers of values <= 256, all storage layouts are tested\n    assert numDocs > 256;\n    for (int i = 0; i < numDocs; i++) {\n      if (random().nextDouble() > density) {\n        writer.addDocument(new Document());\n        continue;\n      }\n      idField.setStringValue(Integer.toString(i));\n      long value = longs.getAsLong();\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n\n    // merge some segments and ensure that at least one of them has more than\n    // max(256, minDocs) values\n    writer.forceMerge(numDocs / Math.max(256, minDocs));\n\n    writer.close();\n    // compare\n    assertDVIterate(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}