{"path":"solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest#doTest(SolrZkClient,String,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest#doTest(SolrZkClient,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void doTest(SolrZkClient zkClient, String path, boolean getData, boolean list, boolean create, boolean setData, boolean delete) throws Exception {\n    try {\n      zkClient.getData(path, null, null, false);\n      if (!getData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (getData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.getChildren(path, null, false);\n      if (!list) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (list) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.create(path + \"/subnode\", null, CreateMode.PERSISTENT, false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.makePath(path + \"/subnode/subsubnode\", false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode/subsubnode\", -1, false);\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.setData(path, (byte[])null, false);\n      if (!setData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (setData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n    try {\n      // Actually about the ACLs on /solr, but that is protected\n      zkClient.delete(path, -1, false);\n      if (!delete) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (delete) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest#doTest(SolrZkClient,String,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/VMParamsZkACLAndCredentialsProvidersTest#doTest(SolrZkClient,String,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  protected static void doTest(SolrZkClient zkClient, String path, boolean getData, boolean list, boolean create, boolean setData, boolean delete) throws Exception {\n    try {\n      zkClient.getData(path, null, null, false);\n      if (!getData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (getData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.getChildren(path, null, false);\n      if (!list) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (list) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.create(path + \"/subnode\", null, CreateMode.PERSISTENT, false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) {\n        nae.printStackTrace();\n        fail(\"No NoAuthException expected\");\n      }\n      // expected\n    }\n    \n    try {\n      zkClient.makePath(path + \"/subnode/subsubnode\", false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode/subsubnode\", -1, false);\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.setData(path, (byte[])null, false);\n      if (!setData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (setData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n    try {\n      // Actually about the ACLs on /solr, but that is protected\n      zkClient.delete(path, -1, false);\n      if (!delete) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (delete) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n  }\n\n","sourceOld":"  protected static void doTest(SolrZkClient zkClient, String path, boolean getData, boolean list, boolean create, boolean setData, boolean delete) throws Exception {\n    try {\n      zkClient.getData(path, null, null, false);\n      if (!getData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (getData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.getChildren(path, null, false);\n      if (!list) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (list) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.create(path + \"/subnode\", null, CreateMode.PERSISTENT, false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.makePath(path + \"/subnode/subsubnode\", false);\n      if (!create) fail(\"NoAuthException expected \");\n      else {\n        zkClient.delete(path + \"/subnode/subsubnode\", -1, false);\n        zkClient.delete(path + \"/subnode\", -1, false);\n      }\n    } catch (NoAuthException nae) {\n      if (create) fail(\"No NoAuthException expected\");\n      // expected\n    }\n    \n    try {\n      zkClient.setData(path, (byte[])null, false);\n      if (!setData) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (setData) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n    try {\n      // Actually about the ACLs on /solr, but that is protected\n      zkClient.delete(path, -1, false);\n      if (!delete) fail(\"NoAuthException expected \");\n    } catch (NoAuthException nae) {\n      if (delete) fail(\"No NoAuthException expected\");\n      // expected\n    }\n\n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c83f985d9828d30801541f1eed26aa3169646baf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}