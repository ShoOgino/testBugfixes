{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      float queryBoost = 1f;\n      while (query instanceof BoostQuery) {\n        BoostQuery bq = (BoostQuery) query;\n        queryBoost *= bq.getBoost();\n        query = bq.getQuery();\n      }\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        float qjBoost = 1f;\n        while (qj instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) qj;\n          qjBoost *= bq.getBoost();\n          qj = bq.getQuery();\n        }\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, queryBoost, (PhraseQuery)qj, qjBoost );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new LinkedHashSet<>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}