{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      return new PayloadTermSpanScorer((TermSpans) query.getSpans(context, acceptDocs, termContexts),\n          this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, payloadCollector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2","date":1432114286,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, collector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, payloadCollector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, similarity.simScorer(stats, context));\n    }\n\n","bugFix":["2d530e71ed32ab23b34ca3fc72b080a554a40404","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      Spans spans = super.getSpans(context, acceptDocs, collector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, similarity.simScorer(context));\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      TermSpans spans = (TermSpans) query.getSpans(context, acceptDocs, termContexts, collector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      Spans spans = super.getSpans(context, acceptDocs, collector);\n      Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, simScorer);\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      Spans spans = super.getSpans(context, acceptDocs, collector);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, similarity.simScorer(context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      Spans spans = super.getSpans(context, acceptDocs, Postings.PAYLOADS);\n      Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);\n      return (spans == null) ? null : new PayloadTermSpanScorer(spans, this, simScorer);\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      PayloadTermCollector collector = new PayloadTermCollector();\n      Spans spans = super.getSpans(context, acceptDocs, collector);\n      Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);\n      return (spans == null)\n              ? null\n              : new PayloadTermSpanScorer(spans, this, collector, simScorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context) throws IOException {\n      Spans spans = super.getSpans(context, Postings.PAYLOADS);\n      Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);\n      return (spans == null) ? null : new PayloadTermSpanScorer(spans, this, simScorer);\n    }\n\n","sourceOld":"    @Override\n    public PayloadTermSpanScorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      Spans spans = super.getSpans(context, acceptDocs, Postings.PAYLOADS);\n      Similarity.SimScorer simScorer = simWeight == null ? null : similarity.simScorer(simWeight, context);\n      return (spans == null) ? null : new PayloadTermSpanScorer(spans, this, simScorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"29aea3139c4326c0501d75d51059855463220279":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["29aea3139c4326c0501d75d51059855463220279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fb17639909a369c1e64866842e5c213440acc17e"],"fab172655716b96f7e42376116235017a922de3a":["fb17639909a369c1e64866842e5c213440acc17e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"29aea3139c4326c0501d75d51059855463220279":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["29aea3139c4326c0501d75d51059855463220279"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2d530e71ed32ab23b34ca3fc72b080a554a40404","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}