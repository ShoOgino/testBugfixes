{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}