{"path":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/RTimer#stop().mjava","sourceNew":"  /** Recursively stop timer and sub timers */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += now() - startTime;\n    state = STOPPED;\n    \n    for( Map.Entry<String,RTimer> entry : children ) {\n      RTimer child = entry.getValue();\n      if(child.state == STARTED || child.state == PAUSED) \n        child.stop();\n    }\n    return time;\n  }\n\n","sourceOld":"  /** Recursively stop timer and sub timers */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += now() - startTime;\n    state = STOPPED;\n    \n    for( Map.Entry<String,RTimer> entry : children ) {\n      RTimer child = entry.getValue();\n      if(child.state == STARTED || child.state == PAUSED) \n        child.stop();\n    }\n    return time;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14269bb7726b315b8195366c9f6a3aa5bc0b82f2","date":1434323637,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","sourceNew":"  /** Recursively stop timer and sub timers */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += timerImpl.elapsed();\n    state = STOPPED;\n    \n    for( Map.Entry<String,RTimer> entry : children ) {\n      RTimer child = entry.getValue();\n      if(child.state == STARTED || child.state == PAUSED) \n        child.stop();\n    }\n    return time;\n  }\n\n","sourceOld":"  /** Recursively stop timer and sub timers */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += now() - startTime;\n    state = STOPPED;\n    \n    for( Map.Entry<String,RTimer> entry : children ) {\n      RTimer child = entry.getValue();\n      if(child.state == STARTED || child.state == PAUSED) \n        child.stop();\n    }\n    return time;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104456f4eeacc857f7e1e6408e1483de8c2bd658","date":1439164522,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/RTimer#stop().mjava","sourceNew":"  /** Stop this timer */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += timerImpl.elapsed();\n    state = STOPPED;\n    return time;\n  }\n\n","sourceOld":"  /** Recursively stop timer and sub timers */\n  public double stop() {\n    assert state == STARTED || state == PAUSED;\n    time = culmTime;\n    if(state == STARTED) \n      time += timerImpl.elapsed();\n    state = STOPPED;\n    \n    for( Map.Entry<String,RTimer> entry : children ) {\n      RTimer child = entry.getValue();\n      if(child.state == STARTED || child.state == PAUSED) \n        child.stop();\n    }\n    return time;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14269bb7726b315b8195366c9f6a3aa5bc0b82f2":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["14269bb7726b315b8195366c9f6a3aa5bc0b82f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104456f4eeacc857f7e1e6408e1483de8c2bd658"]},"commit2Childs":{"14269bb7726b315b8195366c9f6a3aa5bc0b82f2":["104456f4eeacc857f7e1e6408e1483de8c2bd658"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["14269bb7726b315b8195366c9f6a3aa5bc0b82f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"104456f4eeacc857f7e1e6408e1483de8c2bd658":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}