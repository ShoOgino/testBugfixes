{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","commits":[{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createIndexableFields(Shape).mjava","sourceNew":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","sourceOld":"  @Override\n  public Field[] createIndexableFields(Shape shape) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    TokenStream tokenStream = createTokenStream(shape, grid.getMaxLevels());\n    Field field = new Field(getFieldName(), tokenStream, FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","sourceNew":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","sourceOld":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/NumberRangePrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","sourceNew":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","sourceOld":"  @Override\n  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    //levels doesn't actually matter; NumberRange based Shapes have their own \"level\".\n    return super.createCellIteratorToIndex(shape, grid.getMaxLevels(), reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["af2638813028b254a88b418ebeafb541afb49653","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}