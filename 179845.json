{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    server.add( doc );\n    server.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    server.add( doc );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\" );\n    doc.addField( \"name\", \"doc1\" );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\" );\n    doc.addField( \"name\", \"doc2\" );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\", 1.0f );\n    doc.addField( \"name\", \"doc1\", 1.0f );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\", 1.0f );\n    doc.addField( \"name\", \"doc2\", 1.0f );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAugmentFields().mjava","sourceNew":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\" );\n    doc.addField( \"name\", \"doc1\" );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\" );\n    doc.addField( \"name\", \"doc2\" );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","sourceOld":"  @Test\n  public void testAugmentFields() throws Exception\n  {    \n    SolrClient client = getSolrClient();\n    \n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField( \"id\", \"111\" );\n    doc.addField( \"name\", \"doc1\" );\n    doc.addField( \"price\", 11 );\n    client.add(doc);\n    client.commit(); // make sure this gets in first\n    \n    doc = new SolrInputDocument();\n    doc.addField( \"id\", \"222\" );\n    doc.addField( \"name\", \"doc2\" );\n    doc.addField( \"price\", 22 );\n    client.add(doc);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.set( CommonParams.FL, \"id,price,[docid],[explain style=nl],score,aaa:[value v=aaa],ten:[value v=10 t=int]\" );\n    query.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\n    QueryResponse rsp = client.query( query );\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals( 2, out.getNumFound() );\n    SolrDocument out1 = out.get( 0 ); \n    SolrDocument out2 = out.get( 1 );\n    assertEquals( \"111\", out1.getFieldValue( \"id\" ) );\n    assertEquals( \"222\", out2.getFieldValue( \"id\" ) );\n    assertEquals( 1.0f, out1.getFieldValue( \"score\" ) );\n    assertEquals( 1.0f, out2.getFieldValue( \"score\" ) );\n    \n    // check that the docid is one bigger\n    int id1 = (Integer)out1.getFieldValue( \"[docid]\" );\n    int id2 = (Integer)out2.getFieldValue( \"[docid]\" );\n    assertTrue( \"should be bigger [\"+id1+\",\"+id2+\"]\", id2 > id1 );\n    \n    // The score from explain should be the same as the score\n    NamedList explain = (NamedList)out1.getFieldValue( \"[explain]\" );\n    assertEquals( out1.get( \"score\"), explain.get( \"value\" ) );\n    \n    // Augmented _value_ with alias\n    assertEquals( \"aaa\", out1.get( \"aaa\" ) );\n    assertEquals( 10, ((Integer)out1.get( \"ten\" )).intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["acd9883560fd89e6448b2b447302fe543040cd4f"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}