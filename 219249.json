{"path":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpiresTimeout = new TimeOut(cacheLifetimeSeconds, TimeUnit.SECONDS);\n\n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpiresTimeout = new TimeOut(cacheLifetimeSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpiresTimeout = new TimeOut(cacheLifetimeSeconds, TimeUnit.SECONDS);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:{}\", filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpiresTimeout = new TimeOut(cacheLifetimeSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      throw new IOException(\"Unable to initialize Templates '\" + filename + \"'\", e);\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpiresTimeout = new TimeOut(cacheLifetimeSeconds, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"56572ec06f1407c066d6b7399413178b33176cd8":["c26f00b574427b55127e869b935845554afde1fa","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["c26f00b574427b55127e869b935845554afde1fa","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["56572ec06f1407c066d6b7399413178b33176cd8","3de2e9a536c4115b4f53f14b6ab496ba3af1840c","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["575e66bd4b2349209027f6801184da7fc3cba13f"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["bcf9886c8ff537aafde14de48ebf744f5673f08b","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}