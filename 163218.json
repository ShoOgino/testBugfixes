{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#add(CharsRef).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#add(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert stateRegistry != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be in sorted UTF-8 order: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n\n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}