{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  /** Note: Document instance is re-used per-thread */\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}