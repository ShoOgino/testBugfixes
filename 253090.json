{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","commits":[{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(\"urlScheme\");\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(\"urlScheme\");\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(\"urlScheme\");\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb81e505886f56206d979b757fcabce66ea22dcb","date":1394040036,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(URL_SCHEME);\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9eee76c6a8ac63dd88a66571d553973ea0a1131","date":1480015269,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = getClusterProperty(URL_SCHEME, \"http\");\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return Utils.getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   *\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return Utils.getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corresponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting\n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    return Utils.getBaseUrlForNodeName(nodeName, getClusterProperty(URL_SCHEME, \"http\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","cb81e505886f56206d979b757fcabce66ea22dcb"],"0ad30c6a479e764150a3316e57263319775f1df2":["cb81e505886f56206d979b757fcabce66ea22dcb","115923bc88e5b1dc4bef049b1ded8486723052ed"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cb81e505886f56206d979b757fcabce66ea22dcb","d470c8182e92b264680e34081b75e70a9f2b3c89"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cb81e505886f56206d979b757fcabce66ea22dcb","0ad30c6a479e764150a3316e57263319775f1df2"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["cb81e505886f56206d979b757fcabce66ea22dcb"],"cb81e505886f56206d979b757fcabce66ea22dcb":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["727bb765ff2542275f6d31f67be18d7104bae148","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c9eee76c6a8ac63dd88a66571d553973ea0a1131","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb81e505886f56206d979b757fcabce66ea22dcb":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","115923bc88e5b1dc4bef049b1ded8486723052ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cb81e505886f56206d979b757fcabce66ea22dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}