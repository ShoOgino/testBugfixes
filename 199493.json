{"path":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","commits":[{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"c26f00b574427b55127e869b935845554afde1fa":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}