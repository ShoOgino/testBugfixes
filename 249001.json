{"path":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","commits":[{"id":"cd4879790608519b344f4cad50c6b8246d6d25ee","date":1381784666,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","pathOld":"/dev/null","sourceNew":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit + 1);\n    assertTrue(bits.fastGet(bit + 1));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 128, numWords << 6); // pick a higher bit than 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1be843514bd4f7678cfcf8d2a4987ee855d50eda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c816753e8793f150a5bf50325f57cba0d616b665","date":1381801943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","sourceNew":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit + 1);\n    assertTrue(bits.fastGet(bit + 1));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 127, (numWords << 6)-1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","sourceOld":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit + 1);\n    assertTrue(bits.fastGet(bit + 1));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 128, numWords << 6); // pick a higher bit than 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1be843514bd4f7678cfcf8d2a4987ee855d50eda","date":1381841832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","sourceNew":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 127, (numWords << 6)-1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","sourceOld":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit + 1);\n    assertTrue(bits.fastGet(bit + 1));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 127, (numWords << 6)-1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","bugFix":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","sourceNew":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = TestUtil.nextInt(random(), 127, (numWords << 6) - 1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","sourceOld":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = _TestUtil.nextInt(random(), 127, (numWords << 6)-1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","sourceNew":null,"sourceOld":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = TestUtil.nextInt(random(), 127, (numWords << 6) - 1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#testEnsureCapacity().mjava","sourceNew":null,"sourceOld":"  public void testEnsureCapacity() {\n    OpenBitSet bits = new OpenBitSet(1);\n    int bit = random().nextInt(100) + 10;\n    bits.ensureCapacity(bit); // make room for more bits\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n    bits.ensureCapacity(bit + 1);\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacity(3); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n\n    // test ensureCapacityWords\n    int numWords = random().nextInt(10) + 2; // make sure we grow the array (at least 128 bits)\n    bits.ensureCapacityWords(numWords);\n    bit = TestUtil.nextInt(random(), 127, (numWords << 6) - 1); // pick a bit >= to 128, but still within range\n    bits.fastSet(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.fastClear(bit);\n    assertFalse(bits.fastGet(bit));\n    bits.fastFlip(bit);\n    assertTrue(bits.fastGet(bit));\n    bits.ensureCapacityWords(2); // should not change numBits nor grow the array\n    bits.fastSet(3);\n    assertTrue(bits.fastGet(3));\n    bits.fastSet(bit-1);\n    assertTrue(bits.fastGet(bit-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["6613659748fe4411a7dcf85266e55db1f95f7315","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1be843514bd4f7678cfcf8d2a4987ee855d50eda"],"c816753e8793f150a5bf50325f57cba0d616b665":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"1be843514bd4f7678cfcf8d2a4987ee855d50eda":["c816753e8793f150a5bf50325f57cba0d616b665"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"c816753e8793f150a5bf50325f57cba0d616b665":["1be843514bd4f7678cfcf8d2a4987ee855d50eda"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1be843514bd4f7678cfcf8d2a4987ee855d50eda":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["c816753e8793f150a5bf50325f57cba0d616b665"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}