{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","commits":[{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertEquals(\"Directory still has pending deleted files\", iae.getMessage());\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac","date":1454606266,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertEquals(\"Directory still has pending deleted files; cannot initialize IndexWriter\", iae.getMessage());\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertEquals(\"Directory still has pending deleted files\", iae.getMessage());\n      }\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertTrue(iae.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertEquals(\"Directory still has pending deleted files; cannot initialize IndexWriter\", iae.getMessage());\n      }\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertTrue(iae.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertTrue(iae.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertTrue(iae.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n      }\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      });\n      assertTrue(expected.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      try {\n        dir.deleteFile(\"segments_1\");\n        fail(\"didn't hit exception\");\n      } catch (NoSuchFileException nfse) {\n        // expected\n      }\n\n      iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      try {\n        w = new IndexWriter(dir, iwc);\n      } catch (IllegalArgumentException iae) {\n        assertTrue(iae.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n      }\n      in.close();\n    }\n  }\n\n","bugFix":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a futur file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.maxDoc());\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      IndexInput in = dir.openInput(\"segments_1\", IOContext.DEFAULT);\n      w.addDocument(new Document());\n      w.close();\n      assertTrue(dir.checkPendingDeletions());\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_1\");\n      });\n\n      IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n        new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      });\n      assertTrue(expected.getMessage().contains(\"still has pending deleted files; cannot initialize IndexWriter\"));\n\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.maxDoc());\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a futur file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NFSF if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.maxDoc());\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.getDocStats().maxDoc);\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.maxDoc());\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new NIOFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.getDocStats().maxDoc);\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.getDocStats().maxDoc);\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testWithPendingDeletions().mjava","sourceNew":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new NIOFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.getDocStats().maxDoc);\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","sourceOld":"  public void testWithPendingDeletions() throws Exception {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    IndexCommit indexCommit;\n    DirectoryReader reader;\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    try (FSDirectory dir = new SimpleFSDirectory(root)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      w.commit();\n      reader = w.getReader();\n      // we pull this commit to open it again later to check that we fail if a future file delete is pending\n      indexCommit = reader.getIndexCommit();\n      w.close();\n      w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n      w.addDocument(new Document());\n      w.close();\n      IndexInput in = dir.openInput(\"segments_2\", IOContext.DEFAULT);\n      dir.deleteFile(\"segments_2\");\n      assertTrue(dir.getPendingDeletions().size() > 0);\n\n      // make sure we get NoSuchFileException if we try to delete and already-pending-delete file:\n      expectThrows(NoSuchFileException.class, () -> {\n        dir.deleteFile(\"segments_2\");\n      });\n\n      try (IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setIndexCommit(indexCommit))) {\n        writer.addDocument(new Document());\n        writer.commit();\n        assertEquals(1, writer.getDocStats().maxDoc);\n        // now check that we moved to 3\n        dir.openInput(\"segments_3\", IOContext.READ).close();;\n      }\n      reader.close();\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["feb4029567b43f074ed7b6eb8fb126d355075dfd","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa","5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}