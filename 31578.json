{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    boolean result = false;\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      //look for the delimiter\n      boolean seen = false;\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          termAtt.setTermBuffer(buffer, 0, i);\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          seen = true;\n          break;//at this point, we know the whole piece, so we can exit.  If we don't see the delimiter, then the termAtt is the same\n        }\n      }\n      if (seen == false) {\n        //no delimiter\n        payAtt.setPayload(null);\n      }\n      result = true;\n    }\n    return result;\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    boolean result = false;\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      //look for the delimiter\n      boolean seen = false;\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          termAtt.setTermBuffer(buffer, 0, i);\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          seen = true;\n          break;//at this point, we know the whole piece, so we can exit.  If we don't see the delimiter, then the termAtt is the same\n        }\n      }\n      if (seen == false) {\n        //no delimiter\n        payAtt.setPayload(null);\n      }\n      result = true;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    boolean result = false;\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      //look for the delimiter\n      boolean seen = false;\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          termAtt.setTermBuffer(buffer, 0, i);\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          seen = true;\n          break;//at this point, we know the whole piece, so we can exit.  If we don't see the delimiter, then the termAtt is the same\n        }\n      }\n      if (seen == false) {\n        //no delimiter\n        payAtt.setPayload(null);\n      }\n      result = true;\n    }\n    return result;\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    boolean result = false;\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      //look for the delimiter\n      boolean seen = false;\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          termAtt.setTermBuffer(buffer, 0, i);\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          seen = true;\n          break;//at this point, we know the whole piece, so we can exit.  If we don't see the delimiter, then the termAtt is the same\n        }\n      }\n      if (seen == false) {\n        //no delimiter\n        payAtt.setPayload(null);\n      }\n      result = true;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6debeec7a0ab1749b149595026b24714b5bbb2be","date":1260883647,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    boolean result = false;\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      //look for the delimiter\n      boolean seen = false;\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          termAtt.setTermBuffer(buffer, 0, i);\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          seen = true;\n          break;//at this point, we know the whole piece, so we can exit.  If we don't see the delimiter, then the termAtt is the same\n        }\n      }\n      if (seen == false) {\n        //no delimiter\n        payAtt.setPayload(null);\n      }\n      result = true;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6debeec7a0ab1749b149595026b24714b5bbb2be":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6debeec7a0ab1749b149595026b24714b5bbb2be"]},"commit2Childs":{"6debeec7a0ab1749b149595026b24714b5bbb2be":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["6debeec7a0ab1749b149595026b24714b5bbb2be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}