{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.perThread.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.perThread.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.perThread.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed()\n        - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#commitPerThreadBytes(ThreadState).mjava","sourceNew":"  private synchronized void commitPerThreadBytes(DocumentsWriterPerThread perThread) {\n    final long delta = perThread.commitLastBytesUsed();\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.isFlushPending()) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","sourceOld":"  private void commitPerThreadBytes(ThreadState perThread) {\n    final long delta = perThread.dwpt.bytesUsed() - perThread.bytesUsed;\n    perThread.bytesUsed += delta;\n    /*\n     * We need to differentiate here if we are pending since setFlushPending\n     * moves the perThread memory to the flushBytes and we could be set to\n     * pending during a delete\n     */\n    if (perThread.flushPending) {\n      flushBytes += delta;\n    } else {\n      activeBytes += delta;\n    }\n    assert updatePeaks(delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["191128ac5b85671b1671e2c857437694283b6ebf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"6483e4260c08168709c02238ae083a51519a28dd":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","f492fe129985750df09c8dac738aecc503158bb3"],"191128ac5b85671b1671e2c857437694283b6ebf":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["6483e4260c08168709c02238ae083a51519a28dd"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["264935965977b4a9e2f3920420647072c9c49176","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["f492fe129985750df09c8dac738aecc503158bb3","6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}