{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","commits":[{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404bbb5c1692276fefc358d0d4a9ccb74ed2518e","date":1451595423,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    return rectWithinPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY, false);\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    return !(rectCrossesPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY) ||\n        !pointInPolygon(shapeX, shapeY, rMinY, rMinX) || !pointInPolygon(shapeX, shapeY, rMinY, rMaxX) ||\n        !pointInPolygon(shapeX, shapeY, rMaxY, rMaxX) || !pointInPolygon(shapeX, shapeY, rMaxY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04995b00da1e08edb88b14c5a9789d741de5c51d","date":1453863716,"type":4,"author":"Nick Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    return rectWithinPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPoly(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  public static boolean rectWithinPoly(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    return rectWithinPoly(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"404bbb5c1692276fefc358d0d4a9ccb74ed2518e":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["404bbb5c1692276fefc358d0d4a9ccb74ed2518e","04995b00da1e08edb88b14c5a9789d741de5c51d"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["404bbb5c1692276fefc358d0d4a9ccb74ed2518e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"404bbb5c1692276fefc358d0d4a9ccb74ed2518e":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","04995b00da1e08edb88b14c5a9789d741de5c51d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"04995b00da1e08edb88b14c5a9789d741de5c51d":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["404bbb5c1692276fefc358d0d4a9ccb74ed2518e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}