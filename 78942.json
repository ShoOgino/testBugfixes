{"path":"src/test-deprecated/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry strudel\"));\n        doc3.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc4.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc5.add(Field.Text(\"body\", \"piccadilly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestPhrasePrefixQuery#testPhrasePrefix().mjava","sourceNew":null,"sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(Field.Text(\"body\", \"blueberry pie\"));\n        doc2.add(Field.Text(\"body\", \"blueberry strudel\"));\n        doc3.add(Field.Text(\"body\", \"blueberry pizza\"));\n        doc4.add(Field.Text(\"body\", \"blueberry chewing gum\"));\n        doc5.add(Field.Text(\"body\", \"piccadilly circus\"));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        PhrasePrefixQuery query1 = new PhrasePrefixQuery();\n        PhrasePrefixQuery query2 = new PhrasePrefixQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}