{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","commits":[{"id":"2d76fc51e1f6bf807458c684a30c03be70be5c5f","date":1407826855,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","pathOld":"/dev/null","sourceNew":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n    }\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"310045472df7463a74daabf6252eafc9d93960e0","date":1413271286,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","sourceNew":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","sourceOld":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n    }\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","sourceNew":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","sourceOld":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n    }\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23f179b9528b0d2ae2128e17b957fd055d3f4a0","date":1415202068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","sourceNew":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6, record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","sourceOld":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testRecursiveWildcard2().mjava","sourceNew":"  public void testRecursiveWildcard2() throws Exception {\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6, record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6, record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List) records.get(0).get(\"txt\")).size());\n\n  }\n\n","sourceOld":"  public void testRecursiveWildcard2() throws Exception{\n    String json = \"{\\n\" +\n        \"  \\\"first\\\": \\\"John\\\",\\n\" +\n        \"  \\\"last\\\": \\\"Doe\\\",\\n\" +\n        \"  \\\"grade\\\": 8,\\n\" +\n        \"  \\\"exams\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"subject\\\": \\\"Maths\\\",\\n\" +\n        \"        \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"        \\\"marks\\\":90},\\n\" +\n        \"        {\\n\" +\n        \"         \\\"subject\\\": \\\"Biology\\\",\\n\" +\n        \"         \\\"test\\\"   : \\\"term1\\\",\\n\" +\n        \"         \\\"marks\\\":86}\\n\" +\n        \"      ]\\n\" +\n        \"}\";\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6, record.size());\n      assertTrue(record.containsKey(\"subject\"));\n      assertTrue(record.containsKey(\"test\"));\n      assertTrue(record.containsKey(\"marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"$FQN:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(2, records.size());\n    for (Map<String, Object> record : records) {\n      assertEquals(6,record.size());\n      assertTrue(record.containsKey(\"exams.subject\"));\n      assertTrue(record.containsKey(\"exams.test\"));\n      assertTrue(record.containsKey(\"exams.marks\"));\n    }\n\n    streamer = JsonRecordReader.getInst(\"/\", Collections.singletonList(\"txt:/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(1, records.size());\n    assertEquals(9, ((List)records.get(0).get(\"txt\")).size() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"310045472df7463a74daabf6252eafc9d93960e0":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"55980207f1977bd1463465de1659b821347e2fa8":["2d76fc51e1f6bf807458c684a30c03be70be5c5f","310045472df7463a74daabf6252eafc9d93960e0"],"2330174b38007b9942205a2679db9ddffe35af89":["d23f179b9528b0d2ae2128e17b957fd055d3f4a0"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d23f179b9528b0d2ae2128e17b957fd055d3f4a0":["310045472df7463a74daabf6252eafc9d93960e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2330174b38007b9942205a2679db9ddffe35af89"]},"commit2Childs":{"310045472df7463a74daabf6252eafc9d93960e0":["55980207f1977bd1463465de1659b821347e2fa8","d23f179b9528b0d2ae2128e17b957fd055d3f4a0"],"55980207f1977bd1463465de1659b821347e2fa8":[],"2330174b38007b9942205a2679db9ddffe35af89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d76fc51e1f6bf807458c684a30c03be70be5c5f":["310045472df7463a74daabf6252eafc9d93960e0","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d76fc51e1f6bf807458c684a30c03be70be5c5f"],"d23f179b9528b0d2ae2128e17b957fd055d3f4a0":["2330174b38007b9942205a2679db9ddffe35af89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}