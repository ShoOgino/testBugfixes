{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,Replica.State).mjava","commits":[{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, String expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    String coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getStr(ZkStateReader.STATE_PROP);\n        if(coreState.equals(expectedState)) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,String,String,String,Replica.State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyStatus(ZkStateReader,Replica.State).mjava","sourceNew":"  private void verifyStatus(ZkStateReader reader, String collection, String shard, String coreNodeName, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(collection, shard);\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(coreNodeName).getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was: \" + coreState + \" expected:\" + expectedState + \" clusterState:\" + reader.getClusterState());\n  }\n\n","sourceOld":"  private void verifyStatus(ZkStateReader reader, Replica.State expectedState) throws InterruptedException {\n    int maxIterations = 100;\n    Replica.State coreState = null;\n    while(maxIterations-->0) {\n      Slice slice = reader.getClusterState().getSlice(\"collection1\", \"shard1\");\n      if(slice!=null) {\n        coreState = slice.getReplicasMap().get(\"core_node1\").getState();\n        if(coreState == expectedState) {\n          return;\n        }\n      }\n      Thread.sleep(50);\n    }\n    fail(\"Illegal state, was:\" + coreState + \" expected:\" + expectedState + \"clusterState:\" + reader.getClusterState());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}