{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}