{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"metricsTest\", clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"metricsTest\", clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testMetricsTag().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testMetricsTag().mjava","sourceNew":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","sourceOld":"  public void testMetricsTag() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:abc':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      // expected\n      assertTrue(e.toString().contains(\"Invalid metrics: param in\"));\n    }\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'metrics:solr.node:ADMIN./admin/authorization.clientErrors:count':'>58768765', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    //org.eclipse.jetty.server.handler.DefaultHandler.2xx-responses\n    CollectionAdminRequest.createCollection(\"metricsTest\", \"conf\", 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"metricsTest\",\n        CloudTestUtils.clusterShape(1, 1));\n\n    DocCollection collection = getCollectionState(\"metricsTest\");\n    List<String> tags = Arrays.asList(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\",\n        \"metrics:solr.jvm:buffers.direct.Count\");\n    Map<String, Object> val = cluster.getNodeStateProvider().getNodeValues(collection.getReplicas().get(0).getNodeName(), tags);\n    for (String tag : tags) {\n      assertNotNull( \"missing : \"+ tag , val.get(tag));\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["9c6c0dad4932399aec99b4818086cb1772773916"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c6c0dad4932399aec99b4818086cb1772773916":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}