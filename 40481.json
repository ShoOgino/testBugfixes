{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","commits":[{"id":"f9f72c9b3f95ea71c631268479ce720376c6f248","date":1508236500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"/dev/null","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bc7a931e936fea6f08e59ae4de1a28e60b4009a","date":1508245524,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"/dev/null","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a351cccc7885315d538fd56b10af0cc9241292fd","date":1508384527,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    if (zkClient.exists(nodeAddedPath, true)) {\n      ops.add(Op.delete(nodeAddedPath, -1));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","sourceOld":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n \n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","sourceOld":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    if (zkClient.exists(nodeAddedPath, true)) {\n      ops.add(Op.delete(nodeAddedPath, -1));\n    }\n    zkClient.multi(ops, true);\n  }\n\n","bugFix":["f9f72c9b3f95ea71c631268479ce720376c6f248","a351cccc7885315d538fd56b10af0cc9241292fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","sourceOld":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n \n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","sourceOld":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeEphemeralLiveNode().mjava","sourceNew":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","sourceOld":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9f72c9b3f95ea71c631268479ce720376c6f248":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["ad4957cde742defe6db19689abdc267c5d948066"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a351cccc7885315d538fd56b10af0cc9241292fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"2bc7a931e936fea6f08e59ae4de1a28e60b4009a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f72c9b3f95ea71c631268479ce720376c6f248"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a351cccc7885315d538fd56b10af0cc9241292fd":["2bc7a931e936fea6f08e59ae4de1a28e60b4009a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f9f72c9b3f95ea71c631268479ce720376c6f248":["2bc7a931e936fea6f08e59ae4de1a28e60b4009a"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9f72c9b3f95ea71c631268479ce720376c6f248","2bc7a931e936fea6f08e59ae4de1a28e60b4009a"],"ad4957cde742defe6db19689abdc267c5d948066":["3f504512a03d978990cbff30db0522b354e846db"],"2bc7a931e936fea6f08e59ae4de1a28e60b4009a":["a351cccc7885315d538fd56b10af0cc9241292fd"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ad4957cde742defe6db19689abdc267c5d948066"],"a351cccc7885315d538fd56b10af0cc9241292fd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}