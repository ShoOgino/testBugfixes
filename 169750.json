{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores() == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (needsScores == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, false, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores() == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (needsScores == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, false, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores() == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    if (scoreMode.needsScores() == false) {\n      // We don't need scores then quickly change the query:\n      TermsQuery termsQuery = new TermsQuery(toField, terms, fromField, fromQuery, topReaderContextId);\n      return searcher.rewrite(termsQuery).createWeight(searcher, org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n    return new Weight(TermsIncludingScoreQuery.this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms != null) {\n          TermsEnum segmentTermsEnum = terms.iterator();\n          BytesRef spare = new BytesRef();\n          PostingsEnum postingsEnum = null;\n          for (int i = 0; i < TermsIncludingScoreQuery.this.terms.size(); i++) {\n            if (segmentTermsEnum.seekExact(TermsIncludingScoreQuery.this.terms.get(ords[i], spare))) {\n              postingsEnum = segmentTermsEnum.postings(postingsEnum, PostingsEnum.NONE);\n              if (postingsEnum.advance(doc) == doc) {\n                final float score = TermsIncludingScoreQuery.this.scores[ords[i]];\n                return Explanation.match(score, \"Score based on join value \" + segmentTermsEnum.term().utf8ToString());\n              }\n            }\n          }\n        }\n        return Explanation.noMatch(\"Not a match\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(toField);\n        if (terms == null) {\n          return null;\n        }\n        \n        // what is the runtime...seems ok?\n        final long cost = context.reader().maxDoc() * terms.size();\n\n        TermsEnum segmentTermsEnum = terms.iterator();\n        if (multipleValuesPerDocument) {\n          return new MVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        } else {\n          return new SVInOrderScorer(this, segmentTermsEnum, context.reader().maxDoc(), cost);\n        }\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}