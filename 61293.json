{"path":"src/test/org/apache/lucene/search/TestWildcard#testEquals().mjava","commits":[{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    WildcardQuery wq1 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq2 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq3 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n\n    // reflexive?\n    assertEquals(wq1, wq2);\n    assertEquals(wq2, wq1);\n\n    // transitive?\n    assertEquals(wq2, wq3);\n    assertEquals(wq1, wq3);\n\n    assertFalse(wq1.equals(null));\n\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"b*a\"));\n    assertFalse(wq1.equals(fq));\n    assertFalse(fq.equals(wq1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEquals().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testEquals().mjava","sourceNew":"  public void testEquals() {\n    WildcardQuery wq1 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq2 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq3 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n\n    // reflexive?\n    assertEquals(wq1, wq2);\n    assertEquals(wq2, wq1);\n\n    // transitive?\n    assertEquals(wq2, wq3);\n    assertEquals(wq1, wq3);\n\n    assertFalse(wq1.equals(null));\n\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"b*a\"));\n    assertFalse(wq1.equals(fq));\n    assertFalse(fq.equals(wq1));\n  }\n\n","sourceOld":"  public void testEquals() {\n    WildcardQuery wq1 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq2 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n    WildcardQuery wq3 = new WildcardQuery(new Term(\"field\", \"b*a\"));\n\n    // reflexive?\n    assertEquals(wq1, wq2);\n    assertEquals(wq2, wq1);\n\n    // transitive?\n    assertEquals(wq2, wq3);\n    assertEquals(wq1, wq3);\n\n    assertFalse(wq1.equals(null));\n\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"b*a\"));\n    assertFalse(wq1.equals(fq));\n    assertFalse(fq.equals(wq1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1fb70d5d797131bf722eac86615eae787b5af9ea"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}