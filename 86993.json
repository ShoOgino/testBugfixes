{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,String,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the <a href=\"#version\">Lucene match version</a>\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  @Deprecated\n  public EdgeNGramTokenFilter(Version version, TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(version, input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the <a href=\"#version\">Lucene match version</a>\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    this(version, input, Side.FRONT, minGram, maxGram);\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"523c1863d7ec17e9a5067cef7e233c388f8ab263":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523c1863d7ec17e9a5067cef7e233c388f8ab263"]},"commit2Childs":{"523c1863d7ec17e9a5067cef7e233c388f8ab263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["523c1863d7ec17e9a5067cef7e233c388f8ab263"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}