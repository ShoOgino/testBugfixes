{"path":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","commits":[{"id":"098d1c67a5a161cceee3442c66eada149c77fed0","date":1404388994,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexed(true);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexed(true);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexed(true);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValueType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90de13b766293d1744c908f8c4f754d7bd7f1580","date":1429108933,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(NumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067bb525d2e4993889147c508e2ccb5158f409b1","date":1457385185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#testEquals().mjava","sourceNew":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","sourceOld":"  public void testEquals() throws Exception {\n    FieldType ft = new FieldType();\n    assertEquals(ft, ft);\n    assertFalse(ft.equals(null));\n    \n    FieldType ft2 = new FieldType();\n    assertEquals(ft, ft2);\n    assertEquals(ft.hashCode(), ft2.hashCode());\n    \n    FieldType ft3 = new FieldType();\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    assertFalse(ft3.equals(ft));\n    \n    FieldType ft4 = new FieldType();\n    ft4.setDocValuesType(DocValuesType.BINARY);\n    assertFalse(ft4.equals(ft));\n    \n    FieldType ft5 = new FieldType();\n    ft5.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    assertFalse(ft5.equals(ft));\n    \n    FieldType ft6 = new FieldType();\n    ft6.setStored(true);\n    assertFalse(ft6.equals(ft));\n    \n    FieldType ft7 = new FieldType();\n    ft7.setOmitNorms(true);\n    assertFalse(ft7.equals(ft));\n    \n    FieldType ft8 = new FieldType();\n    ft8.setNumericType(LegacyNumericType.DOUBLE);\n    assertFalse(ft8.equals(ft));\n    \n    FieldType ft9 = new FieldType();\n    ft9.setNumericPrecisionStep(3);\n    assertFalse(ft9.equals(ft));\n    \n    FieldType ft10 = new FieldType();\n    ft10.setStoreTermVectors(true);\n    assertFalse(ft10.equals(ft));\n    \n    FieldType ft11 = new FieldType();\n    ft11.setDimensions(1, 4);\n    assertFalse(ft11.equals(ft));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["067bb525d2e4993889147c508e2ccb5158f409b1","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["067bb525d2e4993889147c508e2ccb5158f409b1"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["067bb525d2e4993889147c508e2ccb5158f409b1","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"90de13b766293d1744c908f8c4f754d7bd7f1580":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"098d1c67a5a161cceee3442c66eada149c77fed0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["90de13b766293d1744c908f8c4f754d7bd7f1580"],"3184874f7f3aca850248483485b4995343066875":["098d1c67a5a161cceee3442c66eada149c77fed0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["067bb525d2e4993889147c508e2ccb5158f409b1","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["098d1c67a5a161cceee3442c66eada149c77fed0","3184874f7f3aca850248483485b4995343066875"],"067bb525d2e4993889147c508e2ccb5158f409b1":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["3184874f7f3aca850248483485b4995343066875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"90de13b766293d1744c908f8c4f754d7bd7f1580":["770342641f7b505eaa8dccdc666158bff2419109"],"098d1c67a5a161cceee3442c66eada149c77fed0":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"770342641f7b505eaa8dccdc666158bff2419109":["067bb525d2e4993889147c508e2ccb5158f409b1"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"067bb525d2e4993889147c508e2ccb5158f409b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098d1c67a5a161cceee3442c66eada149c77fed0"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["90de13b766293d1744c908f8c4f754d7bd7f1580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}