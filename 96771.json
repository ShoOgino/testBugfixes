{"path":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"/dev/null","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testSparseIndex().mjava","sourceNew":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","sourceOld":"  // test using a sparse index (with deleted docs). The DocIdSet should be not cacheable, as it uses TermDocs if the range contains 0\n  public void testSparseIndex() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), T, IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int d = -20; d <= 20; d++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\",Integer.toString(d), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"body\",\"body\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    \n    writer.optimize();\n    writer.deleteDocuments(new Term(\"id\",\"0\"));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexSearcher search = new IndexSearcher(reader);\n    assertTrue(reader.hasDeletions());\n\n    ScoreDoc[] result;\n    FieldCacheRangeFilter fcrf;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 40, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 0),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) 0),T,T), 100).scoreDocs;\n    assertFalse(\"DocIdSet must be not cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 20, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) 10),Byte.valueOf((byte) 20),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newByteRange(\"id\",Byte.valueOf((byte) -20),Byte.valueOf((byte) -10),T,T), 100).scoreDocs;\n    assertTrue(\"DocIdSet must be cacheable\", fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", 11, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}