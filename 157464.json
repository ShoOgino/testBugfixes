{"path":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList document = (NamedList) suggestions.get(\"documemt\");\n    assertTrue(document.get(\"numFound\") + \" is not equal to \" + \"1\", document\n            .get(\"numFound\").toString().equals(\"1\") == true);\n    assertTrue(document.get(\"startOffset\") + \" is not equal to \" + \"0\", document\n            .get(\"startOffset\").toString().equals(\"0\") == true);\n    assertTrue(document.get(\"endOffset\") + \" is not equal to \" + \"documemt\".length(), document\n            .get(\"endOffset\").toString().equals(String.valueOf(\"documemt\".length())) == true);\n    Collection<String> theSuggestion = (Collection<String>) document.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + document,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 1,\n            theSuggestion.size() == 1);\n    assertTrue(theSuggestion.iterator().next() + \" is not equal to \" + \"document\", theSuggestion.iterator().next().equals(\"document\") == true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65a5358ab784aed1eada0d344601b7d994ea64a","date":1252448553,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList document = (NamedList) suggestions.get(\"documemt\");\n    assertEquals(1, document.get(\"numFound\"));\n    assertEquals(0, document.get(\"startOffset\"));\n    assertEquals(document.get(\"endOffset\"), \"documemt\".length());\n    Collection<String> theSuggestion = (Collection<String>) document.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"document\", theSuggestion.iterator().next());\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList document = (NamedList) suggestions.get(\"documemt\");\n    assertTrue(document.get(\"numFound\") + \" is not equal to \" + \"1\", document\n            .get(\"numFound\").toString().equals(\"1\") == true);\n    assertTrue(document.get(\"startOffset\") + \" is not equal to \" + \"0\", document\n            .get(\"startOffset\").toString().equals(\"0\") == true);\n    assertTrue(document.get(\"endOffset\") + \" is not equal to \" + \"documemt\".length(), document\n            .get(\"endOffset\").toString().equals(String.valueOf(\"documemt\".length())) == true);\n    Collection<String> theSuggestion = (Collection<String>) document.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + document,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 1,\n            theSuggestion.size() == 1);\n    assertTrue(theSuggestion.iterator().next() + \" is not equal to \" + \"document\", theSuggestion.iterator().next().equals(\"document\") == true);\n\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList document = (NamedList) suggestions.get(\"documemt\");\n    assertEquals(1, document.get(\"numFound\"));\n    assertEquals(0, document.get(\"startOffset\"));\n    assertEquals(document.get(\"endOffset\"), \"documemt\".length());\n    Collection<String> theSuggestion = (Collection<String>) document.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"document\", theSuggestion.iterator().next());\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"documemt\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList document = (NamedList) suggestions.get(\"documemt\");\n    assertEquals(1, document.get(\"numFound\"));\n    assertEquals(0, document.get(\"startOffset\"));\n    assertEquals(document.get(\"endOffset\"), \"documemt\".length());\n    Collection<String> theSuggestion = (Collection<String>) document.get(\"suggestion\");\n    assertEquals(1, theSuggestion.size());\n    assertEquals(\"document\", theSuggestion.iterator().next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"b65a5358ab784aed1eada0d344601b7d994ea64a":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b65a5358ab784aed1eada0d344601b7d994ea64a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}