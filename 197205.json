{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDeleteDocWhileMergeThatIsSoftDeleted().mjava","commits":[{"id":"36d84416fc00253f9e834f8dba14fa89b298e64e","date":1525428963,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDeleteDocWhileMergeThatIsSoftDeleted().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * This test is trying to hard-delete a particular document while the segment is merged which is already soft-deleted\n   * This requires special logic inside IndexWriter#carryOverHardDeletes since docMaps are not created for this document.\n   */\n  public void testDeleteDocWhileMergeThatIsSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    AtomicBoolean delete = new AtomicBoolean(true);\n    config.setReaderPooling(true);\n    config.setMergePolicy(new LogDocMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.addDocument(d);\n    if (random().nextBoolean()) {\n      // randomly run with a preexisting hard delete\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n\n    writer.flush();\n    DirectoryReader reader = writer.getReader();\n    writer.softUpdateDocument(new Term(\"id\", \"0\"), new Document(),\n        new NumericDocValuesField(softDelete, 1));\n    writer.flush();\n    writer.getConfig().setMergedSegmentWarmer(sr -> {\n      if (delete.compareAndSet(true, false)) {\n        try {\n          long seqNo = writer.tryDeleteDocument(reader, 0);\n          assertTrue(\"seqId was -1\", seqNo !=  -1);\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      }\n    });\n    writer.forceMerge(1);\n    assertEquals(2, writer.numDocs());\n    assertEquals(2, writer.maxDoc());\n    assertFalse(delete.get());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDeleteDocWhileMergeThatIsSoftDeleted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testDeleteDocWhileMergeThatIsSoftDeleted().mjava","sourceNew":"  /*\n   * This test is trying to hard-delete a particular document while the segment is merged which is already soft-deleted\n   * This requires special logic inside IndexWriter#carryOverHardDeletes since docMaps are not created for this document.\n   */\n  public void testDeleteDocWhileMergeThatIsSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    AtomicBoolean delete = new AtomicBoolean(true);\n    config.setReaderPooling(true);\n    config.setMergePolicy(new LogDocMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.addDocument(d);\n    if (random().nextBoolean()) {\n      // randomly run with a preexisting hard delete\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n\n    writer.flush();\n    DirectoryReader reader = writer.getReader();\n    writer.softUpdateDocument(new Term(\"id\", \"0\"), new Document(),\n        new NumericDocValuesField(softDelete, 1));\n    writer.flush();\n    writer.getConfig().setMergedSegmentWarmer(sr -> {\n      if (delete.compareAndSet(true, false)) {\n        try {\n          long seqNo = writer.tryDeleteDocument(reader, 0);\n          assertTrue(\"seqId was -1\", seqNo !=  -1);\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      }\n    });\n    writer.forceMerge(1);\n    assertEquals(2, writer.getDocStats().numDocs);\n    assertEquals(2, writer.getDocStats().maxDoc);\n    assertFalse(delete.get());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  /*\n   * This test is trying to hard-delete a particular document while the segment is merged which is already soft-deleted\n   * This requires special logic inside IndexWriter#carryOverHardDeletes since docMaps are not created for this document.\n   */\n  public void testDeleteDocWhileMergeThatIsSoftDeleted() throws IOException {\n    Directory dir = newDirectory();\n    String softDelete = \"soft_delete\";\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(softDelete);\n    AtomicBoolean delete = new AtomicBoolean(true);\n    config.setReaderPooling(true);\n    config.setMergePolicy(new LogDocMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, config);\n    Document d = new Document();\n    d.add(new StringField(\"id\", \"0\", Field.Store.YES));\n    writer.addDocument(d);\n    d = new Document();\n    d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.addDocument(d);\n    if (random().nextBoolean()) {\n      // randomly run with a preexisting hard delete\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n\n    writer.flush();\n    DirectoryReader reader = writer.getReader();\n    writer.softUpdateDocument(new Term(\"id\", \"0\"), new Document(),\n        new NumericDocValuesField(softDelete, 1));\n    writer.flush();\n    writer.getConfig().setMergedSegmentWarmer(sr -> {\n      if (delete.compareAndSet(true, false)) {\n        try {\n          long seqNo = writer.tryDeleteDocument(reader, 0);\n          assertTrue(\"seqId was -1\", seqNo !=  -1);\n        } catch (IOException e) {\n          throw new AssertionError(e);\n        }\n      }\n    });\n    writer.forceMerge(1);\n    assertEquals(2, writer.numDocs());\n    assertEquals(2, writer.maxDoc());\n    assertFalse(delete.get());\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["36d84416fc00253f9e834f8dba14fa89b298e64e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36d84416fc00253f9e834f8dba14fa89b298e64e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}