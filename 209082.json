{"path":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"src/test/org/apache/solr/util/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e","date":1212696628,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}