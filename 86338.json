{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63961b0a0b1541623ed4c74d8cb088c35b32470f","date":1399929609,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50797e91b785acaa004dda010e7afa3226b02822","date":1400613508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    AtomicReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlySegmentReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new StringField(\"field\", \"world\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(new StringField(\"field\", \"hello\", Field.Store.NO));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"field\", \"beer\", Field.Store.NO));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    LeafReader ar = getOnlyLeafReader(ireader);\n    SortedSetDocValues dv = FieldCache.DEFAULT.getDocTermOrds(ar, \"field\", null);\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n    \n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // lookupTerm(BytesRef) \n    assertEquals(-1, dv.lookupTerm(new BytesRef(\"apple\")));\n    assertEquals(0, dv.lookupTerm(new BytesRef(\"beer\")));\n    assertEquals(-2, dv.lookupTerm(new BytesRef(\"car\")));\n    assertEquals(1, dv.lookupTerm(new BytesRef(\"hello\")));\n    assertEquals(-3, dv.lookupTerm(new BytesRef(\"matter\")));\n    assertEquals(2, dv.lookupTerm(new BytesRef(\"world\")));\n    assertEquals(-4, dv.lookupTerm(new BytesRef(\"zany\")));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["50797e91b785acaa004dda010e7afa3226b02822"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"b7605579001505896d48b07160075a5c8b8e128e":["56572ec06f1407c066d6b7399413178b33176cd8","50797e91b785acaa004dda010e7afa3226b02822"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63961b0a0b1541623ed4c74d8cb088c35b32470f"],"50797e91b785acaa004dda010e7afa3226b02822":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"56572ec06f1407c066d6b7399413178b33176cd8":["b7605579001505896d48b07160075a5c8b8e128e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["63961b0a0b1541623ed4c74d8cb088c35b32470f"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","50797e91b785acaa004dda010e7afa3226b02822"],"50797e91b785acaa004dda010e7afa3226b02822":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}