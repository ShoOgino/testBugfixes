{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYShape#testBasicIntersects().mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYShape#testBasicIntersects().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    XYPolygon p = ShapeTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    float x[] = new float[p.numPoints() - 1];\n    float y[] = new float[p.numPoints() - 1];\n    for (int i = 0; i < x.length; ++i) {\n      x[i] = (float)p.getPolyX(i);\n      y[i] = (float)p.getPolyY(i);\n    }\n    XYLine l = new XYLine(x, y);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minX = Math.min(x[0], x[1]);\n    double minY = Math.min(y[0], y[1]);\n    double maxX = Math.max(x[0], x[1]);\n    double maxY = Math.max(y[0], y[1]);\n    Query q = newRectQuery(FIELDNAME, minX, maxX, minY, maxY);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minX-1d, p.minX+1, p.minY-1d, p.minY+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search w/ an intersecting polygon\n    q = XYShape.newPolygonQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYPolygon(\n        new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX, (float)minX},\n        new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    // search w/ an intersecting line\n    q = XYShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYLine(\n       new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX},\n       new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    XYPolygon p = ShapeTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    float x[] = new float[p.numPoints() - 1];\n    float y[] = new float[p.numPoints() - 1];\n    for (int i = 0; i < x.length; ++i) {\n      x[i] = (float)p.getPolyX(i);\n      y[i] = (float)p.getPolyY(i);\n    }\n    XYLine l = new XYLine(x, y);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minX = Math.min(x[0], x[1]);\n    double minY = Math.min(y[0], y[1]);\n    double maxX = Math.max(x[0], x[1]);\n    double maxY = Math.max(y[0], y[1]);\n    Query q = newRectQuery(FIELDNAME, minX, maxX, minY, maxY);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minX-1d, p.minX+1, p.minY-1d, p.minY+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search w/ an intersecting polygon\n    q = XYShape.newPolygonQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYPolygon(\n        new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX, (float)minX},\n        new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    // search w/ an intersecting line\n    q = XYShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYLine(\n       new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX},\n       new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    XYPolygon p = ShapeTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    float x[] = new float[p.numPoints() - 1];\n    float y[] = new float[p.numPoints() - 1];\n    for (int i = 0; i < x.length; ++i) {\n      x[i] = (float)p.getPolyX(i);\n      y[i] = (float)p.getPolyY(i);\n    }\n    XYLine l = new XYLine(x, y);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minX = Math.min(x[0], x[1]);\n    double minY = Math.min(y[0], y[1]);\n    double maxX = Math.max(x[0], x[1]);\n    double maxY = Math.max(y[0], y[1]);\n    Query q = newRectQuery(FIELDNAME, minX, maxX, minY, maxY);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minX-1d, p.minX+1, p.minY-1d, p.minY+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search w/ an intersecting polygon\n    q = XYShape.newPolygonQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYPolygon(\n        new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX, (float)minX},\n        new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    // search w/ an intersecting line\n    q = XYShape.newLineQuery(FIELDNAME, QueryRelation.INTERSECTS, new XYLine(\n       new float[] {(float)minX, (float)minX, (float)maxX, (float)maxX},\n       new float[] {(float)minY, (float)maxY, (float)maxY, (float)minY}\n    ));\n    assertEquals(2, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}