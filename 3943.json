{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParserTest#testParsing().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParserTest#testParsing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParsing() throws Exception{\n    StreamExpression actual, expected;\n        \n    actual = StreamExpressionParser.parse(\"aliases(a_i=alias.a_i)\");\n    expected = new StreamExpression(\"aliases\")\n                    .withParameter(new StreamExpressionNamedParameter(\"a_i\", \"alias.a_i\"));\n    assertEquals(expected,actual);\n    \n    actual = StreamExpressionParser.parse(\"search(a,b)\");\n    expected = new StreamExpression(\"search\").withParameter(\"a\").withParameter(\"b\");\n    assertEquals(expected, actual);\n\n    actual = StreamExpressionParser.parse(\"search(collection1, q=*:*, sort=\\\"fieldA desc, fieldB asc, fieldC asc\\\")\");\n    expected = new StreamExpression(\"search\")\n                    .withParameter(new StreamExpressionValue(\"collection1\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"q\").withParameter(\"*:*\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"sort\").withParameter(\"fieldA desc, fieldB asc, fieldC asc\"));\n    assertEquals(expected,actual);\n    \n    actual = StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, sort=\\\"fieldA desc, fieldB asc, fieldC asc\\\"))\");\n    expected = new StreamExpression(\"unique\")\n                .withParameter(new StreamExpression(\"search\")\n                    .withParameter(new StreamExpressionValue(\"collection1\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"q\").withParameter(\"*:*\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"sort\").withParameter(\"fieldA desc, fieldB asc, fieldC asc\"))\n                );\n    assertEquals(expected,actual);\n    \n    actual = StreamExpressionParser.parse(\"unique(search(collection1, q=*:*, sort=\\\"fieldA desc, fieldB asc, fieldC asc\\\"), alt=search(collection1, foo=bar))\");\n    expected = new StreamExpression(\"unique\")\n                .withParameter(new StreamExpression(\"search\")\n                    .withParameter(new StreamExpressionValue(\"collection1\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"q\").withParameter(\"*:*\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"sort\").withParameter(\"fieldA desc, fieldB asc, fieldC asc\")))\n                .withParameter(new StreamExpressionNamedParameter(\"alt\")\n                    .withParameter(new StreamExpression(\"search\")\n                      .withParameter(\"collection1\")\n                      .withParameter(new StreamExpressionNamedParameter(\"foo\")\n                        .withParameter(\"bar\"))));\n    assertEquals(expected,actual);\n    \n    actual = StreamExpressionParser.parse(\"innerJoin(\"\n                                + \"left=search(collection1, q=*:*, fl=\\\"fieldA,fieldB,fieldC\\\", sort=\\\"fieldA asc, fieldB asc\\\"),\"\n                                + \"right=search(collection2, q=*:*, fl=\\\"fieldA,fieldD\\\", sort=fieldA asc),\"\n                                + \"on(equals(fieldA), notEquals(fieldC,fieldD))\"\n                                + \")\");\n    expected = new StreamExpression(\"innerJoin\")\n                .withParameter(new StreamExpressionNamedParameter(\"left\")\n                  .withParameter(new StreamExpression(\"search\")\n                    .withParameter(\"collection1\")\n                    .withParameter(new StreamExpressionNamedParameter(\"q\",\"*:*\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"fl\",\"fieldA,fieldB,fieldC\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"sort\",\"fieldA asc, fieldB asc\"))))\n                .withParameter(new StreamExpressionNamedParameter(\"right\")\n                  .withParameter(new StreamExpression(\"search\")\n                    .withParameter(\"collection2\")\n                    .withParameter(new StreamExpressionNamedParameter(\"q\",\"*:*\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"fl\",\"fieldA,fieldD\"))\n                    .withParameter(new StreamExpressionNamedParameter(\"sort\",\"fieldA asc\"))))\n                .withParameter(new StreamExpression(\"on\")\n                  .withParameter(new StreamExpression(\"equals\").withParameter(\"fieldA\"))\n                  .withParameter(new StreamExpression(\"notEquals\").withParameter(\"fieldC\").withParameter(\"fieldD\")));\n    assertEquals(expected,actual);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}