{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      writeHeader(out);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      writeHeader(out);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","date":1412165020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      writeHeader(out);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      writeHeader(out);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState,int).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state, int termIndexInterval) throws IOException {\n    if (termIndexInterval <= 0) {\n      throw new IllegalArgumentException(\"invalid termIndexInterval: \" + termIndexInterval);\n    }\n    this.termIndexInterval = termIndexInterval;\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeVInt(termIndexInterval);\n      out.writeVInt(PackedInts.VERSION_CURRENT);\n      out.writeVInt(BLOCKSIZE);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a45bec74b98f6fc05f52770cfb425739e6563960","e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"a45bec74b98f6fc05f52770cfb425739e6563960":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}