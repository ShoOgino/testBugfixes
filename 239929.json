{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","commits":[{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seek(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seek(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seek(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seek(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seek(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a53a291ad9b1cc050d846b68758c061a55d52734":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"2553b00f699380c64959ccb27991289aae87be2e":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","a53a291ad9b1cc050d846b68758c061a55d52734","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}