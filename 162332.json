{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","commits":[{"id":"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","date":1337196931,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(DocumentsWriterFlushControl).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(DocumentsWriterFlushControl flushControl) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (flushControl.netBytes() > flushControl.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","date":1337674113,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      final long netBytes = controller.netBytes();\n      final long flushBytes = controller.flushBytes();\n      final long limit = controller.stallLimitBytes();\n      assert netBytes >= flushBytes;\n      assert limit > 0;\n      /*\n       * we block indexing threads if net byte grows due to slow flushes\n       * yet, for small ram buffers and large documents we can easily\n       * reach the limit without any ongoing flushes. we need to ensure\n       * that we don't stall/block if an ongoing or pending flush can \n       * not free up enough memory to release the stall lock.\n       */\n      while (netBytes > limit && (netBytes - flushBytes) < limit) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":["32f306edd62f81390a6e263e8b913f089f3e98a1","f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","sourceNew":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      final long netBytes = controller.netBytes();\n      final long flushBytes = controller.flushBytes();\n      final long limit = controller.stallLimitBytes();\n      assert netBytes >= flushBytes;\n      assert limit > 0;\n      /*\n       * we block indexing threads if net byte grows due to slow flushes\n       * yet, for small ram buffers and large documents we can easily\n       * reach the limit without any ongoing flushes. we need to ensure\n       * that we don't stall/block if an ongoing or pending flush can \n       * not free up enough memory to release the stall lock.\n       */\n      while (netBytes > limit && (netBytes - flushBytes) < limit) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      // if we have more flushing / blocked DWPT than numActiveDWPT we stall!\n      // don't stall if we have queued flushes - threads should be hijacked instead\n      while (controller.netBytes() > controller.stallLimitBytes()) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","sourceNew":null,"sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      final long netBytes = controller.netBytes();\n      final long flushBytes = controller.flushBytes();\n      final long limit = controller.stallLimitBytes();\n      assert netBytes >= flushBytes;\n      assert limit > 0;\n      /*\n       * we block indexing threads if net byte grows due to slow flushes\n       * yet, for small ram buffers and large documents we can easily\n       * reach the limit without any ongoing flushes. we need to ensure\n       * that we don't stall/block if an ongoing or pending flush can \n       * not free up enough memory to release the stall lock.\n       */\n      while (netBytes > limit && (netBytes - flushBytes) < limit) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterStallControl#updateStalled(MemoryController).mjava","sourceNew":null,"sourceOld":"  /**\n   * Update the stalled flag status. This method will set the stalled flag to\n   * <code>true</code> iff the number of flushing\n   * {@link DocumentsWriterPerThread} is greater than the number of active\n   * {@link DocumentsWriterPerThread}. Otherwise it will reset the\n   * {@link DocumentsWriterStallControl} to healthy and release all threads waiting on\n   * {@link #waitIfStalled()}\n   */\n  void updateStalled(MemoryController controller) {\n    do {\n      final long netBytes = controller.netBytes();\n      final long flushBytes = controller.flushBytes();\n      final long limit = controller.stallLimitBytes();\n      assert netBytes >= flushBytes;\n      assert limit > 0;\n      /*\n       * we block indexing threads if net byte grows due to slow flushes\n       * yet, for small ram buffers and large documents we can easily\n       * reach the limit without any ongoing flushes. we need to ensure\n       * that we don't stall/block if an ongoing or pending flush can \n       * not free up enough memory to release the stall lock.\n       */\n      while (netBytes > limit && (netBytes - flushBytes) < limit) {\n        if (sync.trySetStalled()) {\n          assert wasStalled = true;\n          return;\n        }\n      }\n    } while (!sync.tryReset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e38f40562eb7c165ae08ab2367a031883138354":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","5e38f40562eb7c165ae08ab2367a031883138354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["ef0d8a69209261514c5739c770bba706c2308450","7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e38f40562eb7c165ae08ab2367a031883138354"]},"commit2Childs":{"5e38f40562eb7c165ae08ab2367a031883138354":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","ef0d8a69209261514c5739c770bba706c2308450"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424","3599646b4d4c346cf74d334813488b8b337b5bf5"],"ef0d8a69209261514c5739c770bba706c2308450":["3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}