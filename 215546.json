{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, categoryListParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, categoryListParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","sourceNew":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","sourceOld":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, categoryListParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","sourceNew":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","sourceOld":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, categoryListParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/CountingListBuilder.PerPartitionOrdinalsEncoder#encode(IntsRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public HashMap<String,BytesRef> encode(IntsRef ordinals) {\n      // build the partitionOrdinals map\n      final HashMap<String,IntsRef> partitionOrdinals = new HashMap<String,IntsRef>();\n      for (int i = 0; i < ordinals.length; i++) {\n        int ordinal = ordinals.ints[i];\n        final String name = PartitionsUtils.partitionNameByOrdinal(indexingParams, ordinal);\n        IntsRef partitionOrds = partitionOrdinals.get(name);\n        if (partitionOrds == null) {\n          partitionOrds = new IntsRef(32);\n          partitionOrdinals.put(name, partitionOrds);\n          partitionEncoder.put(name, categoryListParams.createEncoder());\n        }\n        partitionOrds.ints[partitionOrds.length++] = ordinal % partitionSize;\n      }\n      \n      HashMap<String,BytesRef> partitionBytes = new HashMap<String,BytesRef>();\n      for (Entry<String,IntsRef> e : partitionOrdinals.entrySet()) {\n        String name = e.getKey();\n        final IntEncoder encoder = partitionEncoder.get(name);\n        final BytesRef bytes = new BytesRef(128); // should be enough for most common applications        \n        encoder.encode(e.getValue(), bytes);\n        partitionBytes.put(name, bytes);\n      }\n      return partitionBytes;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","d33e19a97046248623a7591aeaa6547233fd15e2"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d33e19a97046248623a7591aeaa6547233fd15e2","c4015cd39dff8d4dec562d909f9766debac53aa6","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}