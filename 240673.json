{"path":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","commits":[{"id":"6c7ac188e4a03a976c95993dc3cd292df966faa4","date":1365151572,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS_ONLY;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (LOG.isTraceEnabled())\n        LOG.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#createFieldType(SchemaField).mjava","sourceNew":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","sourceOld":"  /**\n   * Utility method to create a {@link org.apache.lucene.document.FieldType}\n   * based on the {@link SchemaField}\n   */\n  public static org.apache.lucene.document.FieldType createFieldType(SchemaField field) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    IndexOptions options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    if (field.omitTermFreqAndPositions()) {\n      options = IndexOptions.DOCS;\n    } else if (field.omitPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS;\n    } else if (field.storeOffsetsWithPositions()) {\n      options = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    newType.setIndexOptions(options);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2bb2842e561df4e8e9ad89010605fc86ac265465","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["6c7ac188e4a03a976c95993dc3cd292df966faa4","3184874f7f3aca850248483485b4995343066875"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3184874f7f3aca850248483485b4995343066875":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}