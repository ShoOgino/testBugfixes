{"path":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","commits":[{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/DocValues#setCache(SourceCache).mjava","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} or\n   * {@link #loadSorted(Comparator)} is called. All {@link Source} or\n   * {@link SortedSource} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} or\n   * {@link #loadSorted(Comparator)} will be closed.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (this.cache) {\n      this.cache.close(this);\n      this.cache = cache;\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link SourceCache} used by this {@link DocValues} instance. This\n   * method should be called before {@link #load()} or\n   * {@link #loadSorted(Comparator)} is called. All {@link Source} or\n   * {@link SortedSource} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} or\n   * {@link #loadSorted(Comparator)} will be closed.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (this.cache) {\n      this.cache.close(this);\n      this.cache = cache;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} or\n   * {@link #loadSorted(Comparator)} is called. All {@link Source} or\n   * {@link SortedSource} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} or\n   * {@link #loadSorted(Comparator)} will be closed.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (this.cache) {\n      this.cache.close(this);\n      this.cache = cache;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} or\n   * {@link #loadSorted(Comparator)} is called. All {@link Source} or\n   * {@link SortedSource} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} or\n   * {@link #loadSorted(Comparator)} will be closed.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (this.cache) {\n      this.cache.close(this);\n      this.cache = cache;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} is called. All {@link Source} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} will be lost.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (cacheLock) {\n      SourceCache toClose = this.cache;\n      this.cache = cache;\n      toClose.close(this);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} or\n   * {@link #loadSorted(Comparator)} is called. All {@link Source} or\n   * {@link SortedSource} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} or\n   * {@link #loadSorted(Comparator)} will be closed.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (this.cache) {\n      this.cache.close(this);\n      this.cache = cache;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocValues#setCache(SourceCache).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link DocValues} instance. This\n   * method should be called before {@link #load()} is called. All {@link Source} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} will be lost.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (cacheLock) {\n      SourceCache toClose = this.cache;\n      this.cache = cache;\n      toClose.close(this);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} is called. All {@link Source} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} will be lost.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (cacheLock) {\n      SourceCache toClose = this.cache;\n      this.cache = cache;\n      toClose.close(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocValues#setCache(SourceCache).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IndexDocValues#setCache(SourceCache).mjava","sourceNew":"  /**\n   * Sets the {@link SourceCache} used by this {@link DocValues} instance. This\n   * method should be called before {@link #load()} is called. All {@link Source} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} will be lost.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (cacheLock) {\n      SourceCache toClose = this.cache;\n      this.cache = cache;\n      toClose.close(this);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link SourceCache} used by this {@link IndexDocValues} instance. This\n   * method should be called before {@link #load()} is called. All {@link Source} instances in the currently used cache will be closed\n   * before the new cache is installed.\n   * <p>\n   * Note: All instances previously obtained from {@link #load()} will be lost.\n   * \n   * @throws IllegalArgumentException\n   *           if the given cache is <code>null</code>\n   * \n   */\n  public void setCache(SourceCache cache) {\n    if (cache == null)\n      throw new IllegalArgumentException(\"cache must not be null\");\n    synchronized (cacheLock) {\n      SourceCache toClose = this.cache;\n      this.cache = cache;\n      toClose.close(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}