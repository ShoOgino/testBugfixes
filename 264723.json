{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            @Override\n            public void seek(long pos) {}\n            @Override\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            @Override\n            public void seek(long pos) {}\n            @Override\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            @Override\n            public void seek(long pos) {}\n            @Override\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) {\n          return new BlockReader() {\n            @Override\n            public void seek(long pos) {}\n            @Override\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7530de27b87b961b51f01bd1299b7004d46e8823","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}