{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedEmptyAliasDictionary().mjava","commits":[{"id":"6d4fb2cc011096cc0cff79f0adcf03dc734b9352","date":1394386069,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedEmptyAliasDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompressedEmptyAliasDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed-empty-alias.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedEmptyAliasDictionary().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompressedEmptyAliasDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed-empty-alias.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedEmptyAliasDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedEmptyAliasDictionary().mjava","sourceNew":"  public void testCompressedEmptyAliasDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed-empty-alias.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n    Directory tempDir = getDirectory();\n\n    Dictionary dictionary = new Dictionary(tempDir, \"dictionary\", affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testCompressedEmptyAliasDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed-empty-alias.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"6d4fb2cc011096cc0cff79f0adcf03dc734b9352":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"6d4fb2cc011096cc0cff79f0adcf03dc734b9352":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}