{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    \n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c70567cc1ae757045c80cb458b0b2a2ffcf0141","date":1400098332,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    \n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    \n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c218ef5584c663e78bdaf8391f826546f5bc73c1","date":1401196755,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields it's own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores); \n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, true);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores, true); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate \n   * {@link TopDocsCollector}\n   *\n   * @param len the number of docs to return\n   * @param cmd The Command whose properties should determine the type of \n   *        TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if(q instanceof RankQuery) {\n      RankQuery rq = (RankQuery)q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter,\n                                      fillFields, needScores, needScores); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, needScores, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, needScores, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      // :TODO: make fillFields its own QueryCommand flag? ...\n      // ... see comments in populateNextCursorMarkFromTopDocs for cache issues (SOLR-5595)\n      final boolean fillFields = (null != cursor);\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, fillFields, needScores, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, needScores, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, Integer.MAX_VALUE);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, Integer.MAX_VALUE);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactHits();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, Integer.MAX_VALUE);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, Integer.MAX_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8ad6d99eb2424679c78255c369b8fac243e7dd","date":1590104557,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactCount();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactHits();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72afa881b0b5c361ebd0b6d37927fe072151fbe0","date":1590107364,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactCount();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactHits();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildTopDocsCollector(int,QueryCommand).mjava","sourceNew":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactCount();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method for inspecting QueryCommand and creating the appropriate {@link TopDocsCollector}\n   *\n   * @param len\n   *          the number of docs to return\n   * @param cmd\n   *          The Command whose properties should determine the type of TopDocsCollector to use.\n   */\n  private TopDocsCollector buildTopDocsCollector(int len, QueryCommand cmd) throws IOException {\n    int minNumFound = cmd.getMinExactCount();\n    Query q = cmd.getQuery();\n    if (q instanceof RankQuery) {\n      RankQuery rq = (RankQuery) q;\n      return rq.getTopDocsCollector(len, cmd, this);\n    }\n\n    if (null == cmd.getSort()) {\n      assert null == cmd.getCursorMark() : \"have cursor but no sort\";\n      return TopScoreDocCollector.create(len, minNumFound);\n    } else {\n      // we have a sort\n      final Sort weightedSort = weightSort(cmd.getSort());\n      final CursorMark cursor = cmd.getCursorMark();\n\n      final FieldDoc searchAfter = (null != cursor ? cursor.getSearchAfterFieldDoc() : null);\n      return TopFieldCollector.create(weightedSort, len, searchAfter, minNumFound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"6c70567cc1ae757045c80cb458b0b2a2ffcf0141":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"404d1ab7f6f396235047017c88d545fec15dafb7":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c218ef5584c663e78bdaf8391f826546f5bc73c1":["6c70567cc1ae757045c80cb458b0b2a2ffcf0141"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["640ded7811e1b7d29236a5e2934ec3cd266a8199","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","6c70567cc1ae757045c80cb458b0b2a2ffcf0141"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","404d1ab7f6f396235047017c88d545fec15dafb7"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c218ef5584c663e78bdaf8391f826546f5bc73c1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["72afa881b0b5c361ebd0b6d37927fe072151fbe0","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"6c70567cc1ae757045c80cb458b0b2a2ffcf0141":["c218ef5584c663e78bdaf8391f826546f5bc73c1","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"c218ef5584c663e78bdaf8391f826546f5bc73c1":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6c70567cc1ae757045c80cb458b0b2a2ffcf0141","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["404d1ab7f6f396235047017c88d545fec15dafb7","1aad05eeff7818b0833c02ac6b743aa72054963b"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ccc69a67d5c846a04c7f71e28cb1914e3af895f3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}