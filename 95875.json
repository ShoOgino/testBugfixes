{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long).mjava","commits":[{"id":"29372a57b7e46d222a80429ad6b96413b7319eea","date":1390584196,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long).mjava","pathOld":"/dev/null","sourceNew":"  protected void compareResults(long controlDocs, long cloudClientDocs)\n      throws SolrServerException {\n    SolrParams q;\n    SolrDocumentList controlDocList;\n    SolrDocumentList cloudDocList;\n    // re-execute the query getting ids\n    q = params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    Set<Map> differences = showDiff(controlDocList, cloudDocList,\"controlDocList\",\"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02c6a0e240c698414e7728a55f07361be84852d8","date":1392675457,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long).mjava","sourceNew":"  protected boolean compareResults(long controlDocs, long cloudClientDocs)\n      throws SolrServerException {\n    return compareResults(controlDocs, cloudClientDocs, null, null);\n  }\n\n","sourceOld":"  protected void compareResults(long controlDocs, long cloudClientDocs)\n      throws SolrServerException {\n    SolrParams q;\n    SolrDocumentList controlDocList;\n    SolrDocumentList cloudDocList;\n    // re-execute the query getting ids\n    q = params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    Set<Map> differences = showDiff(controlDocList, cloudDocList,\"controlDocList\",\"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4339eef0c1b12030c8590187e652cd1cd0a1f3cb","date":1397833225,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long).mjava","sourceNew":null,"sourceOld":"  protected boolean compareResults(long controlDocs, long cloudClientDocs)\n      throws SolrServerException {\n    return compareResults(controlDocs, cloudClientDocs, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29372a57b7e46d222a80429ad6b96413b7319eea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["02c6a0e240c698414e7728a55f07361be84852d8"],"02c6a0e240c698414e7728a55f07361be84852d8":["29372a57b7e46d222a80429ad6b96413b7319eea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"]},"commit2Childs":{"29372a57b7e46d222a80429ad6b96413b7319eea":["02c6a0e240c698414e7728a55f07361be84852d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29372a57b7e46d222a80429ad6b96413b7319eea"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02c6a0e240c698414e7728a55f07361be84852d8":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}