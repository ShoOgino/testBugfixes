{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = Math.abs(random().nextInt());\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n      assertTrue(suggest.totalHits > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      long weight = Math.abs(random().nextLong());\n      document.add(newSuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n    for (String prefix : prefixes) {\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", prefix, num);\n      assertTrue(suggest.totalHits > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n      assertTrue(suggest.totalHits > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = Math.abs(random().nextInt());\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n      assertTrue(suggest.totalHits > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n      assertTrue(suggest.totalHits.value > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n      assertTrue(suggest.totalHits > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testScoring().mjava","sourceNew":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(50));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n      assertTrue(suggest.totalHits.value > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n\n    int num = Math.min(1000, atLeast(100));\n    String[] prefixes = {\"abc\", \"bac\", \"cab\"};\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      String suggest = prefixes[i % 3] + TestUtil.randomSimpleString(random(), 10) + \"_\" +String.valueOf(i);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      document.add(new SuggestField(\"suggest_field\", suggest, weight));\n      mappings.put(suggest, weight);\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    for (String prefix : prefixes) {\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", prefix));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n      assertTrue(suggest.totalHits.value > 0);\n      float topScore = -1;\n      for (SuggestScoreDoc scoreDoc : suggest.scoreLookupDocs()) {\n        if (topScore != -1) {\n          assertTrue(topScore >= scoreDoc.score);\n        }\n        topScore = scoreDoc.score;\n        assertThat((float) mappings.get(scoreDoc.key.toString()), equalTo(scoreDoc.score));\n        assertNotNull(mappings.remove(scoreDoc.key.toString()));\n      }\n    }\n\n    assertThat(mappings.size(), equalTo(0));\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}