{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","commits":[{"id":"da249b441376287ae32d1604bc7b50b35b351d09","date":1187478914,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Make sure we get a friendly exception for a wicked\n     * long term.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16384];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      String contents = \"a b c \" + new String(chars);\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IllegalArgumentException e) {\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a251aa47d1808cbae42c0e172d698c377430e60","5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"741a5cca05cabe1e7482410a29e563a08379251a","date":1196676550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we get a friendly exception for a wicked\n     * long term.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm;\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IllegalArgumentException e) {\n      }\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      writer  = new IndexWriter(dir, new StandardAnalyzer());\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we get a friendly exception for a wicked\n     * long term.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16384];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      String contents = \"a b c \" + new String(chars);\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IllegalArgumentException e) {\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["5a251aa47d1808cbae42c0e172d698c377430e60","5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      writer  = new IndexWriter(dir, new StandardAnalyzer());\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we get a friendly exception for a wicked\n     * long term.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm;\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IllegalArgumentException e) {\n      }\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      writer  = new IndexWriter(dir, new StandardAnalyzer());\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":["741a5cca05cabe1e7482410a29e563a08379251a","da249b441376287ae32d1604bc7b50b35b351d09"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5b54d19e4682ef2b08bd06f76c13a4c8d785386","date":1199633864,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      writer  = new IndexWriter(dir, new StandardAnalyzer());\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[16383];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.TOKENIZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void xxxtestWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void xxxtestWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(sa));\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(sa));\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, sa));\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, sa));\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer(TEST_VERSION_CURRENT);\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, sa));\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"da249b441376287ae32d1604bc7b50b35b351d09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"741a5cca05cabe1e7482410a29e563a08379251a":["da249b441376287ae32d1604bc7b50b35b351d09"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["741a5cca05cabe1e7482410a29e563a08379251a"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"5350389bf83287111f7760b9e3db3af8e3648474":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["5a251aa47d1808cbae42c0e172d698c377430e60"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"da249b441376287ae32d1604bc7b50b35b351d09":["741a5cca05cabe1e7482410a29e563a08379251a"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5350389bf83287111f7760b9e3db3af8e3648474"],"741a5cca05cabe1e7482410a29e563a08379251a":["5a251aa47d1808cbae42c0e172d698c377430e60"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da249b441376287ae32d1604bc7b50b35b351d09"],"5a251aa47d1808cbae42c0e172d698c377430e60":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}