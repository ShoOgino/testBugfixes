{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS#matchJSON(String,String...).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS#matchJSON(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public static void matchJSON(String response, String... tests) throws Exception {\n    boolean failed = false;\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, test, JSONTestUtil.DEFAULT_DELTA);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS#matchJSON(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public static void matchJSON(String response, String... tests) throws Exception {\n    boolean failed = false;\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, test, JSONTestUtil.DEFAULT_DELTA);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS#matchJSON(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS#matchJSON(String,String...).mjava","sourceNew":"  public static void matchJSON(String response, String... tests) throws Exception {\n    boolean failed = false;\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, test, JSONTestUtil.DEFAULT_DELTA);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error={}\\n expected ={}\\n response = {}\"\n              , err, test, response\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\\n expected ={}\\n response = {}\"\n                  , test, response\n          );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void matchJSON(String response, String... tests) throws Exception {\n    boolean failed = false;\n\n    for (String test : tests) {\n      if (test == null || test.length()==0) continue;\n\n      try {\n        failed = true;\n        String err = JSONTestUtil.match(response, test, JSONTestUtil.DEFAULT_DELTA);\n        failed = false;\n        if (err != null) {\n          log.error(\"query failed JSON validation. error=\" + err +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n          throw new RuntimeException(err);\n        }\n      } finally {\n        if (failed) {\n          log.error(\"JSON query validation threw an exception.\" +\n                  \"\\n expected =\" + test +\n                  \"\\n response = \" + response\n          );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}