{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","commits":[{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testMissingValues().mjava","sourceNew":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector sfc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), sfc);\n    Facets facets = new RangeFacetCounts(\"field\", sfc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector sfc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), sfc);\n    Facets facets = new RangeFacetCounts(\"field\", sfc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e","date":1385900513,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","sourceNew":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector sfc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), sfc);\n    Facets facets = new RangeFacetCounts(\"field\", sfc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","sourceNew":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"dim=field path=[] value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30","date":1387399235,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","sourceNew":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"dim=field path=[] value=100 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMissingValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMissingValues().mjava","sourceNew":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  // LUCENE-5178\n  public void testMissingValues() throws Exception {\n    assumeTrue(\"codec does not support docsWithField\", defaultCodecSupportsDocsWithField());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      if (l % 5 == 0) {\n        // Every 5th doc is missing the value:\n        w.addDocument(new Document());\n        continue;\n      }\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    Facets facets = new LongRangeFacetCounts(\"field\", fc,\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    \n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (8)\\n  less than or equal to 10 (8)\\n  over 90 (8)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n\n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30"],"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e":["78522aad83283ca58fae08fd89406b65429d0229"],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"78522aad83283ca58fae08fd89406b65429d0229":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78522aad83283ca58fae08fd89406b65429d0229","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"78522aad83283ca58fae08fd89406b65429d0229":["bd3ed8c8fa2a4b995f5dfca3f00e5ce80161de0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}