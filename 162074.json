{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext]).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],SpanCollectorFactory).mjava","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @param collectorFactory a SpanCollectorFactory to be used for Span collection\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, SpanCollectorFactory collectorFactory) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.collectorFactory = collectorFactory;\n    this.simWeight = buildSimWeight(query, searcher, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext]).mjava","sourceNew":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts, float boost) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts, boost);\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWeight#SpanWeight(SpanQuery,IndexSearcher,Map[Term,TermContext]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new SpanWeight\n   * @param query the parent query\n   * @param searcher the IndexSearcher to query against\n   * @param termContexts a map of terms to termcontexts for use in building the similarity.  May\n   *                     be null if scores are not required\n   * @throws IOException on error\n   */\n  public SpanWeight(SpanQuery query, IndexSearcher searcher, Map<Term, TermContext> termContexts) throws IOException {\n    super(query);\n    this.field = query.getField();\n    this.similarity = searcher.getSimilarity(termContexts != null);\n    this.simWeight = buildSimWeight(query, searcher, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["29aea3139c4326c0501d75d51059855463220279"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29aea3139c4326c0501d75d51059855463220279","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}