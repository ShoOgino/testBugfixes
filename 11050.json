{"path":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","commits":[{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              String disp = (key==null) ? field : key; \n              fields.add( field ); // need to put in the map to maintain order for things like CSVResponseWriter\n              okFieldNames.add( field );\n              okFieldNames.add( key );\n              // a valid field name\n              if(SCORE.equals(field)) {\n                _wantsScore = true;\n                augmenters.addTransformer( new ScoreAugmenter( disp ) );\n              }\n              else if( DOCID.equals( field ) ) {\n                augmenters.addTransformer( new DocIdAugmenter( disp ) );\n              }\n              else if( SHARD.equals( field ) ) {\n                String id = \"TODO! getshardid???\";\n                augmenters.addTransformer( new ValueAugmenter( disp, id ) );\n              }\n              else if( EXPLAIN.equals( field ) ) {\n                // TODO? pass params to transformers?\n                augmenters.addTransformer( new ExplainAugmenter( disp, ExplainAugmenter.Style.NL ) );\n              }\n              else if( key != null ){\n                rename.add(field, key);\n              }\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (field == null && sp.pos > start) {\n          // if we are here, we must have read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            okFieldNames.add( field );\n            okFieldNames.add( key );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n          \n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8e6deb81c6b16f810baf365f9c768efa270e8d2a","8e6deb81c6b16f810baf365f9c768efa270e8d2a","8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08ac3d1d2a10c407f7e02c29d58610b4a401d20f","date":1301089925,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              String disp = (key==null) ? field : key; \n              fields.add( field ); // need to put in the map to maintain order for things like CSVResponseWriter\n              okFieldNames.add( field );\n              okFieldNames.add( key );\n              // a valid field name\n              if(SCORE.equals(field)) {\n                _wantsScore = true;\n                augmenters.addTransformer( new ScoreAugmenter( disp ) );\n              }\n              else if( DOCID.equals( field ) ) {\n                augmenters.addTransformer( new DocIdAugmenter( disp ) );\n              }\n              else if( SHARD.equals( field ) ) {\n                String id = \"TODO! getshardid???\";\n                augmenters.addTransformer( new ValueAugmenter( disp, id ) );\n              }\n              else if( EXPLAIN.equals( field ) ) {\n                // TODO? pass params to transformers?\n                augmenters.addTransformer( new ExplainAugmenter( disp, ExplainAugmenter.Style.NL ) );\n              }\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            okFieldNames.add( field );\n            okFieldNames.add( key );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n          \n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              String disp = (key==null) ? field : key; \n              fields.add( field ); // need to put in the map to maintain order for things like CSVResponseWriter\n              okFieldNames.add( field );\n              okFieldNames.add( key );\n              // a valid field name\n              if(SCORE.equals(field)) {\n                _wantsScore = true;\n                augmenters.addTransformer( new ScoreAugmenter( disp ) );\n              }\n              else if( DOCID.equals( field ) ) {\n                augmenters.addTransformer( new DocIdAugmenter( disp ) );\n              }\n              else if( SHARD.equals( field ) ) {\n                String id = \"TODO! getshardid???\";\n                augmenters.addTransformer( new ValueAugmenter( disp, id ) );\n              }\n              else if( EXPLAIN.equals( field ) ) {\n                // TODO? pass params to transformers?\n                augmenters.addTransformer( new ExplainAugmenter( disp, ExplainAugmenter.Style.NL ) );\n              }\n              else if( key != null ){\n                rename.add(field, key);\n              }\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (field == null && sp.pos > start) {\n          // if we are here, we must have read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            okFieldNames.add( field );\n            okFieldNames.add( key );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n          \n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              String disp = (key==null) ? field : key; \n              fields.add( field ); // need to put in the map to maintain order for things like CSVResponseWriter\n              okFieldNames.add( field );\n              okFieldNames.add( key );\n              // a valid field name\n              if(SCORE.equals(field)) {\n                _wantsScore = true;\n                augmenters.addTransformer( new ScoreAugmenter( disp ) );\n              }\n              else if( DOCID.equals( field ) ) {\n                augmenters.addTransformer( new DocIdAugmenter( disp ) );\n              }\n              else if( SHARD.equals( field ) ) {\n                String id = \"TODO! getshardid???\";\n                augmenters.addTransformer( new ValueAugmenter( disp, id ) );\n              }\n              else if( EXPLAIN.equals( field ) ) {\n                // TODO? pass params to transformers?\n                augmenters.addTransformer( new ExplainAugmenter( disp, ExplainAugmenter.Style.NL ) );\n              }\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            okFieldNames.add( field );\n            okFieldNames.add( key );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n          \n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9","date":1301115159,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34776ee7d033ba66c93ae69ab2477387db81136","date":1301693114,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"089f282a18e3d45011af07ffa6756dfc5dde76cd","date":1301959439,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt('=')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key = \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with recommended field names.\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e098410a7e7c5f7e4db2c961cacad59fe4927a3e","date":1307550873,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          String augmenterName = augmenterArgs.get(\"type\");    // [foo] is short for [type=foo] in localParams syntax\n          // TODO: look up and add the augmenter.  If the form was myalias:[myaugmenter], then \"key\" will be myalias\n          SolrParams augmenterParams = new MapSolrParams(augmenterArgs);\n          log.info(\"Parsed augmenter \" + augmenterParams + \" with alias \" + key);  // TODO: remove log statement after augmenter works\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"785c5e6bc8889b740445ed7f2b278a442ad92f7f","date":1307558822,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            augmenters.addTransformer( factory.create(disp, augmenterArgs, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          String augmenterName = augmenterArgs.get(\"type\");    // [foo] is short for [type=foo] in localParams syntax\n          // TODO: look up and add the augmenter.  If the form was myalias:[myaugmenter], then \"key\" will be myalias\n          SolrParams augmenterParams = new MapSolrParams(augmenterArgs);\n          log.info(\"Parsed augmenter \" + augmenterParams + \" with alias \" + key);  // TODO: remove log statement after augmenter works\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"614b421af301388f15f9c4c1933e87eca05966ce","date":1307562887,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            augmenters.addTransformer( factory.create(disp, augmenterArgs, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        // let's try it as a function instead\n        String funcStr = sp.val.substring(start);\n\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","614b421af301388f15f9c4c1933e87eca05966ce"],"e098410a7e7c5f7e4db2c961cacad59fe4927a3e":["089f282a18e3d45011af07ffa6756dfc5dde76cd"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["614b421af301388f15f9c4c1933e87eca05966ce","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["08ac3d1d2a10c407f7e02c29d58610b4a401d20f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"614b421af301388f15f9c4c1933e87eca05966ce":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"e34776ee7d033ba66c93ae69ab2477387db81136":["20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["e098410a7e7c5f7e4db2c961cacad59fe4927a3e"],"089f282a18e3d45011af07ffa6756dfc5dde76cd":["e34776ee7d033ba66c93ae69ab2477387db81136"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9"],"08ac3d1d2a10c407f7e02c29d58610b4a401d20f":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9","089f282a18e3d45011af07ffa6756dfc5dde76cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","614b421af301388f15f9c4c1933e87eca05966ce"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["614b421af301388f15f9c4c1933e87eca05966ce"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","e34776ee7d033ba66c93ae69ab2477387db81136"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9":["e34776ee7d033ba66c93ae69ab2477387db81136","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e098410a7e7c5f7e4db2c961cacad59fe4927a3e":["785c5e6bc8889b740445ed7f2b278a442ad92f7f"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["08ac3d1d2a10c407f7e02c29d58610b4a401d20f"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["20cf3fb415b7532015ef6c24fc4bdd480fd7d4d9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"614b421af301388f15f9c4c1933e87eca05966ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"962d04139994fce5193143ef35615499a9a96d78":[],"e34776ee7d033ba66c93ae69ab2477387db81136":["089f282a18e3d45011af07ffa6756dfc5dde76cd","45669a651c970812a680841b97a77cce06af559f"],"785c5e6bc8889b740445ed7f2b278a442ad92f7f":["614b421af301388f15f9c4c1933e87eca05966ce"],"089f282a18e3d45011af07ffa6756dfc5dde76cd":["e098410a7e7c5f7e4db2c961cacad59fe4927a3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"08ac3d1d2a10c407f7e02c29d58610b4a401d20f":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}