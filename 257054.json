{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getMergeReader(IOContext).mjava","commits":[{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  // Get reader for merging (does not load the terms\n  // index):\n  public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n    //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n    if (mergeReader == null) {\n\n      if (reader != null) {\n        // Just use the already opened non-merge reader\n        // for merging.  In the NRT case this saves us\n        // pointless double-open:\n        //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n        // Ref for us:\n        reader.incRef();\n        mergeReader = reader;\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader share seg=\" + info.name);\n      } else {\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader seg=\" + info.name);\n        // We steal returned ref:\n        mergeReader = new SegmentReader(info, -1, context);\n        if (liveDocs == null) {\n          liveDocs = mergeReader.getLiveDocs();\n        }\n      }\n    }\n\n    // Ref for caller\n    mergeReader.incRef();\n    return mergeReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  // Get reader for merging (does not load the terms\n  // index):\n  public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n    //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n    if (mergeReader == null) {\n\n      if (reader != null) {\n        // Just use the already opened non-merge reader\n        // for merging.  In the NRT case this saves us\n        // pointless double-open:\n        //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n        // Ref for us:\n        reader.incRef();\n        mergeReader = reader;\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader share seg=\" + info.name);\n      } else {\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader seg=\" + info.name);\n        // We steal returned ref:\n        mergeReader = new SegmentReader(info, -1, context);\n        if (liveDocs == null) {\n          liveDocs = mergeReader.getLiveDocs();\n        }\n      }\n    }\n\n    // Ref for caller\n    mergeReader.incRef();\n    return mergeReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":null,"sourceOld":"  // Get reader for merging (does not load the terms\n  // index):\n  public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n    //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n    if (mergeReader == null) {\n\n      if (reader != null) {\n        // Just use the already opened non-merge reader\n        // for merging.  In the NRT case this saves us\n        // pointless double-open:\n        //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n        // Ref for us:\n        reader.incRef();\n        mergeReader = reader;\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader share seg=\" + info.name);\n      } else {\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader seg=\" + info.name);\n        // We steal returned ref:\n        mergeReader = new SegmentReader(info, -1, context);\n        if (liveDocs == null) {\n          liveDocs = mergeReader.getLiveDocs();\n        }\n      }\n    }\n\n    // Ref for caller\n    mergeReader.incRef();\n    return mergeReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":null,"sourceOld":"  // Get reader for merging (does not load the terms\n  // index):\n  public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n    //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n    if (mergeReader == null) {\n\n      if (reader != null) {\n        // Just use the already opened non-merge reader\n        // for merging.  In the NRT case this saves us\n        // pointless double-open:\n        //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n        // Ref for us:\n        reader.incRef();\n        mergeReader = reader;\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader share seg=\" + info.name);\n      } else {\n        //System.out.println(Thread.currentThread().getName() + \": getMergeReader seg=\" + info.name);\n        // We steal returned ref:\n        mergeReader = new SegmentReader(info, -1, context);\n        if (liveDocs == null) {\n          liveDocs = mergeReader.getLiveDocs();\n        }\n      }\n    }\n\n    // Ref for caller\n    mergeReader.incRef();\n    return mergeReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a45bec74b98f6fc05f52770cfb425739e6563960":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}