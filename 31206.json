{"path":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", true, false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderListener\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":["c8c77019d92a937be281e1f8b72bf54b3ac89420","c220849f876de24a79f756f65b3eb045db59f63f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cc5d33c4ecf450c71edad489df69de68a73a11","date":1323189401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", true, false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", true, false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", true, false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().indexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().mainIndexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getLatestSchema(), core.getSolrConfig().indexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getSchema(), core.getSolrConfig().indexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":["4750614f6dd69a084ba692ac13eac93df7e36b83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4750614f6dd69a084ba692ac13eac93df7e36b83","date":1467144700,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getLatestSchema(), core.getSolrConfig().indexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":["c8c77019d92a937be281e1f8b72bf54b3ac89420","d614dcbd5ce3d537fbeb5d54ef1a0edf462a680a","08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getNewIndexDir(), core.getLatestSchema(), core.getSolrConfig().indexConfig, \"testQuerySenderListener\", false, core.getDirectoryFactory());\n\n    qsl.newSearcher(newSearcher, currentSearcher);\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    h.getCore().withSearcher(currentSearcher -> {\n      qsl.newSearcher(currentSearcher, null);//test new Searcher\n\n      MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n      assertNotNull(\"Mock is null\", mock);\n\n      {\n        String evt = mock.req.getParams().get(EventParams.EVENT);\n        assertNotNull(\"Event is null\", evt);\n        assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n        assertU(adoc(\"id\", \"1\"));\n        assertU(commit());\n      }\n\n      h.getCore().withSearcher(newSearcher -> {\n        String evt = mock.req.getParams().get(EventParams.EVENT);\n        assertNotNull(\"Event is null\", evt);\n        assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n        return null;\n      });\n\n      return null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#testSearcherEvents().mjava","sourceNew":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    h.getCore().withSearcher(currentSearcher -> {\n      qsl.newSearcher(currentSearcher, null);//test new Searcher\n\n      MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n      assertNotNull(\"Mock is null\", mock);\n\n      {\n        String evt = mock.req.getParams().get(EventParams.EVENT);\n        assertNotNull(\"Event is null\", evt);\n        assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n\n        assertU(adoc(\"id\", \"1\"));\n        assertU(commit());\n      }\n\n      h.getCore().withSearcher(newSearcher -> {\n        String evt = mock.req.getParams().get(EventParams.EVENT);\n        assertNotNull(\"Event is null\", evt);\n        assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n        return null;\n      });\n\n      return null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    qsl.newSearcher(currentSearcher, null);//test new Searcher\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"/mock\");\n    assertNotNull(\"Mock is null\", mock);\n    String evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.FIRST_SEARCHER, evt.equals(EventParams.FIRST_SEARCHER) == true);\n    \n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    RefCounted<SolrIndexSearcher> newSearcherRef = core.getSearcher();\n    evt = mock.req.getParams().get(EventParams.EVENT);\n    assertNotNull(\"Event is null\", evt);\n    assertTrue(evt + \" is not equal to \" + EventParams.NEW_SEARCHER, evt.equals(EventParams.NEW_SEARCHER) == true);\n    newSearcherRef.decref();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e22ffe8cc51a892ae103df018822d7873e901c2a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"30c8e5574b55d57947e989443dfde611646530ee":["4750614f6dd69a084ba692ac13eac93df7e36b83","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["4750614f6dd69a084ba692ac13eac93df7e36b83","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4ab833f2b623042c834458d4cbcad05073a93793":["28288370235ed02234a64753cdbf0c6ec096304a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["08970e5b8411182a29412c177eff67ec1110095b","4750614f6dd69a084ba692ac13eac93df7e36b83"],"4750614f6dd69a084ba692ac13eac93df7e36b83":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e22ffe8cc51a892ae103df018822d7873e901c2a","77cc5d33c4ecf450c71edad489df69de68a73a11"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["4750614f6dd69a084ba692ac13eac93df7e36b83"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["28288370235ed02234a64753cdbf0c6ec096304a","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4750614f6dd69a084ba692ac13eac93df7e36b83":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"08970e5b8411182a29412c177eff67ec1110095b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4750614f6dd69a084ba692ac13eac93df7e36b83"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","4a5469a71486c4c1e313c7fcb08188d7111195c2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","77cc5d33c4ecf450c71edad489df69de68a73a11","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}