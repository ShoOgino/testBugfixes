{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","commits":[{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (locker) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#persistCores(Config,Properties,Map[String,String],Map[String,String],File,File,SolrResourceLoader).mjava","sourceNew":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (modifyLock) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addCoreToPersistList(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","sourceOld":"  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows\n  // this path, presumably it's there for a reason.\n  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat\n  // purposes\n  public void persistCores(Config cfg, Properties containerProperties,\n      Map<String,String> rootSolrAttribs, Map<String,String> coresAttribs,\n      File file, File configFile, SolrResourceLoader loader) throws XPathExpressionException {\n    // This is expensive in the maximal case, but I think necessary. It should\n    // keep a reference open to all of the\n    // current cores while they are saved. Remember that especially the\n    // transient core can come and go.\n    //\n    // TODO: 5.0. remove the possibility of storing core descriptors in\n    // solr.xml?\n    //\n    \n    List<SolrXMLSerializer.SolrCoreXMLDef> solrCoreXMLDefs = new ArrayList<SolrXMLSerializer.SolrCoreXMLDef>();\n    synchronized (locker) {\n      \n      persistCores(cfg, cores, loader, solrCoreXMLDefs);\n      persistCores(cfg, transientCores, loader, solrCoreXMLDefs);\n      // add back all the cores that aren't loaded, either in cores or transient\n      // cores\n      for (Map.Entry<String,CoreDescriptor> ent : dynamicDescriptors.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue(), null, solrCoreXMLDefs);\n        }\n      }\n      for (Map.Entry<String,SolrCore> ent : createdCores.entrySet()) {\n        if (!cores.containsKey(ent.getKey())\n            && !transientCores.containsKey(ent.getKey())\n            && !dynamicDescriptors.containsKey(ent.getKey())) {\n          addPersistOneCore(cfg, loader, ent.getValue().getCoreDescriptor(),\n              null, solrCoreXMLDefs);\n        }\n      }\n\n      SolrXMLSerializer.SolrXMLDef solrXMLDef = new SolrXMLSerializer.SolrXMLDef();\n      solrXMLDef.coresDefs = solrCoreXMLDefs;\n      solrXMLDef.containerProperties = containerProperties;\n      solrXMLDef.solrAttribs = rootSolrAttribs;\n      solrXMLDef.coresAttribs = coresAttribs;\n      SOLR_XML_SERIALIZER.persistFile(file, solrXMLDef);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9409650933cc688e77e565092a25e58adfc2e18d"]},"commit2Childs":{"9409650933cc688e77e565092a25e58adfc2e18d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}