{"path":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","commits":[{"id":"c543b4f6989a86c0d59dfe26e92c767b5045603a","date":1386588149,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n\n    return mock;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e00ed0fa969dba2651483c3f778ba4786f8df8ae","date":1386601133,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","sourceOld":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n\n    return mock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","sourceOld":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","sourceOld":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","sourceNew":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","sourceOld":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    mock.getAllCollections();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Set<String>>() {\n      @Override\n      public Set<String> answer() throws Throwable {\n        return collections;\n      }\n    }).anyTimes();\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateTest#getMockZkStateReader(Set[String]).mjava","sourceNew":null,"sourceOld":"  public static ZkStateReader getMockZkStateReader(final Set<String> collections) {\n    ZkStateReader mock = createMock(ZkStateReader.class);\n    EasyMock.reset(mock);\n    EasyMock.replay(mock);\n\n    return mock;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"e00ed0fa969dba2651483c3f778ba4786f8df8ae":["c543b4f6989a86c0d59dfe26e92c767b5045603a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["e00ed0fa969dba2651483c3f778ba4786f8df8ae"],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e00ed0fa969dba2651483c3f778ba4786f8df8ae"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"e00ed0fa969dba2651483c3f778ba4786f8df8ae":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c543b4f6989a86c0d59dfe26e92c767b5045603a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"c543b4f6989a86c0d59dfe26e92c767b5045603a":["e00ed0fa969dba2651483c3f778ba4786f8df8ae"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}