{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","sourceNew":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","sourceOld":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc83d085f83b38c31736c494913c0c75265ce02","date":1341762281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","sourceNew":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    // we use the default Locale since LuceneTestCase randomizes it\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());\n    return getDate(df.parse(s), resolution);\n  }\n\n","sourceOld":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","sourceNew":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    // we use the default Locale since LuceneTestCase randomizes it\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());\n    return getDate(df.parse(s), resolution);\n  }\n\n","sourceOld":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","sourceNew":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    // we use the default Locale since LuceneTestCase randomizes it\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());\n    return getDate(df.parse(s), resolution);\n  }\n\n","sourceOld":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getDate(String,DateTools.Resolution).mjava","sourceNew":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    // we use the default Locale since LuceneTestCase randomizes it\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale.getDefault());\n    return getDate(df.parse(s), resolution);\n  }\n\n","sourceOld":"  /** for testing DateTools support */\n  private String getDate(String s, DateTools.Resolution resolution)\n      throws Exception {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    return getDate(df.parse(s), resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5dc83d085f83b38c31736c494913c0c75265ce02":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5dc83d085f83b38c31736c494913c0c75265ce02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5dc83d085f83b38c31736c494913c0c75265ce02","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5dc83d085f83b38c31736c494913c0c75265ce02":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}