{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = SloppyMath.asin(SloppyMath.sin(radDistance) / SloppyMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a circle using WGS-84 parameters\n   */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / GeoProjectionUtils.SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > GeoProjectionUtils.MIN_LAT_RADIANS && maxLat < GeoProjectionUtils.MAX_LAT_RADIANS) {\n      double deltaLon = SloppyMath.asin(SloppyMath.sin(radDistance) / SloppyMath.cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < GeoProjectionUtils.MIN_LON_RADIANS) {\n        minLon += 2d * StrictMath.PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > GeoProjectionUtils.MAX_LON_RADIANS) {\n        maxLon -= 2d * StrictMath.PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = StrictMath.max(minLat, GeoProjectionUtils.MIN_LAT_RADIANS);\n      maxLat = StrictMath.min(maxLat, GeoProjectionUtils.MAX_LAT_RADIANS);\n      minLon = GeoProjectionUtils.MIN_LON_RADIANS;\n      maxLon = GeoProjectionUtils.MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLon, final double centerLat, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLon, TO_DEGREES * maxLon, TO_DEGREES * minLat, TO_DEGREES * maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fcb04ff2d63aad8754270211d5fc084d3526b9","date":1459278881,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    // LUCENE-7143\n    double radDistance = (radiusMeters + 7E-2) / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    double radDistance = radiusMeters / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bd00e9af390947b2751706503ba0d2f0b28da6d","date":1459503650,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    // LUCENE-7143\n    double radDistance = (radiusMeters + 7E-2) / EARTH_MEAN_RADIUS_METERS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    // LUCENE-7143\n    double radDistance = (radiusMeters + 7E-2) / SEMIMAJOR_AXIS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ddc1b7a872fafd838d3f3129984ca661e29b36","date":1459526591,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRect#fromPointDistance(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#circleToBBox(double,double,double).mjava","sourceNew":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect fromPointDistance(final double centerLat, final double centerLon, final double radiusMeters) {\n    checkLatitude(centerLat);\n    checkLongitude(centerLon);\n    final double radLat = toRadians(centerLat);\n    final double radLon = toRadians(centerLon);\n    // LUCENE-7143\n    double radDistance = (radiusMeters + 7E-2) / EARTH_MEAN_RADIUS_METERS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(toDegrees(minLat), toDegrees(maxLat), toDegrees(minLon), toDegrees(maxLon));\n  }\n\n","sourceOld":"  /** Compute Bounding Box for a circle using WGS-84 parameters */\n  public static GeoRect circleToBBox(final double centerLat, final double centerLon, final double radiusMeters) {\n    final double radLat = TO_RADIANS * centerLat;\n    final double radLon = TO_RADIANS * centerLon;\n    // LUCENE-7143\n    double radDistance = (radiusMeters + 7E-2) / EARTH_MEAN_RADIUS_METERS;\n    double minLat = radLat - radDistance;\n    double maxLat = radLat + radDistance;\n    double minLon;\n    double maxLon;\n\n    if (minLat > MIN_LAT_RADIANS && maxLat < MAX_LAT_RADIANS) {\n      double deltaLon = asin(sloppySin(radDistance) / cos(radLat));\n      minLon = radLon - deltaLon;\n      if (minLon < MIN_LON_RADIANS) {\n        minLon += 2d * PI;\n      }\n      maxLon = radLon + deltaLon;\n      if (maxLon > MAX_LON_RADIANS) {\n        maxLon -= 2d * PI;\n      }\n    } else {\n      // a pole is within the distance\n      minLat = max(minLat, MIN_LAT_RADIANS);\n      maxLat = min(maxLat, MAX_LAT_RADIANS);\n      minLon = MIN_LON_RADIANS;\n      maxLon = MAX_LON_RADIANS;\n    }\n\n    return new GeoRect(TO_DEGREES * minLat, TO_DEGREES * maxLat, TO_DEGREES * minLon, TO_DEGREES * maxLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["9bd00e9af390947b2751706503ba0d2f0b28da6d"],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["86fcb04ff2d63aad8754270211d5fc084d3526b9"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86fcb04ff2d63aad8754270211d5fc084d3526b9":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43ddc1b7a872fafd838d3f3129984ca661e29b36"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["86fcb04ff2d63aad8754270211d5fc084d3526b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"86fcb04ff2d63aad8754270211d5fc084d3526b9":["9bd00e9af390947b2751706503ba0d2f0b28da6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}