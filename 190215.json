{"path":"lucene/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","commits":[{"id":"4695700bae5ad81cf229df09a73758433f9e8371","date":1308574155,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Rewrites the SortFields in this Sort, returning a new Sort if any of the fields\n   * changes during their rewriting.\n   *\n   * @param searcher IndexSearcher to use in the rewriting\n   * @return {@code this} if the Sort/Fields have not changed, or a new Sort if there\n   *        is a change\n   * @throws IOException Can be thrown by the rewriting\n   * @lucene.experimental\n   */\n  public Sort rewrite(IndexSearcher searcher) throws IOException {\n    boolean changed = false;\n    \n    SortField[] rewrittenSortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      rewrittenSortFields[i] = fields[i].rewrite(searcher);\n      if (fields[i] != rewrittenSortFields[i]) {\n        changed = true;\n      }\n    }\n\n    return (changed) ? new Sort(rewrittenSortFields) : this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e1fea1bf0d3f1a4404445650841a482e3b559792"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e16bf7641024ed2270064ba9a6037c49266bcfb1","date":1308579310,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Rewrites the SortFields in this Sort, returning a new Sort if any of the fields\n   * changes during their rewriting.\n   *\n   * @param searcher IndexSearcher to use in the rewriting\n   * @return {@code this} if the Sort/Fields have not changed, or a new Sort if there\n   *        is a change\n   * @throws IOException Can be thrown by the rewriting\n   * @lucene.experimental\n   */\n  public Sort rewrite(IndexSearcher searcher) throws IOException {\n    boolean changed = false;\n    \n    SortField[] rewrittenSortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      rewrittenSortFields[i] = fields[i].rewrite(searcher);\n      if (fields[i] != rewrittenSortFields[i]) {\n        changed = true;\n      }\n    }\n\n    return (changed) ? new Sort(rewrittenSortFields) : this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Rewrites the SortFields in this Sort, returning a new Sort if any of the fields\n   * changes during their rewriting.\n   *\n   * @param searcher IndexSearcher to use in the rewriting\n   * @return {@code this} if the Sort/Fields have not changed, or a new Sort if there\n   *        is a change\n   * @throws IOException Can be thrown by the rewriting\n   * @lucene.experimental\n   */\n  public Sort rewrite(IndexSearcher searcher) throws IOException {\n    boolean changed = false;\n    \n    SortField[] rewrittenSortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      rewrittenSortFields[i] = fields[i].rewrite(searcher);\n      if (fields[i] != rewrittenSortFields[i]) {\n        changed = true;\n      }\n    }\n\n    return (changed) ? new Sort(rewrittenSortFields) : this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Sort#rewrite(IndexSearcher).mjava","sourceNew":"  /**\n   * Rewrites the SortFields in this Sort, returning a new Sort if any of the fields\n   * changes during their rewriting.\n   *\n   * @param searcher IndexSearcher to use in the rewriting\n   * @return {@code this} if the Sort/Fields have not changed, or a new Sort if there\n   *        is a change\n   * @throws IOException Can be thrown by the rewriting\n   * @lucene.experimental\n   */\n  public Sort rewrite(IndexSearcher searcher) throws IOException {\n    boolean changed = false;\n    \n    SortField[] rewrittenSortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      rewrittenSortFields[i] = fields[i].rewrite(searcher);\n      if (fields[i] != rewrittenSortFields[i]) {\n        changed = true;\n      }\n    }\n\n    return (changed) ? new Sort(rewrittenSortFields) : this;\n  }\n\n","sourceOld":"  /**\n   * Rewrites the SortFields in this Sort, returning a new Sort if any of the fields\n   * changes during their rewriting.\n   *\n   * @param searcher IndexSearcher to use in the rewriting\n   * @return {@code this} if the Sort/Fields have not changed, or a new Sort if there\n   *        is a change\n   * @throws IOException Can be thrown by the rewriting\n   * @lucene.experimental\n   */\n  public Sort rewrite(IndexSearcher searcher) throws IOException {\n    boolean changed = false;\n    \n    SortField[] rewrittenSortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      rewrittenSortFields[i] = fields[i].rewrite(searcher);\n      if (fields[i] != rewrittenSortFields[i]) {\n        changed = true;\n      }\n    }\n\n    return (changed) ? new Sort(rewrittenSortFields) : this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4695700bae5ad81cf229df09a73758433f9e8371"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4695700bae5ad81cf229df09a73758433f9e8371"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4695700bae5ad81cf229df09a73758433f9e8371"],"4695700bae5ad81cf229df09a73758433f9e8371":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","e16bf7641024ed2270064ba9a6037c49266bcfb1","4695700bae5ad81cf229df09a73758433f9e8371"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":[],"e16bf7641024ed2270064ba9a6037c49266bcfb1":[],"4695700bae5ad81cf229df09a73758433f9e8371":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","718f8730b97959cb87aaeadc9fafb9513f3c1bfe","e16bf7641024ed2270064ba9a6037c49266bcfb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","e16bf7641024ed2270064ba9a6037c49266bcfb1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}