{"path":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockAnalyzer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockAnalyzer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n    searcher = new IndexSearcher(directory, true);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"field\", English.intToEnglish(100+i),\n                        Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testRareVectors().mjava","sourceNew":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  // Test only a few docs having vectors\n  public void testRareVectors() throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.SIMPLE, true))\n        .setOpenMode(OpenMode.CREATE));\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add non-vectors\");\n    }\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now add vectors\");\n    }\n    FieldType ft = new FieldType(TextField.TYPE_STORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(100+i), ft));\n      writer.addDocument(doc);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now getReader\");\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Query query = new TermQuery(new Term(\"field\", \"hundred\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    for (int i = 0; i < hits.length; i++) {\n\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"c084e47df29de3330311d69dabf515ceaa989512":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edb20114e86ec883b0b08bd624eee852c565c06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5f4e87790277826a2aea119328600dfb07761f32":["2ade882efb2f2235dafb176284c1e35dbdb1c126","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7edb20114e86ec883b0b08bd624eee852c565c06"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7edb20114e86ec883b0b08bd624eee852c565c06":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1f653cfcf159baeaafe5d01682a911e95bba4012","3242a09f703274d3b9283f2064a1a33064b53a1b"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3cc749c053615f5871f3b95715fe292f34e70a53":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}