{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","commits":[{"id":"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e","date":1506186198,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[2];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d294a77e426888d319b8a7dd2e729da8e95f1809","date":1506186199,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[2];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":2,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46bf3bdc31412342491895b3209b5dd622aeb489","date":1509735643,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a3a0090dc960985448654a5dd4c117c71c3f7a5","date":1513795907,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof MultivariateRealDistribution) && !(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if (second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    }else if(first instanceof MultivariateNormalDistribution) {\n      if(second != null) {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        int size = ((Number)second).intValue();\n        double[][] samples = new double[size][];\n        for(int i=0; i<size; ++i) {\n          samples[i] =  multivariateNormalDistribution.sample();\n        }\n\n        return new Matrix(samples);\n      } else {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        double[] sample = multivariateNormalDistribution.sample();\n        List<Number> sampleList = new ArrayList(sample.length);\n        for(int i=0; i<sample.length; i++) {\n          sampleList.add(sample[i]);\n        }\n        return sampleList;\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if(second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SampleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof MultivariateRealDistribution) && !(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if (second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    }else if(first instanceof MultivariateNormalDistribution) {\n      if(second != null) {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        int size = ((Number)second).intValue();\n        double[][] samples = new double[size][];\n        for(int i=0; i<size; ++i) {\n          samples[i] =  multivariateNormalDistribution.sample();\n        }\n\n        return new Matrix(samples);\n      } else {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        double[] sample = multivariateNormalDistribution.sample();\n        List<Number> sampleList = new ArrayList<>(sample.length);\n        for(int i=0; i<sample.length; i++) {\n          sampleList.add(sample[i]);\n        }\n        return sampleList;\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException{\n    if(objects.length < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n\n    Object first = objects[0];\n\n    if(!(first instanceof MultivariateRealDistribution) && !(first instanceof RealDistribution) && !(first instanceof IntegerDistribution) && !(first instanceof MarkovChainEvaluator.MarkovChain)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a Markov Chain, Real or Integer Distribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    Object second = null;\n    if(objects.length > 1) {\n      second = objects[1];\n    }\n\n    if(first instanceof MarkovChainEvaluator.MarkovChain) {\n      MarkovChainEvaluator.MarkovChain markovChain = (MarkovChainEvaluator.MarkovChain)first;\n      if(second != null) {\n        return Arrays.stream(markovChain.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return markovChain.sample();\n      }\n    } else if (first instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution) first;\n      if (second != null) {\n        return Arrays.stream(realDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return realDistribution.sample();\n      }\n    }else if(first instanceof MultivariateNormalDistribution) {\n      if(second != null) {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        int size = ((Number)second).intValue();\n        double[][] samples = new double[size][];\n        for(int i=0; i<size; ++i) {\n          samples[i] =  multivariateNormalDistribution.sample();\n        }\n\n        return new Matrix(samples);\n      } else {\n        MultivariateNormalDistribution multivariateNormalDistribution = (MultivariateNormalDistribution)first;\n        double[] sample = multivariateNormalDistribution.sample();\n        List<Number> sampleList = new ArrayList(sample.length);\n        for(int i=0; i<sample.length; i++) {\n          sampleList.add(sample[i]);\n        }\n        return sampleList;\n      }\n    } else {\n      IntegerDistribution integerDistribution = (IntegerDistribution) first;\n      if(second != null) {\n        return Arrays.stream(integerDistribution.sample(((Number) second).intValue())).mapToObj(item -> item).collect(Collectors.toList());\n      } else {\n        return integerDistribution.sample();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d294a77e426888d319b8a7dd2e729da8e95f1809":["a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d294a77e426888d319b8a7dd2e729da8e95f1809"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b8557552f7ab8e381c4d1a941a269e14f11e779d","46bf3bdc31412342491895b3209b5dd622aeb489"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"46bf3bdc31412342491895b3209b5dd622aeb489":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"d294a77e426888d319b8a7dd2e729da8e95f1809":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","6240b74b884c5587f2a4062dd27d6c32bf228889","46bf3bdc31412342491895b3209b5dd622aeb489"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e":["d294a77e426888d319b8a7dd2e729da8e95f1809"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8557552f7ab8e381c4d1a941a269e14f11e779d","6240b74b884c5587f2a4062dd27d6c32bf228889","a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"46bf3bdc31412342491895b3209b5dd622aeb489":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}