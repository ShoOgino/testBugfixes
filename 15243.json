{"path":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","commits":[{"id":"1263e37167e93fb2e178a37536df562455e7a587","date":1323545884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils.RecordMerger#pullTop().mjava","sourceNew":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","sourceOld":"    private void pullTop() {\n      // extract all subs from the queue that have the same\n      // top record\n      assert numTop == 0;\n      assert currentOrd >= 0;\n      while (true) {\n        final SortedSourceSlice popped = top[numTop++] = queue.pop();\n        // use ord + 1 to identify unreferenced values (ie. == 0)\n        popped.ordMapping[popped.relativeOrd] = currentOrd + 1;\n        if (queue.size() == 0\n            || !(queue.top()).current.bytesEquals(top[0].current)) {\n          break;\n        }\n      }\n      current = top[0].current;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1263e37167e93fb2e178a37536df562455e7a587":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1263e37167e93fb2e178a37536df562455e7a587"]},"commit2Childs":{"1263e37167e93fb2e178a37536df562455e7a587":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1263e37167e93fb2e178a37536df562455e7a587","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}