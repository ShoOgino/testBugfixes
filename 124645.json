{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":null,"sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsEnum#reset(FieldInfo,DocTermState,Bits).mjava","sourceNew":null,"sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, DocTermState termState, Bits skipDocs) throws IOException {\n      omitTF = fieldInfo.omitTermFreqAndPositions;\n      if (omitTF) {\n        freq = 1;\n      }\n      storePayloads = fieldInfo.storePayloads;\n      this.skipDocs = skipDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      ord = 0;\n      doc = 0;\n\n      skipped = false;\n\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["99cf56f3a650b908f7017a72f9d23940418f8a52","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}