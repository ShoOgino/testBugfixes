{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0af84f7eb1ce29d521e0890c71cb77a167b910","date":1395997467,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n    \n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    \n    { // only high freq\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 2);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n    }\n    \n    { // low freq is mandatory\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.MUST,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"restaurant\"));\n      query.add(new Term(\"field\", \"universe\"));\n      \n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 1);\n      assertEquals(\"3\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      \n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e1151ecb4798f5c31137aec032c241638018ed20","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a194d3ac4639a7909ea614667b9a7632a6aa14d1","e1151ecb4798f5c31137aec032c241638018ed20"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["e1151ecb4798f5c31137aec032c241638018ed20"],"e1151ecb4798f5c31137aec032c241638018ed20":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"e1151ecb4798f5c31137aec032c241638018ed20":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}