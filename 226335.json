{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":["296b8b38a87feb478921f77834a2302dfe77641c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query.build(), null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query, null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429","date":1590107358,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        try (Analyzer analyzer = new SynonymAnalyzer(synonyms)) {\n\n          String s = \"football-soccer in the euro 2004 footie competition\";\n\n          BooleanQuery.Builder query = new BooleanQuery.Builder();\n          query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n          query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n          query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n          Highlighter highlighter = getHighlighter(query.build(), null, HighlighterTest.this);\n\n          // Get 3 best fragments and separate with a \"...\"\n          TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n          String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n          String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n          assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n              + \" actual:\" + result, expectedResult.equals(result));\n        }\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new TermQuery(new Term(\"bookid\", \"football\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"soccer\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"bookid\", \"footie\")), Occur.SHOULD);\n\n        Highlighter highlighter = getHighlighter(query.build(), null, HighlighterTest.this);\n\n        // Get 3 best fragments and separate with a \"...\"\n        TokenStream tokenStream = analyzer.tokenStream(null, s);\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7602e63987582091a0e432f8d8f7619d2206fab7","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7602e63987582091a0e432f8d8f7619d2206fab7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7602e63987582091a0e432f8d8f7619d2206fab7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7602e63987582091a0e432f8d8f7619d2206fab7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7602e63987582091a0e432f8d8f7619d2206fab7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}