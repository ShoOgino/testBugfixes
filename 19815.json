{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomies#test1().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomies#test1().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomies#test1().mjava","sourceNew":"  @Test\n  public void test1() throws Exception {\n    Directory dir1 = newDirectory();\n    DirectoryTaxonomyWriter tw1 = new DirectoryTaxonomyWriter(dir1);\n    tw1.addCategory(new CategoryPath(\"Author\", \"Mark Twain\"));\n    tw1.addCategory(new CategoryPath(\"Animals\", \"Dog\"));\n    Directory dir2 = newDirectory();\n    DirectoryTaxonomyWriter tw2 = new DirectoryTaxonomyWriter(dir2);\n    tw2.addCategory(new CategoryPath(\"Author\", \"Rob Pike\"));\n    tw2.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw2.close();\n    Directory dir3 = newDirectory();\n    DirectoryTaxonomyWriter tw3 = new DirectoryTaxonomyWriter(dir3);\n    tw3.addCategory(new CategoryPath(\"Author\", \"Zebra Smith\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Aaron\"));\n    tw3.close();\n\n    MemoryOrdinalMap[] maps = new MemoryOrdinalMap[2];\n    maps[0] = new MemoryOrdinalMap();\n    maps[1] = new MemoryOrdinalMap();\n\n    tw1.addTaxonomies(new Directory[] { dir2, dir3 }, maps);\n    tw1.close();\n\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dir1);\n\n    // Test that the merged taxonomy now contains what we expect:\n    // First all the categories of the original taxonomy, in their original order:\n    assertEquals(tr.getPath(0).toString(), \"\");\n    assertEquals(tr.getPath(1).toString(), \"Author\");\n    assertEquals(tr.getPath(2).toString(), \"Author/Mark Twain\");\n    assertEquals(tr.getPath(3).toString(), \"Animals\");\n    assertEquals(tr.getPath(4).toString(), \"Animals/Dog\");\n    // Then the categories new in the new taxonomy, in alphabetical order: \n    assertEquals(tr.getPath(5).toString(), \"Aardvarks\");\n    assertEquals(tr.getPath(6).toString(), \"Aardvarks/Aaron\");\n    assertEquals(tr.getPath(7).toString(), \"Aardvarks/Bob\");\n    assertEquals(tr.getPath(8).toString(), \"Author/Rob Pike\");\n    assertEquals(tr.getPath(9).toString(), \"Author/Zebra Smith\");\n    assertEquals(tr.getSize(), 10);\n\n    // Test that the maps contain what we expect\n    int[] map0 = maps[0].getMap();\n    assertEquals(5, map0.length);\n    assertEquals(0, map0[0]);\n    assertEquals(1, map0[1]);\n    assertEquals(8, map0[2]);\n    assertEquals(5, map0[3]);\n    assertEquals(7, map0[4]);\n\n    int[] map1 = maps[1].getMap();\n    assertEquals(6, map1.length);\n    assertEquals(0, map1[0]);\n    assertEquals(1, map1[1]);\n    assertEquals(9, map1[2]);\n    assertEquals(5, map1[3]);\n    assertEquals(7, map1[4]);\n    assertEquals(6, map1[5]);\n    \n    tr.close();\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","sourceOld":"  @Test\n  public void test1() throws Exception {\n    Directory dir1 = newDirectory();\n    DirectoryTaxonomyWriter tw1 = new DirectoryTaxonomyWriter(dir1);\n    tw1.addCategory(new CategoryPath(\"Author\", \"Mark Twain\"));\n    tw1.addCategory(new CategoryPath(\"Animals\", \"Dog\"));\n    Directory dir2 = newDirectory();\n    DirectoryTaxonomyWriter tw2 = new DirectoryTaxonomyWriter(dir2);\n    tw2.addCategory(new CategoryPath(\"Author\", \"Rob Pike\"));\n    tw2.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw2.close();\n    Directory dir3 = newDirectory();\n    DirectoryTaxonomyWriter tw3 = new DirectoryTaxonomyWriter(dir3);\n    tw3.addCategory(new CategoryPath(\"Author\", \"Zebra Smith\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Aaron\"));\n    tw3.close();\n\n    MemoryOrdinalMap[] maps = new MemoryOrdinalMap[2];\n    maps[0] = new MemoryOrdinalMap();\n    maps[1] = new MemoryOrdinalMap();\n\n    tw1.addTaxonomies(new Directory[] { dir2, dir3 }, maps);\n    tw1.close();\n\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dir1);\n\n    // Test that the merged taxonomy now contains what we expect:\n    // First all the categories of the original taxonomy, in their original order:\n    assertEquals(tr.getPath(0).toString(), \"\");\n    assertEquals(tr.getPath(1).toString(), \"Author\");\n    assertEquals(tr.getPath(2).toString(), \"Author/Mark Twain\");\n    assertEquals(tr.getPath(3).toString(), \"Animals\");\n    assertEquals(tr.getPath(4).toString(), \"Animals/Dog\");\n    // Then the categories new in the new taxonomy, in alphabetical order: \n    assertEquals(tr.getPath(5).toString(), \"Aardvarks\");\n    assertEquals(tr.getPath(6).toString(), \"Aardvarks/Aaron\");\n    assertEquals(tr.getPath(7).toString(), \"Aardvarks/Bob\");\n    assertEquals(tr.getPath(8).toString(), \"Author/Rob Pike\");\n    assertEquals(tr.getPath(9).toString(), \"Author/Zebra Smith\");\n    assertEquals(tr.getSize(), 10);\n\n    // Test that the maps contain what we expect\n    int[] map0 = maps[0].getMap();\n    assertEquals(5, map0.length);\n    assertEquals(0, map0[0]);\n    assertEquals(1, map0[1]);\n    assertEquals(8, map0[2]);\n    assertEquals(5, map0[3]);\n    assertEquals(7, map0[4]);\n\n    int[] map1 = maps[1].getMap();\n    assertEquals(6, map1.length);\n    assertEquals(0, map1[0]);\n    assertEquals(1, map1[1]);\n    assertEquals(9, map1[2]);\n    assertEquals(5, map1[3]);\n    assertEquals(7, map1[4]);\n    assertEquals(6, map1[5]);\n    \n    tr.close();\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cebe7d662ef6b6c677383085b295b9878ba1795","date":1337155300,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomies#test1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test1() throws Exception {\n    Directory dir1 = newDirectory();\n    DirectoryTaxonomyWriter tw1 = new DirectoryTaxonomyWriter(dir1);\n    tw1.addCategory(new CategoryPath(\"Author\", \"Mark Twain\"));\n    tw1.addCategory(new CategoryPath(\"Animals\", \"Dog\"));\n    Directory dir2 = newDirectory();\n    DirectoryTaxonomyWriter tw2 = new DirectoryTaxonomyWriter(dir2);\n    tw2.addCategory(new CategoryPath(\"Author\", \"Rob Pike\"));\n    tw2.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw2.close();\n    Directory dir3 = newDirectory();\n    DirectoryTaxonomyWriter tw3 = new DirectoryTaxonomyWriter(dir3);\n    tw3.addCategory(new CategoryPath(\"Author\", \"Zebra Smith\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Aaron\"));\n    tw3.close();\n\n    MemoryOrdinalMap[] maps = new MemoryOrdinalMap[2];\n    maps[0] = new MemoryOrdinalMap();\n    maps[1] = new MemoryOrdinalMap();\n\n    tw1.addTaxonomies(new Directory[] { dir2, dir3 }, maps);\n    tw1.close();\n\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dir1);\n\n    // Test that the merged taxonomy now contains what we expect:\n    // First all the categories of the original taxonomy, in their original order:\n    assertEquals(tr.getPath(0).toString(), \"\");\n    assertEquals(tr.getPath(1).toString(), \"Author\");\n    assertEquals(tr.getPath(2).toString(), \"Author/Mark Twain\");\n    assertEquals(tr.getPath(3).toString(), \"Animals\");\n    assertEquals(tr.getPath(4).toString(), \"Animals/Dog\");\n    // Then the categories new in the new taxonomy, in alphabetical order: \n    assertEquals(tr.getPath(5).toString(), \"Aardvarks\");\n    assertEquals(tr.getPath(6).toString(), \"Aardvarks/Aaron\");\n    assertEquals(tr.getPath(7).toString(), \"Aardvarks/Bob\");\n    assertEquals(tr.getPath(8).toString(), \"Author/Rob Pike\");\n    assertEquals(tr.getPath(9).toString(), \"Author/Zebra Smith\");\n    assertEquals(tr.getSize(), 10);\n\n    // Test that the maps contain what we expect\n    int[] map0 = maps[0].getMap();\n    assertEquals(5, map0.length);\n    assertEquals(0, map0[0]);\n    assertEquals(1, map0[1]);\n    assertEquals(8, map0[2]);\n    assertEquals(5, map0[3]);\n    assertEquals(7, map0[4]);\n\n    int[] map1 = maps[1].getMap();\n    assertEquals(6, map1.length);\n    assertEquals(0, map1[0]);\n    assertEquals(1, map1[1]);\n    assertEquals(9, map1[2]);\n    assertEquals(5, map1[3]);\n    assertEquals(7, map1[4]);\n    assertEquals(6, map1[5]);\n    \n    tr.close();\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestAddTaxonomies#test1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test1() throws Exception {\n    Directory dir1 = newDirectory();\n    DirectoryTaxonomyWriter tw1 = new DirectoryTaxonomyWriter(dir1);\n    tw1.addCategory(new CategoryPath(\"Author\", \"Mark Twain\"));\n    tw1.addCategory(new CategoryPath(\"Animals\", \"Dog\"));\n    Directory dir2 = newDirectory();\n    DirectoryTaxonomyWriter tw2 = new DirectoryTaxonomyWriter(dir2);\n    tw2.addCategory(new CategoryPath(\"Author\", \"Rob Pike\"));\n    tw2.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw2.close();\n    Directory dir3 = newDirectory();\n    DirectoryTaxonomyWriter tw3 = new DirectoryTaxonomyWriter(dir3);\n    tw3.addCategory(new CategoryPath(\"Author\", \"Zebra Smith\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Bob\"));\n    tw3.addCategory(new CategoryPath(\"Aardvarks\", \"Aaron\"));\n    tw3.close();\n\n    MemoryOrdinalMap[] maps = new MemoryOrdinalMap[2];\n    maps[0] = new MemoryOrdinalMap();\n    maps[1] = new MemoryOrdinalMap();\n\n    tw1.addTaxonomies(new Directory[] { dir2, dir3 }, maps);\n    tw1.close();\n\n    TaxonomyReader tr = new DirectoryTaxonomyReader(dir1);\n\n    // Test that the merged taxonomy now contains what we expect:\n    // First all the categories of the original taxonomy, in their original order:\n    assertEquals(tr.getPath(0).toString(), \"\");\n    assertEquals(tr.getPath(1).toString(), \"Author\");\n    assertEquals(tr.getPath(2).toString(), \"Author/Mark Twain\");\n    assertEquals(tr.getPath(3).toString(), \"Animals\");\n    assertEquals(tr.getPath(4).toString(), \"Animals/Dog\");\n    // Then the categories new in the new taxonomy, in alphabetical order: \n    assertEquals(tr.getPath(5).toString(), \"Aardvarks\");\n    assertEquals(tr.getPath(6).toString(), \"Aardvarks/Aaron\");\n    assertEquals(tr.getPath(7).toString(), \"Aardvarks/Bob\");\n    assertEquals(tr.getPath(8).toString(), \"Author/Rob Pike\");\n    assertEquals(tr.getPath(9).toString(), \"Author/Zebra Smith\");\n    assertEquals(tr.getSize(), 10);\n\n    // Test that the maps contain what we expect\n    int[] map0 = maps[0].getMap();\n    assertEquals(5, map0.length);\n    assertEquals(0, map0[0]);\n    assertEquals(1, map0[1]);\n    assertEquals(8, map0[2]);\n    assertEquals(5, map0[3]);\n    assertEquals(7, map0[4]);\n\n    int[] map1 = maps[1].getMap();\n    assertEquals(6, map1.length);\n    assertEquals(0, map1[0]);\n    assertEquals(1, map1[1]);\n    assertEquals(9, map1[2]);\n    assertEquals(5, map1[3]);\n    assertEquals(7, map1[4]);\n    assertEquals(6, map1[5]);\n    \n    tr.close();\n    dir1.close();\n    dir2.close();\n    dir3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cebe7d662ef6b6c677383085b295b9878ba1795":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0cebe7d662ef6b6c677383085b295b9878ba1795"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cebe7d662ef6b6c677383085b295b9878ba1795"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0cebe7d662ef6b6c677383085b295b9878ba1795","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0cebe7d662ef6b6c677383085b295b9878ba1795":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}