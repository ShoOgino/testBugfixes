{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testGraphQuery() throws Exception {\n    SolrQueryRequest req = req(\"from\", \"node_s\",\n        \"to\",\"edge_s\",\n        \"traversalFilter\",\"foo\",\n        \"returnOnlyLeaf\",\"true\",\n        \"returnRoot\",\"false\",\n        \"maxDepth\",\"2\",\n        \"useAutn\",\"false\"\n        );\n    // make sure all param subsitution works for all args to graph query.\n    assertQueryEquals(\"graph\", req, \n        \"{!graph from=node_s to=edge_s}*:*\",\n        \"{!graph from=$from to=$to}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2 useAutn=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth useAutn=$useAutn}*:*\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","sourceNew":"  public void testGraphQuery() throws Exception {\n    SolrQueryRequest req = req(\"from\", \"node_s\",\n        \"to\",\"edge_s\",\n        \"traversalFilter\",\"foo\",\n        \"returnOnlyLeaf\",\"true\",\n        \"returnRoot\",\"false\",\n        \"maxDepth\",\"2\",\n        \"useAutn\",\"false\"\n        );\n    // make sure all param subsitution works for all args to graph query.\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s}*:*\",\n        \"{!graph from=$from to=$to}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2 useAutn=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth useAutn=$useAutn}*:*\");\n\n  }\n\n","sourceOld":"  public void testGraphQuery() throws Exception {\n    SolrQueryRequest req = req(\"from\", \"node_s\",\n        \"to\",\"edge_s\",\n        \"traversalFilter\",\"foo\",\n        \"returnOnlyLeaf\",\"true\",\n        \"returnRoot\",\"false\",\n        \"maxDepth\",\"2\",\n        \"useAutn\",\"false\"\n        );\n    // make sure all param subsitution works for all args to graph query.\n    assertQueryEquals(\"graph\", req, \n        \"{!graph from=node_s to=edge_s}*:*\",\n        \"{!graph from=$from to=$to}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2 useAutn=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth useAutn=$useAutn}*:*\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testGraphQuery().mjava","sourceNew":"  public void testGraphQuery() throws Exception {\n    SolrQueryRequest req = req(\"from\", \"node_s\",\n        \"to\",\"edge_s\",\n        \"traversalFilter\",\"foo\",\n        \"returnOnlyLeaf\",\"true\",\n        \"returnRoot\",\"false\",\n        \"maxDepth\",\"2\",\n        \"useAutn\",\"false\"\n        );\n    // make sure all param subsitution works for all args to graph query.\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s}*:*\",\n        \"{!graph from=$from to=$to}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth}*:*\");\n\n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2 useAutn=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth useAutn=$useAutn}*:*\");\n\n  }\n\n","sourceOld":"  public void testGraphQuery() throws Exception {\n    SolrQueryRequest req = req(\"from\", \"node_s\",\n        \"to\",\"edge_s\",\n        \"traversalFilter\",\"foo\",\n        \"returnOnlyLeaf\",\"true\",\n        \"returnRoot\",\"false\",\n        \"maxDepth\",\"2\",\n        \"useAutn\",\"false\"\n        );\n    // make sure all param subsitution works for all args to graph query.\n    assertQueryEquals(\"graph\", req, \n        \"{!graph from=node_s to=edge_s}*:*\",\n        \"{!graph from=$from to=$to}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth}*:*\");\n    \n    assertQueryEquals(\"graph\", req,\n        \"{!graph from=node_s to=edge_s traversalFilter=foo returnOnlyLeaf=true returnRoot=false maxDepth=2 useAutn=false}*:*\",\n        \"{!graph from=$from to=$to traversalFilter=$traversalFilter returnOnlyLeaf=$returnOnlyLeaf returnRoot=$returnRoot maxDepth=$maxDepth useAutn=$useAutn}*:*\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}