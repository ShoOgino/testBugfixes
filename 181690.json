{"path":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   */\n  /*\n   * TODO: implement new lucene 2.9 API incrementToken() instead of deprecated\n   * Token.next() TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this. TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public Token process(Token token) throws IOException {\n    Token next = peek(1);\n    // if this is the last token just spit it out. Any commongram would have\n    // been output in the previous call\n    if (next == null) {\n      return token;\n    }\n\n    /**\n     * if this token or next are common then construct a bigram with type=\"gram\"\n     * position increment = 0, and put it in the output queue. It will be\n     * returned when super.next() is called, before this method gets called with\n     * a new token from the input stream See implementation of next() in\n     * BufferedTokenStream\n     */\n\n    if (isCommon(token) || isCommon(next)) {\n      Token gram = gramToken(token, next);\n      write(gram);\n    }\n    // we always return the unigram token\n    return token;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   */\n  /*\n   * TODO: implement new lucene 2.9 API incrementToken() instead of deprecated\n   * Token.next() TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this. TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public Token process(Token token) throws IOException {\n    Token next = peek(1);\n    // if this is the last token just spit it out. Any commongram would have\n    // been output in the previous call\n    if (next == null) {\n      return token;\n    }\n\n    /**\n     * if this token or next are common then construct a bigram with type=\"gram\"\n     * position increment = 0, and put it in the output queue. It will be\n     * returned when super.next() is called, before this method gets called with\n     * a new token from the input stream See implementation of next() in\n     * BufferedTokenStream\n     */\n\n    if (isCommon(token) || isCommon(next)) {\n      Token gram = gramToken(token, next);\n      write(gram);\n    }\n    // we always return the unigram token\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}