{"path":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","commits":[{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[\" + (i + 1) + \"][.='\" + value[i] + \"']\";\n      }\n\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \" + value.length + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a83d6857d62b422f79747a834cfbfdc1610fd515","date":1458168983,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // Docvalues are sets, but stored values are ordered multisets, so cardinality depends on the value source\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \"\n          + (isStoredField(field) ? value.length : valueSet.size()) + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[\" + (i + 1) + \"][.='\" + value[i] + \"']\";\n      }\n\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \" + value.length + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":null,"bugIntro":["504e4f2174aeb3db6a1bbfdd26241e34f4e510bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"504e4f2174aeb3db6a1bbfdd26241e34f4e510bd","date":1499439970,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! (field.startsWith(\"enum\") || field.startsWith(\"test_s\"))))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // Docvalues are sets, but stored values are ordered multisets, so cardinality depends on the value source\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \"\n          + (isStoredField(field) ? value.length : valueSet.size()) + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":["a83d6857d62b422f79747a834cfbfdc1610fd515"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! (field.startsWith(\"enum\") || field.startsWith(\"test_s\"))))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // Docvalues are sets, but stored values are ordered multisets, so cardinality depends on the value source\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \"\n          + (isStoredField(field) ? value.length : valueSet.size()) + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! (field.startsWith(\"enum\") || field.startsWith(\"test_s\"))))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // Docvalues are sets, but stored values are ordered multisets, so cardinality depends on the value source\n      xpaths[value.length] = \"*[count(//arr[@name='\" + field + \"']/\" + type + \") = \"\n          + (isStoredField(field) ? value.length : valueSet.size()) + \"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! field.startsWith(\"test_s\")))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! (field.startsWith(\"enum\") || field.startsWith(\"test_s\"))))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#doTest(String,String,String,String...).mjava","sourceNew":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! field.startsWith(\"test_s\")))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","sourceOld":"  private void doTest(String desc, String field, String type, String... value) {\n    String id = \"\" + this.id++;\n\n\n    String[] xpaths = new String[value.length + 1];\n\n    if (value.length > 1) {\n      Set<String> valueSet = new HashSet<>();\n      valueSet.addAll(Arrays.asList(value));\n      String[] fieldAndValues = new String[value.length * 2 + 2];\n      fieldAndValues[0] = \"id\";\n      fieldAndValues[1] = id;\n\n      for (int i = 0; i < value.length; ++i) {\n        fieldAndValues[i * 2 + 2] = field;\n        fieldAndValues[i * 2 + 3] = value[i];\n        xpaths[i] = \"//arr[@name='\" + field + \"']/\" + type + \"[.='\" + value[i] + \"']\";\n      }\n\n      // See SOLR-10924...\n      // Trie/String based Docvalues are sets, but stored values & Point DVs are ordered multisets,\n      // so cardinality depends on the value source\n      final int expectedCardinality =\n        (isStoredField(field) || (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)\n                                  && ! (field.startsWith(\"enum\") || field.startsWith(\"test_s\"))))\n        ? value.length : valueSet.size();\n      xpaths[value.length] = \"*[count(//arr[@name='\"+field+\"']/\"+type+\")=\"+expectedCardinality+\"]\";\n      assertU(adoc(fieldAndValues));\n\n    } else {\n      assertU(adoc(\"id\", id, field, value[0]));\n      xpaths[0] = \"//\" + type + \"[@name='\" + field + \"'][.='\" + value[0] + \"']\";\n      xpaths[1] = \"*[count(//\" + type + \"[@name='\" + field + \"']) = 1]\";\n    }\n\n    assertU(commit());\n\n    String fl = field;\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\" + field.substring(field.length() - 3);\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = field + \",fakeFieldName\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"id:\" + id, \"fl\", fl), xpaths);\n\n    fl = \"*\";\n    assertQ(desc + \": \" + fl, req(\"q\", \"*:*\", \"fl\", fl), xpaths);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a83d6857d62b422f79747a834cfbfdc1610fd515":["bdac0dff04219451c7511d62225080a93a0181ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a83d6857d62b422f79747a834cfbfdc1610fd515","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"bdac0dff04219451c7511d62225080a93a0181ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"504e4f2174aeb3db6a1bbfdd26241e34f4e510bd":["a83d6857d62b422f79747a834cfbfdc1610fd515"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["504e4f2174aeb3db6a1bbfdd26241e34f4e510bd"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a83d6857d62b422f79747a834cfbfdc1610fd515","504e4f2174aeb3db6a1bbfdd26241e34f4e510bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a83d6857d62b422f79747a834cfbfdc1610fd515":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","504e4f2174aeb3db6a1bbfdd26241e34f4e510bd","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdac0dff04219451c7511d62225080a93a0181ea"],"bdac0dff04219451c7511d62225080a93a0181ea":["a83d6857d62b422f79747a834cfbfdc1610fd515"],"504e4f2174aeb3db6a1bbfdd26241e34f4e510bd":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}