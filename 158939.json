{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery#LatLonPointBoxQuery(String,byte[],byte[],int).mjava","commits":[{"id":"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005","date":1461676641,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery#LatLonPointBoxQuery(String,byte[],byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @param numDims number of dimensions.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected LatLonPointBoxQuery(String field, byte[] lowerPoint, byte[] upperPoint, int numDims) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (numDims <= 0) {\n      throw new IllegalArgumentException(\"numDims must be positive, got \" + numDims);\n    }\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    if (lowerPoint.length % numDims != 0) {\n      throw new IllegalArgumentException(\"lowerPoint is not a fixed multiple of numDims\");\n    }\n    if (lowerPoint.length != upperPoint.length) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + lowerPoint.length + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.numDims = numDims;\n    this.bytesPerDim = lowerPoint.length / numDims;\n\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery#LatLonPointBoxQuery(String,byte[],byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @param numDims number of dimensions.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected LatLonPointBoxQuery(String field, byte[] lowerPoint, byte[] upperPoint, int numDims) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (numDims <= 0) {\n      throw new IllegalArgumentException(\"numDims must be positive, got \" + numDims);\n    }\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    if (lowerPoint.length % numDims != 0) {\n      throw new IllegalArgumentException(\"lowerPoint is not a fixed multiple of numDims\");\n    }\n    if (lowerPoint.length != upperPoint.length) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + lowerPoint.length + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.numDims = numDims;\n    this.bytesPerDim = lowerPoint.length / numDims;\n\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50ff3ac7f4f69138711952170497ecb401ce2396","date":1465514544,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery#LatLonPointBoxQuery(String,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @param numDims number of dimensions.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected LatLonPointBoxQuery(String field, byte[] lowerPoint, byte[] upperPoint, int numDims) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (numDims <= 0) {\n      throw new IllegalArgumentException(\"numDims must be positive, got \" + numDims);\n    }\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    if (lowerPoint.length % numDims != 0) {\n      throw new IllegalArgumentException(\"lowerPoint is not a fixed multiple of numDims\");\n    }\n    if (lowerPoint.length != upperPoint.length) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + lowerPoint.length + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.numDims = numDims;\n    this.bytesPerDim = lowerPoint.length / numDims;\n\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointBoxQuery#LatLonPointBoxQuery(String,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @param numDims number of dimensions.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected LatLonPointBoxQuery(String field, byte[] lowerPoint, byte[] upperPoint, int numDims) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (numDims <= 0) {\n      throw new IllegalArgumentException(\"numDims must be positive, got \" + numDims);\n    }\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    if (lowerPoint.length % numDims != 0) {\n      throw new IllegalArgumentException(\"lowerPoint is not a fixed multiple of numDims\");\n    }\n    if (lowerPoint.length != upperPoint.length) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + lowerPoint.length + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.numDims = numDims;\n    this.bytesPerDim = lowerPoint.length / numDims;\n\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50ff3ac7f4f69138711952170497ecb401ce2396":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a61b5b0e4cf8ab04d7674f9ae117ddc60be22005"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","50ff3ac7f4f69138711952170497ecb401ce2396"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50ff3ac7f4f69138711952170497ecb401ce2396"]},"commit2Childs":{"50ff3ac7f4f69138711952170497ecb401ce2396":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["50ff3ac7f4f69138711952170497ecb401ce2396","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a61b5b0e4cf8ab04d7674f9ae117ddc60be22005","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}