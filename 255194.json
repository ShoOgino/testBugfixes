{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, scoreMode, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":["e5d3b3ab0062c441ef30035f527dbb188c70d9da","e5d3b3ab0062c441ef30035f527dbb188c70d9da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, scoreMode, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final CompletionWeight innerWeight = ((CompletionWeight) innerQuery.createWeight(searcher, needsScores, boost));\n    // if separators are preserved the fst contains a SEP_LABEL\n    // behind each gap. To have a matching automaton, we need to\n    // include the SEP_LABEL in the query as well\n    Automaton optionalSepLabel = Operations.optional(Automata.makeChar(CompletionAnalyzer.SEP_LABEL));\n    Automaton prefixAutomaton = Operations.concatenate(optionalSepLabel, innerWeight.getAutomaton());\n    Automaton contextsAutomaton = Operations.concatenate(toContextAutomaton(contexts, matchAllContexts), prefixAutomaton);\n    contextsAutomaton = Operations.determinize(contextsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n\n    final Map<IntsRef, Float> contextMap = new HashMap<>(contexts.size());\n    final TreeSet<Integer> contextLengths = new TreeSet<>();\n    for (Map.Entry<IntsRef, ContextMetaData> entry : contexts.entrySet()) {\n      ContextMetaData contextMetaData = entry.getValue();\n      contextMap.put(entry.getKey(), contextMetaData.boost);\n      contextLengths.add(entry.getKey().length);\n    }\n    int[] contextLengthArray = new int[contextLengths.size()];\n    final Iterator<Integer> iterator = contextLengths.descendingIterator();\n    for (int i = 0; iterator.hasNext(); i++) {\n      contextLengthArray[i] = iterator.next();\n    }\n    return new ContextCompletionWeight(this, contextsAutomaton, innerWeight, contextMap, contextLengthArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}