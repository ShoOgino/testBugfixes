{"path":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","commits":[{"id":"47ac88233e9e3019faa24a5184425ad60c23d70f","date":1302779803,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/LookupBenchmarkTest#runPerformanceTest(int,int,int,boolean).mjava","sourceNew":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = new ArrayList<String>(benchmarkInput.size());\n      for (TermFreq tf : benchmarkInput) {\n        input.add(tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1))));\n      }\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the actual benchmark. \n   */\n  public void runPerformanceTest(final int minPrefixLen, final int maxPrefixLen, \n      final int num, final boolean onlyMorePopular) throws Exception {\n    System.err.println(String.format(Locale.ENGLISH,\n        \"-- prefixes: %d-%d, num: %d, onlyMorePopular: %s\",\n        minPrefixLen, maxPrefixLen, num, onlyMorePopular));\n\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      final Lookup lookup = buildLookup(cls, dictionaryInput);\n\n      final List<String> input = Lists.newArrayList(Iterables.transform(benchmarkInput, new Function<TermFreq, String>() {\n        public String apply(TermFreq tf) {\n          return tf.term.substring(0, Math.min(tf.term.length(), \n              minPrefixLen + random.nextInt(maxPrefixLen - minPrefixLen + 1)));\n        }\n      }));\n\n      BenchmarkResult result = measure(new Callable<Integer>() {\n        public Integer call() throws Exception {\n          int v = 0;\n          for (String term : input) {\n            v += lookup.lookup(term, onlyMorePopular, num).size();\n          }\n          return v;\n        }\n      });\n\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s queries: %d, time[ms]: %s, ~qps: %.0f\",\n              lookup.getClass().getSimpleName(),\n              input.size(),\n              result.average.toString(),\n              input.size() / result.average.avg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47ac88233e9e3019faa24a5184425ad60c23d70f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47ac88233e9e3019faa24a5184425ad60c23d70f"],"e230a61047bc041516c811baa08a7174d6f8322a":["47ac88233e9e3019faa24a5184425ad60c23d70f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","e230a61047bc041516c811baa08a7174d6f8322a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47ac88233e9e3019faa24a5184425ad60c23d70f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47ac88233e9e3019faa24a5184425ad60c23d70f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"47ac88233e9e3019faa24a5184425ad60c23d70f":["1eb46686a27187e42311e77666a2c7026f461ebc","e230a61047bc041516c811baa08a7174d6f8322a","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["47ac88233e9e3019faa24a5184425ad60c23d70f","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}