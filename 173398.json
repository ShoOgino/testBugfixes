{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","commits":[{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#maybeRemoveAfterSuite(File).mjava","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n    if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n      System.err.println(\"WARNING: Will leave temporary files (bugUrl: \"\n          + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n          + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.addLast(f);\n    }\n  }\n\n","sourceOld":"  private static File maybeRemoveAfterSuite(File f) {\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return f;\n    }\n\n    Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n    if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n      System.err.println(\"WARNING: Will leave temporary files (bugUrl: \"\n          + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n          + f.getAbsolutePath());\n      return f;\n    }\n\n    LuceneTestCase.closeAfterSuite(new RemoveUponClose(f, LuceneTestCase.suiteFailureMarker));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"934b4ca72f2233e78e1bbe05032587866628d906","date":1396635055,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.addLast(f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n    if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n      System.err.println(\"WARNING: Will leave temporary files (bugUrl: \"\n          + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n          + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.addLast(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.addLast(f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c","date":1397143885,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.add(f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.addLast(f);\n    }\n  }\n\n","bugFix":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#registerToRemoveAfterSuite(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.add(f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#registerToRemoveAfterSuite(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#registerToRemoveAfterSuite(File).mjava","sourceNew":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.add(f);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register temporary folder for removal after the suite completes.\n   */\n  private static void registerToRemoveAfterSuite(File f) {\n    assert f != null;\n\n    if (LuceneTestCase.LEAVE_TEMPORARY) {\n      System.err.println(\"INFO: Will leave temporary file: \" + f.getAbsolutePath());\n      return;\n    }\n\n    synchronized (cleanupQueue) {\n      cleanupQueue.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934b4ca72f2233e78e1bbe05032587866628d906":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934b4ca72f2233e78e1bbe05032587866628d906"],"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"]},"commit2Childs":{"934b4ca72f2233e78e1bbe05032587866628d906":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["934b4ca72f2233e78e1bbe05032587866628d906"],"ecdf88f94d9fed2d63c7e6c13b485de67e6dca8c":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}