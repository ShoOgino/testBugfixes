{"path":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Try alternate distance\n    checkHits(fieldName, \"0.1,0.1\", 15, 1, 6);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Try alternate distance\n    checkHits(fieldName, \"0.1,0.1\", 15, 1, 6);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6baa337076125dc01fc8cda597f52f2a9d0edcef","date":1285244980,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Try alternate distance\n    checkHits(fieldName, \"0.1,0.1\", 15, 1, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0b28a0cdbd5c419c644de703db77e07ce7e951a","date":1285352942,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n    checkHits(fieldName, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b785b1f61f30f94f0708b16d7f2eee3ee23194ef","date":1285384789,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n    checkHits(fieldName, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Try alternate distance\n    checkHits(fieldName, \"0.1,0.1\", 15, 1, 6);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0b28a0cdbd5c419c644de703db77e07ce7e951a":["6baa337076125dc01fc8cda597f52f2a9d0edcef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"c26f00b574427b55127e869b935845554afde1fa":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["d0b28a0cdbd5c419c644de703db77e07ce7e951a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["6baa337076125dc01fc8cda597f52f2a9d0edcef","5f4e87790277826a2aea119328600dfb07761f32"],"d0b28a0cdbd5c419c644de703db77e07ce7e951a":["b785b1f61f30f94f0708b16d7f2eee3ee23194ef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"6baa337076125dc01fc8cda597f52f2a9d0edcef":["d0b28a0cdbd5c419c644de703db77e07ce7e951a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b785b1f61f30f94f0708b16d7f2eee3ee23194ef":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}