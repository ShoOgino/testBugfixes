{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","commits":[{"id":"a6fe6699bcc60bb2640032c2682f07a108b1f757","date":1516148439,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d0b4707f3bab526e78877bedeebf53368dbc3d7","date":1524706692,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960f089602da7f0df48fb0e23de1ecbc791b95f0","date":1524725963,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    return search(matrix, vec, k, distanceMeasure);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    double[][] data = matrix.getData();\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    TreeSet<Neighbor> neighbors = new TreeSet();\n    for(int i=0; i<data.length; i++) {\n      double distance = distanceMeasure.compute(vec, data[i]);\n      neighbors.add(new Neighbor(i, distance));\n      if(neighbors.size() > k) {\n        neighbors.pollLast();\n      }\n    }\n\n    double[][] out = new double[neighbors.size()][];\n    List<String> rowLabels = matrix.getRowLabels();\n    List<String> newRowLabels = new ArrayList();\n    List<Number> distances = new ArrayList();\n    int i=-1;\n\n    while(neighbors.size() > 0) {\n      Neighbor neighbor = neighbors.pollFirst();\n      int rowIndex = neighbor.getRow();\n\n      if(rowLabels != null) {\n        newRowLabels.add(rowLabels.get(rowIndex));\n      }\n\n      out[++i] = data[rowIndex];\n      distances.add(neighbor.getDistance());\n    }\n\n    Matrix knn = new Matrix(out);\n\n    if(rowLabels != null) {\n      knn.setRowLabels(newRowLabels);\n    }\n\n    knn.setColumnLabels(matrix.getColumnLabels());\n    knn.setAttribute(\"distances\", distances);\n    return knn;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    return search(matrix, vec, k, distanceMeasure);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(values.length < 3) {\n      throw new IOException(\"knn expects three parameters a Matrix, numeric array and k\");\n    }\n\n    Matrix matrix = null;\n    double[] vec = null;\n    int k = 0;\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for knn should be a matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      List<Number> nums = (List<Number>)values[1];\n      vec = new double[nums.size()];\n      for(int i=0; i<nums.size(); i++) {\n        vec[i] = nums.get(i).doubleValue();\n      }\n    } else {\n      throw new IOException(\"The second parameter for knn should be a numeric array.\");\n    }\n\n    if(values[2] instanceof Number) {\n      k = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for knn should be k.\");\n    }\n\n    DistanceMeasure distanceMeasure = null;\n\n    if(values.length == 4) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    } else {\n      distanceMeasure = new EuclideanDistance();\n    }\n\n    return search(matrix, vec, k, distanceMeasure);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["b94236357aaa22b76c10629851fe4e376e0cea82","5d0b4707f3bab526e78877bedeebf53368dbc3d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["960f089602da7f0df48fb0e23de1ecbc791b95f0"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["5d0b4707f3bab526e78877bedeebf53368dbc3d7","960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["b94236357aaa22b76c10629851fe4e376e0cea82"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}