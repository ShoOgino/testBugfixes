{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void userDefinedVariableFunctionTest() {\n    ExpressionFactory fact = getExpressionFactory();\n    \n    // Single parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"single_func(a)\", \"sum(add(a,double_d,float_f))\");\n    assertEquals(\"div(sum(add(int_i,double_d,float_f)),count(string_s))\", fact.createExpression(\"div(single_func(int_i),count(string_s))\").getExpressionStr());\n    \n    // Multi parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"multi_func(a,b,c)\", \"median(if(boolean_b,add(a,b),c))\");\n    assertEquals(\"div(median(if(boolean_b,add(int_i,double_d),float_f)),count(string_s))\", fact.createExpression(\"div(multi_func(int_i,double_d,float_f),count(string_s))\").getExpressionStr());\n    \n    // Function within function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"inner_func(a,b)\", \"div(add(a,b),b)\");\n    fact.addUserDefinedVariableFunction(\"outer_func(a,b,c)\", \"pow(inner_func(a,b),c)\");\n    assertEquals(\"div(median(pow(div(add(int_i,double_d),double_d),float_f)),count(string_s))\", fact.createExpression(\"div(median(outer_func(int_i,double_d,float_f)),count(string_s))\").getExpressionStr());\n    \n    // Variable parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func(a,b..)\", \"div(add(b),a)\");\n    assertEquals(\"unique(div(add(double_d,float_f),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(double_d,float_f,long_l),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f,long_l))\").getExpressionStr());\n    \n    // Variable parameter function with for-each\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func_fe(a,b..)\", \"div(add(b:abs(_)),a)\");\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f),abs(long_l)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f,long_l))\").getExpressionStr());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","sourceNew":"  @Test\n  public void userDefinedVariableFunctionTest() {\n    ExpressionFactory fact = getExpressionFactory();\n\n    // Single parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"single_func(a)\", \"sum(add(a,double_d,float_f))\");\n    assertEquals(\"div(sum(add(int_i,double_d,float_f)),count(string_s))\", fact.createExpression(\"div(single_func(int_i),count(string_s))\").getExpressionStr());\n\n    // Multi parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"multi_func(a,b,c)\", \"median(if(boolean_b,add(a,b),c))\");\n    assertEquals(\"div(median(if(boolean_b,add(int_i,double_d),float_f)),count(string_s))\", fact.createExpression(\"div(multi_func(int_i,double_d,float_f),count(string_s))\").getExpressionStr());\n\n    // Function within function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"inner_func(a,b)\", \"div(add(a,b),b)\");\n    fact.addUserDefinedVariableFunction(\"outer_func(a,b,c)\", \"pow(inner_func(a,b),c)\");\n    assertEquals(\"div(median(pow(div(add(int_i,double_d),double_d),float_f)),count(string_s))\", fact.createExpression(\"div(median(outer_func(int_i,double_d,float_f)),count(string_s))\").getExpressionStr());\n\n    // Variable parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func(a,b..)\", \"div(add(b),a)\");\n    assertEquals(\"unique(div(add(double_d,float_f),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(double_d,float_f,long_l),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f,long_l))\").getExpressionStr());\n\n    // Variable parameter function with for-each\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func_fe(a,b..)\", \"div(add(b:abs(_)),a)\");\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f),abs(long_l)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f,long_l))\").getExpressionStr());\n  }\n\n","sourceOld":"  @Test\n  public void userDefinedVariableFunctionTest() {\n    ExpressionFactory fact = getExpressionFactory();\n    \n    // Single parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"single_func(a)\", \"sum(add(a,double_d,float_f))\");\n    assertEquals(\"div(sum(add(int_i,double_d,float_f)),count(string_s))\", fact.createExpression(\"div(single_func(int_i),count(string_s))\").getExpressionStr());\n    \n    // Multi parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"multi_func(a,b,c)\", \"median(if(boolean_b,add(a,b),c))\");\n    assertEquals(\"div(median(if(boolean_b,add(int_i,double_d),float_f)),count(string_s))\", fact.createExpression(\"div(multi_func(int_i,double_d,float_f),count(string_s))\").getExpressionStr());\n    \n    // Function within function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"inner_func(a,b)\", \"div(add(a,b),b)\");\n    fact.addUserDefinedVariableFunction(\"outer_func(a,b,c)\", \"pow(inner_func(a,b),c)\");\n    assertEquals(\"div(median(pow(div(add(int_i,double_d),double_d),float_f)),count(string_s))\", fact.createExpression(\"div(median(outer_func(int_i,double_d,float_f)),count(string_s))\").getExpressionStr());\n    \n    // Variable parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func(a,b..)\", \"div(add(b),a)\");\n    assertEquals(\"unique(div(add(double_d,float_f),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(double_d,float_f,long_l),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f,long_l))\").getExpressionStr());\n    \n    // Variable parameter function with for-each\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func_fe(a,b..)\", \"div(add(b:abs(_)),a)\");\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f),abs(long_l)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f,long_l))\").getExpressionStr());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/ExpressionFactoryTest#userDefinedVariableFunctionTest().mjava","sourceNew":"  @Test\n  public void userDefinedVariableFunctionTest() {\n    ExpressionFactory fact = getExpressionFactory();\n\n    // Single parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"single_func(a)\", \"sum(add(a,double_d,float_f))\");\n    assertEquals(\"div(sum(add(int_i,double_d,float_f)),count(string_s))\", fact.createExpression(\"div(single_func(int_i),count(string_s))\").getExpressionStr());\n\n    // Multi parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"multi_func(a,b,c)\", \"median(if(boolean_b,add(a,b),c))\");\n    assertEquals(\"div(median(if(boolean_b,add(int_i,double_d),float_f)),count(string_s))\", fact.createExpression(\"div(multi_func(int_i,double_d,float_f),count(string_s))\").getExpressionStr());\n\n    // Function within function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"inner_func(a,b)\", \"div(add(a,b),b)\");\n    fact.addUserDefinedVariableFunction(\"outer_func(a,b,c)\", \"pow(inner_func(a,b),c)\");\n    assertEquals(\"div(median(pow(div(add(int_i,double_d),double_d),float_f)),count(string_s))\", fact.createExpression(\"div(median(outer_func(int_i,double_d,float_f)),count(string_s))\").getExpressionStr());\n\n    // Variable parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func(a,b..)\", \"div(add(b),a)\");\n    assertEquals(\"unique(div(add(double_d,float_f),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(double_d,float_f,long_l),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f,long_l))\").getExpressionStr());\n\n    // Variable parameter function with for-each\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func_fe(a,b..)\", \"div(add(b:abs(_)),a)\");\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f),abs(long_l)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f,long_l))\").getExpressionStr());\n  }\n\n","sourceOld":"  @Test\n  public void userDefinedVariableFunctionTest() {\n    ExpressionFactory fact = getExpressionFactory();\n    \n    // Single parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"single_func(a)\", \"sum(add(a,double_d,float_f))\");\n    assertEquals(\"div(sum(add(int_i,double_d,float_f)),count(string_s))\", fact.createExpression(\"div(single_func(int_i),count(string_s))\").getExpressionStr());\n    \n    // Multi parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"multi_func(a,b,c)\", \"median(if(boolean_b,add(a,b),c))\");\n    assertEquals(\"div(median(if(boolean_b,add(int_i,double_d),float_f)),count(string_s))\", fact.createExpression(\"div(multi_func(int_i,double_d,float_f),count(string_s))\").getExpressionStr());\n    \n    // Function within function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"inner_func(a,b)\", \"div(add(a,b),b)\");\n    fact.addUserDefinedVariableFunction(\"outer_func(a,b,c)\", \"pow(inner_func(a,b),c)\");\n    assertEquals(\"div(median(pow(div(add(int_i,double_d),double_d),float_f)),count(string_s))\", fact.createExpression(\"div(median(outer_func(int_i,double_d,float_f)),count(string_s))\").getExpressionStr());\n    \n    // Variable parameter function\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func(a,b..)\", \"div(add(b),a)\");\n    assertEquals(\"unique(div(add(double_d,float_f),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(double_d,float_f,long_l),int_i))\", fact.createExpression(\"unique(var_func(int_i,double_d,float_f,long_l))\").getExpressionStr());\n    \n    // Variable parameter function with for-each\n    fact.startRequest();\n    fact.addUserDefinedVariableFunction(\"var_func_fe(a,b..)\", \"div(add(b:abs(_)),a)\");\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f))\").getExpressionStr());\n    assertEquals(\"unique(div(add(abs(double_d),abs(float_f),abs(long_l)),int_i))\", fact.createExpression(\"unique(var_func_fe(int_i,double_d,float_f,long_l))\").getExpressionStr());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}