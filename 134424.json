{"path":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","sourceNew":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArray(char[],int,char[],int).mjava","sourceNew":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * compare two arrays starting at the specified offsets.\n   * \n   * @param larray left array\n   * @param lstartIndex start offset into larray\n   * @param rarray right array\n   * @param rstartIndex start offset into rarray\n   * @return 0 if the arrays are equal，1 if larray > rarray, -1 if larray < rarray\n   */\n  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,\n      int rstartIndex) {\n\n    if (larray == null) {\n      if (rarray == null || rstartIndex >= rarray.length)\n        return 0;\n      else\n        return -1;\n    } else {\n      // larray != null\n      if (rarray == null) {\n        if (lstartIndex >= larray.length)\n          return 0;\n        else\n          return 1;\n      }\n    }\n\n    int li = lstartIndex, ri = rstartIndex;\n    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {\n      li++;\n      ri++;\n    }\n    if (li == larray.length) {\n      if (ri == rarray.length) {\n        // Both arrays are equivalent, return 0.\n        return 0;\n      } else {\n        // larray < rarray because larray has ended first.\n        return -1;\n      }\n    } else {\n      // differing lengths\n      if (ri == rarray.length) {\n        // larray > rarray because rarray has ended first.\n        return 1;\n      } else {\n        // determine by comparison\n        if (larray[li] > rarray[ri])\n          return 1;\n        else\n          return -1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}