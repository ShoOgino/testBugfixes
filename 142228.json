{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    if (leftTerms.hasFreqs() && rightTerms.hasFreqs()) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    if (leftTerms.hasFreqs() && rightTerms.hasFreqs()) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    if (leftTerms.hasFreqs() && rightTerms.hasFreqs()) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    if (leftTerms.hasFreqs() && rightTerms.hasFreqs()) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"086ffe31d8fba0110227db122974163709ecc1b4":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}