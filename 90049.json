{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","sourceNew":"  @Override\n  /**\n   * Recursively label the first facetRequest.getNumLabel() sub results \n   * of the root of a given {@link FacetResult}, or of an already labeled node in it.\n   * I.e., a node is labeled only if it is the root or all its ancestors are labeled. \n   */\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","sourceOld":"  @Override\n  /**\n   * Recursively label the first facetRequest.getNumLabel() sub results \n   * of the root of a given {@link FacetResult}, or of an already labeled node in it.\n   * I.e., a node is labeled only if it is the root or all its ancestors are labeled. \n   */\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","sourceNew":"  @Override\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","sourceOld":"  @Override\n  /**\n   * Recursively label the first facetRequest.getNumLabel() sub results \n   * of the root of a given {@link FacetResult}, or of an already labeled node in it.\n   * I.e., a node is labeled only if it is the root or all its ancestors are labeled. \n   */\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#labelResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void labelResult(FacetResult facetResult) throws IOException {\n    if (facetResult == null) {\n      return; // any result to label?\n    }\n    FacetResultNode rootNode = facetResult.getFacetResultNode();\n    recursivelyLabel(rootNode, facetRequest.getNumLabel());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}