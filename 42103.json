{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readEntity().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readEntity().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#readEntity().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readEntity().mjava","sourceNew":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readEntity() throws IOException {\n    int ch = next();\n    if (ch=='#') return readNumericEntity();\n\n    //read an entity reference\n\n    // for an entity reference, require the ';' for safety.\n    // otherwise we may try and convert part of some company\n    // names to an entity.  \"Alpha&Beta Corp\" for instance.\n    //\n    // TODO: perhaps I should special case some of the\n    // more common ones like &amp to make the ';' optional...\n\n    sb.setLength(0);\n    sb.append((char)ch);\n\n    for (int i=0; i< safeReadAheadLimit; i++) {\n      ch=next();\n      if (Character.isLetter(ch)) {\n        sb.append((char)ch);\n      } else {\n        break;\n      }\n    }\n\n    if (ch==';') {\n      String entity=sb.toString();\n      Character entityChar = entityTable.get(entity);\n      if (entityChar!=null) {\n        numWhitespace = entity.length() + 1 ;\n        return entityChar.charValue();\n      }\n    }\n\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["0f080986da691a3bba7b757f43ab72cdc82b57ce","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}