{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Properties> dataSources = new HashMap<String, Properties>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Properties> dataSources = new HashMap<String, Properties>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","bugFix":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Properties> dataSources = new HashMap<String, Properties>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Properties> dataSources = new HashMap<String, Properties>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<String,String>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<String,String>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<Map<String ,String>>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<String, Map<String,String>>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<String,String>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<String,String>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreContainer().isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreContainer().isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreDescriptor().getCoreContainer()\n              .isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#readFromXml(Document).mjava","sourceNew":null,"sourceOld":"  public DIHConfiguration readFromXml(Document xmlDocument) {\n    DIHConfiguration config;\n    List<Map<String, String >> functions = new ArrayList<>();\n    Script script = null;\n    Map<String, Map<String,String>> dataSources = new HashMap<>();\n    \n    NodeList dataConfigTags = xmlDocument.getElementsByTagName(\"dataConfig\");\n    if(dataConfigTags == null || dataConfigTags.getLength() == 0) {\n      throw new DataImportHandlerException(SEVERE, \"the root node '<dataConfig>' is missing\");\n    }\n    Element e = (Element) dataConfigTags.item(0);\n    List<Element> documentTags = ConfigParseUtil.getChildNodes(e, \"document\");\n    if (documentTags.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n\n    List<Element> scriptTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.SCRIPT);\n    if (!scriptTags.isEmpty()) {\n      script = new Script(scriptTags.get(0));\n    }\n\n    // Add the provided evaluators\n    List<Element> functionTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.FUNCTION);\n    if (!functionTags.isEmpty()) {\n      for (Element element : functionTags) {\n        String func = ConfigParseUtil.getStringAttribute(element, NAME, null);\n        String clz = ConfigParseUtil.getStringAttribute(element, ConfigNameConstants.CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(ConfigParseUtil.getAllAttributes(element));\n        }\n      }\n    }\n    List<Element> dataSourceTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.DATA_SRC);\n    if (!dataSourceTags.isEmpty()) {\n      for (Element element : dataSourceTags) {\n        Map<String,String> p = new HashMap<>();\n        HashMap<String, String> attrs = ConfigParseUtil.getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.put(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.get(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Map<String,String> properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n    PropertyWriter pw = null;\n    List<Element> propertyWriterTags = ConfigParseUtil.getChildNodes(e, ConfigNameConstants.PROPERTY_WRITER);\n    if (propertyWriterTags.isEmpty()) {\n      boolean zookeeper = false;\n      if (this.core != null\n          && this.core.getCoreContainer().isZooKeeperAware()) {\n        zookeeper = true;\n      }\n      pw = new PropertyWriter(zookeeper ? \"ZKPropertiesWriter\"\n          : \"SimplePropertiesWriter\", Collections.<String,String> emptyMap());\n    } else if (propertyWriterTags.size() > 1) {\n      throw new DataImportHandlerException(SEVERE, \"Only one \"\n          + ConfigNameConstants.PROPERTY_WRITER + \" can be configured.\");\n    } else {\n      Element pwElement = propertyWriterTags.get(0);\n      String type = null;\n      Map<String,String> params = new HashMap<>();\n      for (Map.Entry<String,String> entry : ConfigParseUtil.getAllAttributes(\n          pwElement).entrySet()) {\n        if (TYPE.equals(entry.getKey())) {\n          type = entry.getValue();\n        } else {\n          params.put(entry.getKey(), entry.getValue());\n        }\n      }\n      if (type == null) {\n        throw new DataImportHandlerException(SEVERE, \"The \"\n            + ConfigNameConstants.PROPERTY_WRITER + \" element must specify \"\n            + TYPE);\n      }\n      pw = new PropertyWriter(type, params);\n    }\n    return new DIHConfiguration(documentTags.get(0), this, functions, script, dataSources, pw);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["5101aff20e65c9a285c274627ec956eb5409d253"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5101aff20e65c9a285c274627ec956eb5409d253","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5101aff20e65c9a285c274627ec956eb5409d253":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5101aff20e65c9a285c274627ec956eb5409d253":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}