{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionDISI#doNext(int).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/ConjunctionDISI#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    advanceHead: for(;;) {\n      assert doc == lead1.docID();\n\n      // find agreement between the two iterators with the lower costs\n      // we special case them because they do not need the\n      // 'other.docID() < doc' check that the 'others' iterators need\n      final int next2 = lead2.advance(doc);\n      if (next2 != doc) {\n        doc = lead1.advance(next2);\n        if (next2 != doc) {\n          continue;\n        }\n      }\n\n      // then find agreement with other iterators\n      for (DocIdSetIterator other : others) {\n        // other.doc may already be equal to doc if we \"continued advanceHead\"\n        // on the previous iteration and the advance on the lead scorer exactly matched.\n        if (other.docID() < doc) {\n          final int next = other.advance(doc);\n\n          if (next > doc) {\n            // iterator beyond the current doc - advance lead and continue to the new highest doc.\n            doc = lead1.advance(next);\n            continue advanceHead;\n          }\n        }\n      }\n\n      // success - all iterators are on the same doc\n      return doc;\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    advanceHead: for(;;) {\n      assert doc == lead1.docID();\n\n      // find agreement between the two iterators with the lower costs\n      // we special case them because they do not need the\n      // 'other.docID() < doc' check that the 'others' iterators need\n      final int next2 = lead2.advance(doc);\n      if (next2 != doc) {\n        doc = lead1.advance(next2);\n        if (next2 != doc) {\n          continue;\n        }\n      }\n\n      // then find agreement with other iterators\n      for (DocIdSetIterator other : others) {\n        // other.doc may already be equal to doc if we \"continued advanceHead\"\n        // on the previous iteration and the advance on the lead scorer exactly matched.\n        if (other.docID() < doc) {\n          final int next = other.advance(doc);\n\n          if (next > doc) {\n            // iterator beyond the current doc - advance lead and continue to the new highest doc.\n            doc = lead1.advance(next);\n            continue advanceHead;\n          }\n        }\n      }\n\n      // success - all iterators are on the same doc\n      return doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}