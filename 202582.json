{"path":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = in.read(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes read\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);      \n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret==-1) return r==0 ? -1 : r;\n      r += ret;\n      return r;\n    }\n\n    refill();\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n    \n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FastInputStream#read(byte[],int,int).mjava","sourceNew":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","sourceOld":"  @Override\n  public int read(byte b[], int off, int len) throws IOException {\n    int r=0;  // number of bytes we have read\n\n    // first read from our buffer;\n    if (end-pos > 0) {\n      r = Math.min(end-pos, len);\n      System.arraycopy(buf, pos, b, off, r);\n      pos += r;\n    }\n\n    if (r == len) return r;\n\n    // amount left to read is >= buffer size\n    if (len-r >= buf.length) {\n      int ret = readWrappedStream(b, off+r, len-r);\n      if (ret >= 0) {\n        readFromStream += ret;\n        r += ret;\n        return r;\n      } else {\n        // negative return code\n        return r > 0 ? r : -1;\n      }\n    }\n\n    refill();\n\n    // read rest from our buffer\n    if (end-pos > 0) {\n      int toRead = Math.min(end-pos, len-r);\n      System.arraycopy(buf, pos, b, off+r, toRead);\n      pos += toRead;\n      r += toRead;\n      return r;\n    }\n\n    return r > 0 ? r : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","19275ba31e621f6da1b83bf13af75233876fd3d4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}