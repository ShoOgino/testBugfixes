{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","commits":[{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      Term term = params.getTerm();\n      Map<BytesRef,CategoryListParams> fieldMap = termMap.get(term.field());\n      if (fieldMap == null) {\n        fieldMap = new HashMap<BytesRef,CategoryListParams>(1);\n        termMap.put(term.field(), fieldMap);\n      }\n      fieldMap.put(term.bytes(), params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      Term term = params.getTerm();\n      Map<BytesRef,CategoryListParams> fieldMap = termMap.get(term.field());\n      if (fieldMap == null) {\n        fieldMap = new HashMap<BytesRef,CategoryListParams>(1);\n        termMap.put(term.field(), fieldMap);\n      }\n      fieldMap.put(term.bytes(), params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      Term term = params.getTerm();\n      Map<BytesRef,CategoryListParams> fieldMap = termMap.get(term.field());\n      if (fieldMap == null) {\n        fieldMap = new HashMap<BytesRef,CategoryListParams>(1);\n        termMap.put(term.field(), fieldMap);\n      }\n      fieldMap.put(term.bytes(), params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      dvFieldMap.put(params.field, params);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      Term term = params.getTerm();\n      Map<BytesRef,CategoryListParams> fieldMap = termMap.get(term.field());\n      if (fieldMap == null) {\n        fieldMap = new HashMap<BytesRef,CategoryListParams>(1);\n        termMap.put(term.field(), fieldMap);\n      }\n      fieldMap.put(term.bytes(), params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      dvFieldMap.put(params.field, params);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      Term term = params.getTerm();\n      Map<BytesRef,CategoryListParams> fieldMap = termMap.get(term.field());\n      if (fieldMap == null) {\n        fieldMap = new HashMap<BytesRef,CategoryListParams>(1);\n        termMap.put(term.field(), fieldMap);\n      }\n      fieldMap.put(term.bytes(), params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetIndexingParams).mjava","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      dvFieldMap.put(params.field, params);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetIndexingParams indexingParams) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    for (CategoryListParams params: indexingParams.getAllCategoryListParams()) {\n      dvFieldMap.put(params.field, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["bc124b3b129ef11a255212f3af482b771c5b3a6c","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["bc124b3b129ef11a255212f3af482b771c5b3a6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","bc124b3b129ef11a255212f3af482b771c5b3a6c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["c4015cd39dff8d4dec562d909f9766debac53aa6","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}