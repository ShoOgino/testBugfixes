{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testRestoreState().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    String newNode = cluster.simAddNode();\n\n    // remove a node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n\n    NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    // stop the newly created node\n    cluster.simRemoveNode(newNode, false);\n\n    trigger.run(); // this run should detect the lost node\n    trigger.close(); // close the old trigger\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"node_lost_trigger\")) {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeLostListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" + eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    String newNode = cluster.simAddNode();\n\n    // remove a node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n\n    NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    // stop the newly created node\n    cluster.simRemoveNode(newNode, false);\n\n    trigger.run(); // this run should detect the lost node\n    trigger.close(); // close the old trigger\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"node_lost_trigger\")) {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeLostListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" + eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    String newNode = cluster.simAddNode();\n\n    // remove a node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n\n    NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    // stop the newly created node\n    cluster.simRemoveNode(newNode, false);\n\n    trigger.run(); // this run should detect the lost node\n    trigger.close(); // close the old trigger\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"node_lost_trigger\")) {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeLostListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" + eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    String newNode = cluster.simAddNode();\n\n    // remove a node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n\n    NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    // stop the newly created node\n    cluster.simRemoveNode(newNode, false);\n\n    trigger.run(); // this run should detect the lost node\n    trigger.close(); // close the old trigger\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"node_lost_trigger\")) {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeLostListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" + eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testRestoreState().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    String newNode = cluster.simAddNode();\n\n    // remove a node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n\n    NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    // stop the newly created node\n    cluster.simRemoveNode(newNode, false);\n\n    trigger.run(); // this run should detect the lost node\n    trigger.close(); // close the old trigger\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeLostTrigger newTrigger = new NodeLostTrigger(\"node_lost_trigger\")) {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeLostListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" + eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeLostEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}