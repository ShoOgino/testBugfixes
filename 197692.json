{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","commits":[{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    \n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n        Stat stat = Stat.forName(paramKey);\n        if (stat != null) {\n          statSpecifiedByLocalParam = true;\n          // TODO: this isn't going to work for planned \"non-boolean' stats - eg: SOLR-6350, SOLR-6968\n          if (localParams.getBool(paramKey, false)) {\n            statsInResponse.add(stat);\n            statsToCalculate.addAll(stat.getDistribDeps());\n          }\n        }\n    }\n    \n    // if no individual stat setting. \n    if ( ! statSpecifiedByLocalParam ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n      for (Stat stat : statsInResponse) {\n        statsToCalculate.addAll(stat.getDistribDeps());\n      }\n    }\n\n    // calcDistinct has special \"default\" behavior using top level CalcDistinct param\n    if (topLevelCalcDistinct && localParams.getBool(Stat.calcdistinct.toString(), true)) {\n      statsInResponse.add(Stat.calcdistinct);\n      statsToCalculate.addAll(Stat.calcdistinct.getDistribDeps());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","sourceNew":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    \n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n      Stat stat = Stat.forName(paramKey);\n      if (stat != null) {\n        statSpecifiedByLocalParam = true;\n        if (stat.parseParams(this)) {\n          statsInResponse.add(stat);\n          statsToCalculate.addAll(stat.getDistribDeps());\n        }\n      }\n    }\n\n    // if no individual stat setting. \n    if ( ! statSpecifiedByLocalParam ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n      for (Stat stat : statsInResponse) {\n        statsToCalculate.addAll(stat.getDistribDeps());\n      }\n    }\n\n    // calcDistinct has special \"default\" behavior using top level CalcDistinct param\n    if (topLevelCalcDistinct && localParams.getBool(Stat.calcdistinct.toString(), true)) {\n      statsInResponse.add(Stat.calcdistinct);\n      statsToCalculate.addAll(Stat.calcdistinct.getDistribDeps());\n    }\n  }\n\n","sourceOld":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    \n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n        Stat stat = Stat.forName(paramKey);\n        if (stat != null) {\n          statSpecifiedByLocalParam = true;\n          // TODO: this isn't going to work for planned \"non-boolean' stats - eg: SOLR-6350, SOLR-6968\n          if (localParams.getBool(paramKey, false)) {\n            statsInResponse.add(stat);\n            statsToCalculate.addAll(stat.getDistribDeps());\n          }\n        }\n    }\n    \n    // if no individual stat setting. \n    if ( ! statSpecifiedByLocalParam ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n      for (Stat stat : statsInResponse) {\n        statsToCalculate.addAll(stat.getDistribDeps());\n      }\n    }\n\n    // calcDistinct has special \"default\" behavior using top level CalcDistinct param\n    if (topLevelCalcDistinct && localParams.getBool(Stat.calcdistinct.toString(), true)) {\n      statsInResponse.add(Stat.calcdistinct);\n      statsToCalculate.addAll(Stat.calcdistinct.getDistribDeps());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    \n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n      Stat stat = Stat.forName(paramKey);\n      if (stat != null) {\n        statSpecifiedByLocalParam = true;\n        if (stat.parseParams(this)) {\n          statsInResponse.add(stat);\n          statsToCalculate.addAll(stat.getDistribDeps());\n        }\n      }\n    }\n\n    // if no individual stat setting. \n    if ( ! statSpecifiedByLocalParam ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n      for (Stat stat : statsInResponse) {\n        statsToCalculate.addAll(stat.getDistribDeps());\n      }\n    }\n\n    // calcDistinct has special \"default\" behavior using top level CalcDistinct param\n    if (topLevelCalcDistinct && localParams.getBool(Stat.calcdistinct.toString(), true)) {\n      statsInResponse.add(Stat.calcdistinct);\n      statsToCalculate.addAll(Stat.calcdistinct.getDistribDeps());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7062fc1cf235b04a88adfc21dc68e040c82561","date":1431110643,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#populateStatsSets().mjava","sourceNew":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    \n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n      Stat stat = Stat.forName(paramKey);\n      if (stat != null) {\n        statSpecifiedByLocalParam = true;\n        if (stat.parseParams(this)) {\n          statsInResponse.add(stat);\n        }\n      }\n    }\n\n    // if no individual stat setting use the default set\n    if ( ! ( statSpecifiedByLocalParam\n             // calcdistinct (as a local param) is a psuedo-stat, prevents default set\n             || localParams.getBool(\"calcdistinct\", false) ) ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n    }\n\n    // calcDistinct is a psuedo-stat with optional top level param default behavior\n    // if not overridden by the specific individual stats\n    if (localParams.getBool(\"calcdistinct\", topLevelCalcDistinct)) {\n      for (Stat stat : CALCDISTINCT_PSUEDO_STAT) {\n        // assume true, but don't include if specific stat overrides\n        if (localParams.getBool(stat.name(), true)) {\n          statsInResponse.add(stat);\n        }\n      }\n    }\n\n    for (Stat stat : statsInResponse) {\n      statsToCalculate.addAll(stat.getDistribDeps());\n    }\n  }\n\n","sourceOld":"  /**\n   * A helper method which inspects the {@link #localParams} associated with this StatsField, \n   * and uses them to populate the {@link #statsInResponse} and {@link #statsToCalculate} data \n   * structures\n   */\n  private void populateStatsSets() {\n    boolean statSpecifiedByLocalParam = false;\n    // local individual stat\n    Iterator<String> itParams = localParams.getParameterNamesIterator();\n    \n    while (itParams.hasNext()) {\n      String paramKey = itParams.next();\n      Stat stat = Stat.forName(paramKey);\n      if (stat != null) {\n        statSpecifiedByLocalParam = true;\n        if (stat.parseParams(this)) {\n          statsInResponse.add(stat);\n          statsToCalculate.addAll(stat.getDistribDeps());\n        }\n      }\n    }\n\n    // if no individual stat setting. \n    if ( ! statSpecifiedByLocalParam ) {\n      statsInResponse.addAll(DEFAULT_STATS);\n      for (Stat stat : statsInResponse) {\n        statsToCalculate.addAll(stat.getDistribDeps());\n      }\n    }\n\n    // calcDistinct has special \"default\" behavior using top level CalcDistinct param\n    if (topLevelCalcDistinct && localParams.getBool(Stat.calcdistinct.toString(), true)) {\n      statsInResponse.add(Stat.calcdistinct);\n      statsToCalculate.addAll(Stat.calcdistinct.getDistribDeps());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1002283cfd29923d517db7c33e07bb54aac7acd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e7062fc1cf235b04a88adfc21dc68e040c82561"]},"commit2Childs":{"2e7062fc1cf235b04a88adfc21dc68e040c82561":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["2e7062fc1cf235b04a88adfc21dc68e040c82561","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}