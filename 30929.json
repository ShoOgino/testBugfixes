{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","commits":[{"id":"a2576170b353998ba9157b6d148ebfde21138316","date":1523488980,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(Object left, Object right) {\n      for (PreferenceRule preferenceRule: this.preferenceRules) {\n        final boolean lhs;\n        final boolean rhs;\n        switch (preferenceRule.name) {\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n            lhs = hasReplicaType(left, preferenceRule.value);\n            rhs = hasReplicaType(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n            lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n            rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n        }\n        if (lhs != rhs) {\n          return lhs ? -1 : +1;\n        }\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(Object left, Object right) {\n      for (PreferenceRule preferenceRule: this.preferenceRules) {\n        final boolean lhs;\n        final boolean rhs;\n        switch (preferenceRule.name) {\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n            lhs = hasReplicaType(left, preferenceRule.value);\n            rhs = hasReplicaType(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n            lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n            rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n        }\n        if (lhs != rhs) {\n          return lhs ? -1 : +1;\n        }\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","sourceNew":"    @Override\n    public int compare(Object left, Object right) {\n      for (PreferenceRule preferenceRule: this.preferenceRules) {\n        final boolean lhs;\n        final boolean rhs;\n        switch (preferenceRule.name) {\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n            lhs = hasReplicaType(left, preferenceRule.value);\n            rhs = hasReplicaType(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n            lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n            rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP:\n            if (sysPropsCache == null) {\n              throw new IllegalArgumentException(\"Unable to get the NodesSysPropsCacher\" +\n                  \" on sorting replicas by preference:\"+ preferenceRule.value);\n            }\n            lhs = hasSameMetric(left, preferenceRule.value);\n            rhs = hasSameMetric(right, preferenceRule.value);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n        }\n        if (lhs != rhs) {\n          return lhs ? -1 : +1;\n        }\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compare(Object left, Object right) {\n      for (PreferenceRule preferenceRule: this.preferenceRules) {\n        final boolean lhs;\n        final boolean rhs;\n        switch (preferenceRule.name) {\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n            lhs = hasReplicaType(left, preferenceRule.value);\n            rhs = hasReplicaType(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n            lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n            rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n        }\n        if (lhs != rhs) {\n          return lhs ? -1 : +1;\n        }\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","sourceNew":"    @Override\n    public int compare(Object left, Object right) {\n      if (this.sortRules != null) {\n        for (PreferenceRule preferenceRule: this.sortRules) {\n          final boolean lhs;\n          final boolean rhs;\n          switch (preferenceRule.name) {\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n              lhs = hasReplicaType(left, preferenceRule.value);\n              rhs = hasReplicaType(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n              lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n              rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP:\n              if (sysPropsCache == null) {\n                throw new IllegalArgumentException(\"Unable to get the NodesSysPropsCacher\" +\n                    \" on sorting replicas by preference:\"+ preferenceRule.value);\n              }\n              lhs = hasSameMetric(left, preferenceRule.value);\n              rhs = hasSameMetric(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_BASE:\n              throw new IllegalArgumentException(\"only one base replica order may be specified in \"\n                  + ShardParams.SHARDS_PREFERENCE + \", and it must be specified last\");\n            default:\n              throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n          }\n          if (lhs != rhs) {\n            return lhs ? -1 : +1;\n          }\n        }\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compare(Object left, Object right) {\n      for (PreferenceRule preferenceRule: this.preferenceRules) {\n        final boolean lhs;\n        final boolean rhs;\n        switch (preferenceRule.name) {\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n            lhs = hasReplicaType(left, preferenceRule.value);\n            rhs = hasReplicaType(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n            lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n            rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n            break;\n          case ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP:\n            if (sysPropsCache == null) {\n              throw new IllegalArgumentException(\"Unable to get the NodesSysPropsCacher\" +\n                  \" on sorting replicas by preference:\"+ preferenceRule.value);\n            }\n            lhs = hasSameMetric(left, preferenceRule.value);\n            rhs = hasSameMetric(right, preferenceRule.value);\n            break;\n          default:\n            throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n        }\n        if (lhs != rhs) {\n          return lhs ? -1 : +1;\n        }\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.NodePreferenceRulesComparator#compare(Object,Object).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(Object left, Object right) {\n      if (this.sortRules != null) {\n        for (PreferenceRule preferenceRule: this.sortRules) {\n          final boolean lhs;\n          final boolean rhs;\n          switch (preferenceRule.name) {\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:\n              lhs = hasReplicaType(left, preferenceRule.value);\n              rhs = hasReplicaType(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:\n              lhs = hasCoreUrlPrefix(left, preferenceRule.value);\n              rhs = hasCoreUrlPrefix(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP:\n              if (sysPropsCache == null) {\n                throw new IllegalArgumentException(\"Unable to get the NodesSysPropsCacher\" +\n                    \" on sorting replicas by preference:\"+ preferenceRule.value);\n              }\n              lhs = hasSameMetric(left, preferenceRule.value);\n              rhs = hasSameMetric(right, preferenceRule.value);\n              break;\n            case ShardParams.SHARDS_PREFERENCE_REPLICA_BASE:\n              throw new IllegalArgumentException(\"only one base replica order may be specified in \"\n                  + ShardParams.SHARDS_PREFERENCE + \", and it must be specified last\");\n            default:\n              throw new IllegalArgumentException(\"Invalid \" + ShardParams.SHARDS_PREFERENCE + \" type: \" + preferenceRule.name);\n          }\n          if (lhs != rhs) {\n            return lhs ? -1 : +1;\n          }\n        }\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2576170b353998ba9157b6d148ebfde21138316"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["033183e9e2da4609614733f0226a38c88c49ed36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2576170b353998ba9157b6d148ebfde21138316":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"],"033183e9e2da4609614733f0226a38c88c49ed36":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["033183e9e2da4609614733f0226a38c88c49ed36"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","a2576170b353998ba9157b6d148ebfde21138316"],"a2576170b353998ba9157b6d148ebfde21138316":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"033183e9e2da4609614733f0226a38c88c49ed36":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}