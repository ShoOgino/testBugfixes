{"path":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","commits":[{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","pathOld":"/dev/null","sourceNew":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DN LIV  MY\n    l.add(new CountsForEachShard(1, 3, 1));\n    l.add(new CountsForEachShard(0, 3, 2));\n    l.add(new CountsForEachShard(0, 3, 3));\n    l.add(new CountsForEachShard(0, 3, 4));\n    l.add(new CountsForEachShard(1, 0, 2));\n    l.add(new CountsForEachShard(1, 0, 1));\n    l.add(new CountsForEachShard(2, 5, 1));\n    l.add(new CountsForEachShard(2, 4, 2));\n    l.add(new CountsForEachShard(2, 3, 3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy);\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e3946d6df787ef46b6ae74ac794416b31dddeec","date":1468679083,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","sourceNew":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DN LIV  MY\n    l.add(new CountsForEachShard(1, 3, 1));\n    l.add(new CountsForEachShard(0, 3, 2));\n    l.add(new CountsForEachShard(0, 3, 3));\n    l.add(new CountsForEachShard(0, 3, 4));\n    l.add(new CountsForEachShard(1, 0, 2));\n    l.add(new CountsForEachShard(1, 0, 1));\n    l.add(new CountsForEachShard(2, 5, 1));\n    l.add(new CountsForEachShard(2, 4, 2));\n    l.add(new CountsForEachShard(2, 3, 3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","sourceOld":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DN LIV  MY\n    l.add(new CountsForEachShard(1, 3, 1));\n    l.add(new CountsForEachShard(0, 3, 2));\n    l.add(new CountsForEachShard(0, 3, 3));\n    l.add(new CountsForEachShard(0, 3, 4));\n    l.add(new CountsForEachShard(1, 0, 2));\n    l.add(new CountsForEachShard(1, 0, 1));\n    l.add(new CountsForEachShard(2, 5, 1));\n    l.add(new CountsForEachShard(2, 4, 2));\n    l.add(new CountsForEachShard(2, 3, 3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy);\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3783d6f4d080f4f0116769e0e1b0f0f440565c4","date":1468932683,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","sourceNew":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DOWN LIVE  MY\n    l.add(new CountsForEachShard(1,     3,  1));\n    l.add(new CountsForEachShard(0,     3,  2));\n    l.add(new CountsForEachShard(0,     3,  3));\n    l.add(new CountsForEachShard(0,     3,  4));\n    l.add(new CountsForEachShard(1,     0,  2));\n    l.add(new CountsForEachShard(1,     0,  1));\n    l.add(new CountsForEachShard(2,     5,  1));\n    l.add(new CountsForEachShard(2,     4,  2));\n    l.add(new CountsForEachShard(2,     3,  3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","sourceOld":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DN LIV  MY\n    l.add(new CountsForEachShard(1, 3, 1));\n    l.add(new CountsForEachShard(0, 3, 2));\n    l.add(new CountsForEachShard(0, 3, 3));\n    l.add(new CountsForEachShard(0, 3, 4));\n    l.add(new CountsForEachShard(1, 0, 2));\n    l.add(new CountsForEachShard(1, 0, 1));\n    l.add(new CountsForEachShard(2, 5, 1));\n    l.add(new CountsForEachShard(2, 4, 2));\n    l.add(new CountsForEachShard(2, 3, 3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","bugFix":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","pathOld":"/dev/null","sourceNew":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DOWN LIVE  MY\n    l.add(new CountsForEachShard(1,     3,  1));\n    l.add(new CountsForEachShard(0,     3,  2));\n    l.add(new CountsForEachShard(0,     3,  3));\n    l.add(new CountsForEachShard(0,     3,  4));\n    l.add(new CountsForEachShard(1,     0,  2));\n    l.add(new CountsForEachShard(1,     0,  1));\n    l.add(new CountsForEachShard(2,     5,  1));\n    l.add(new CountsForEachShard(2,     4,  2));\n    l.add(new CountsForEachShard(2,     3,  3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919b9b89b8d44ea491f18a92e6d52efcf5f7a065","date":1585280660,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#testComparator().mjava","sourceNew":"  @Test\n  public void testComparator() {\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(inputCounts);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expectedCounts.get(j), copy.get(j));\n      }\n    }\n  }\n\n","sourceOld":"  public void testComparator() {\n    List<CountsForEachShard> l = new ArrayList<>();\n    //                           DOWN LIVE  MY\n    l.add(new CountsForEachShard(1,     3,  1));\n    l.add(new CountsForEachShard(0,     3,  2));\n    l.add(new CountsForEachShard(0,     3,  3));\n    l.add(new CountsForEachShard(0,     3,  4));\n    l.add(new CountsForEachShard(1,     0,  2));\n    l.add(new CountsForEachShard(1,     0,  1));\n    l.add(new CountsForEachShard(2,     5,  1));\n    l.add(new CountsForEachShard(2,     4,  2));\n    l.add(new CountsForEachShard(2,     3,  3));\n\n    List<CountsForEachShard> expected = Arrays.asList(\n        new CountsForEachShard(0, 3, 2),\n        new CountsForEachShard(0, 3, 3),\n        new CountsForEachShard(0, 3, 4),\n        new CountsForEachShard(1, 3, 1),\n        new CountsForEachShard(2, 5, 1),\n        new CountsForEachShard(2, 4, 2),\n        new CountsForEachShard(2, 3, 3),\n        new CountsForEachShard(1, 0, 1),\n        new CountsForEachShard(1, 0, 2)\n\n    );\n\n    for (int i = 0; i < 10; i++) {\n      List<CountsForEachShard> copy = new ArrayList<>(l);\n      Collections.shuffle(copy, random());\n      Collections.sort(copy, CoreSorter.countsComparator);\n      for (int j = 0; j < copy.size(); j++) {\n        assertEquals(expected.get(j), copy.get(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["9e3946d6df787ef46b6ae74ac794416b31dddeec"],"9e3946d6df787ef46b6ae74ac794416b31dddeec":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065"]},"commit2Childs":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["9e3946d6df787ef46b6ae74ac794416b31dddeec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22a92d60a5a6320f9653856966fcd77c60953b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9e3946d6df787ef46b6ae74ac794416b31dddeec":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}