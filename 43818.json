{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","commits":[{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrServer cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(\"lazy\".equals( ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"startup\")))) {\n        Map map = getRespMap(\"/x?wt=json\",writeHarness);\n        if(map.containsKey(\"params\")) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not register requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    success = false;\n    startTime = System.nanoTime();\n    maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(\"b\".equals( ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\")))) {\n          success = true;\n          break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not update requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    success = false;\n    startTime = System.nanoTime();\n    maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrServer cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrServer cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    boolean success = false;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(\"lazy\".equals( ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"startup\")))) {\n        Map map = getRespMap(\"/x?wt=json\",writeHarness);\n        if(map.containsKey(\"params\")) {\n          success = true;\n          break;\n        }\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not register requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    success = false;\n    startTime = System.nanoTime();\n    maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(\"b\".equals( ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\")))) {\n          success = true;\n          break;\n      }\n      Thread.sleep(100);\n\n    }\n\n    assertTrue( \"Could not update requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    success = false;\n    startTime = System.nanoTime();\n    maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrServer cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}