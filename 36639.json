{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","commits":[{"id":"fafedf8c0d7ec59d788fbf0e3881ba8178c05158","date":1485844621,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"/dev/null","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5472128d0555d9a5cd0a954d393d274708a288d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0debbe3b933db3b47fdc5984fbe24e55324d3ed4","date":1485866433,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"/dev/null","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"/dev/null","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb68f079f419775039c1a2550091697b4fb1eb23","date":1486440190,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5472128d0555d9a5cd0a954d393d274708a288d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, \"collection2\", \"collection3\");\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, coreName);\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5472128d0555d9a5cd0a954d393d274708a288d6","date":1504577124,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["fafedf8c0d7ec59d788fbf0e3881ba8178c05158","fb68f079f419775039c1a2550091697b4fb1eb23"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @BadApple(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-10101\")\n  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n\n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n\n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n\n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n\n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n\n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n\n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n\n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n\n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac90ca17453be359d8f4a124dc6a369730fe1b16","date":1511286940,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["effbe22c08ba1017468be605cc33ddeab68ec9b8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e90dd0b64429dc7138401e6da40805ab536751bd","date":1511287039,"type":3,"author":"Erick","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39c830d7063b84a924dd9f3285b6660e34bb8b26","date":1511305529,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5fc4ee66b1f9c6fd5e69d65cfb6dd286f5beb9fc","date":1513814402,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n    DirectUpdateHandler2.commitOnClose = true;\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"effbe22c08ba1017468be605cc33ddeab68ec9b8","date":1514394473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    String infoStream = System.getProperty(\"solr.tests.infostream\");\n    System.setProperty(\"solr.tests.infostream\",\"true\");\n    DirectUpdateHandler2.commitOnClose = true;\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n    if (infoStream != null) {\n      System.setProperty(\"solr.tests.infostream\", infoStream);\n    } else {\n      System.clearProperty(\"solr.tests.infostream\");\n    }\n  }\n\n","bugFix":["ac90ca17453be359d8f4a124dc6a369730fe1b16"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testNoCommit().mjava","sourceNew":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.\n  // Note, this needs FS-based indexes to persist!\n  // Cores 2, 3, 6, 7, 8, 9 are transient\n  @Test\n  public void testNoCommit() throws Exception {\n    DirectUpdateHandler2.commitOnClose = true;\n\n    CoreContainer cc = init();\n    String[] coreList = new String[]{\n        \"collection2\",\n        \"collection3\",\n        \"collection6\",\n        \"collection7\",\n        \"collection8\",\n        \"collection9\"\n    };\n    try {\n      // First, go through all the transient cores and add some docs. DO NOT COMMIT!\n      // The aged-out core should commit the docs when it gets closed.\n      List<SolrCore> openCores = new ArrayList<>();\n      for (String coreName : coreList) {\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        add10(core);\n      }\n      \n      // Just proving that some cores have been aged out.\n      checkNotInCores(cc, Arrays.asList(\"collection2\", \"collection3\"));\n\n      // Close our get of all cores above.\n      for (SolrCore core : openCores) core.close();\n      openCores.clear();\n      \n      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero \n      checkInCores(cc, \"collection1\", \"collection5\",\n          \"collection6\", \"collection7\", \"collection8\", \"collection9\");\n\n      for (String coreName : coreList) {\n        // The point of this test is to insure that when cores are aged out and re-opened\n        // that the docs are there, so insure that the core we're testing is gone, gone, gone. \n        checkNotInCores(cc, Arrays.asList(coreName));\n        \n        // Load the core up again.\n        SolrCore core = cc.getCore(coreName);\n        openCores.add(core);\n        \n        // Insure docs are still there.\n        check10(core);\n      }\n      for (SolrCore core : openCores) core.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["28288370235ed02234a64753cdbf0c6ec096304a","5472128d0555d9a5cd0a954d393d274708a288d6"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fafedf8c0d7ec59d788fbf0e3881ba8178c05158"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["fb68f079f419775039c1a2550091697b4fb1eb23"],"39c830d7063b84a924dd9f3285b6660e34bb8b26":["48e6317c36b128552eaed2363bb069267defb0e0","e90dd0b64429dc7138401e6da40805ab536751bd"],"30c8e5574b55d57947e989443dfde611646530ee":["fb68f079f419775039c1a2550091697b4fb1eb23","28288370235ed02234a64753cdbf0c6ec096304a"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"ac90ca17453be359d8f4a124dc6a369730fe1b16":["48e6317c36b128552eaed2363bb069267defb0e0"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["effbe22c08ba1017468be605cc33ddeab68ec9b8"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb68f079f419775039c1a2550091697b4fb1eb23","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["30c8e5574b55d57947e989443dfde611646530ee","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"fb68f079f419775039c1a2550091697b4fb1eb23":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["28288370235ed02234a64753cdbf0c6ec096304a","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fc4ee66b1f9c6fd5e69d65cfb6dd286f5beb9fc":["39c830d7063b84a924dd9f3285b6660e34bb8b26"],"5472128d0555d9a5cd0a954d393d274708a288d6":["28288370235ed02234a64753cdbf0c6ec096304a"],"effbe22c08ba1017468be605cc33ddeab68ec9b8":["5fc4ee66b1f9c6fd5e69d65cfb6dd286f5beb9fc"],"fafedf8c0d7ec59d788fbf0e3881ba8178c05158":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"e90dd0b64429dc7138401e6da40805ab536751bd":["48e6317c36b128552eaed2363bb069267defb0e0","ac90ca17453be359d8f4a124dc6a369730fe1b16"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0debbe3b933db3b47fdc5984fbe24e55324d3ed4":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","fb68f079f419775039c1a2550091697b4fb1eb23"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"39c830d7063b84a924dd9f3285b6660e34bb8b26":["5fc4ee66b1f9c6fd5e69d65cfb6dd286f5beb9fc"],"30c8e5574b55d57947e989443dfde611646530ee":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"ac90ca17453be359d8f4a124dc6a369730fe1b16":["e90dd0b64429dc7138401e6da40805ab536751bd"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["b21283ed01203901a7257aa4b7f0a0899c86e56e","30c8e5574b55d57947e989443dfde611646530ee","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","5472128d0555d9a5cd0a954d393d274708a288d6"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"fb68f079f419775039c1a2550091697b4fb1eb23":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8","685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0debbe3b933db3b47fdc5984fbe24e55324d3ed4","fafedf8c0d7ec59d788fbf0e3881ba8178c05158"],"5fc4ee66b1f9c6fd5e69d65cfb6dd286f5beb9fc":["effbe22c08ba1017468be605cc33ddeab68ec9b8"],"5472128d0555d9a5cd0a954d393d274708a288d6":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"effbe22c08ba1017468be605cc33ddeab68ec9b8":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"fafedf8c0d7ec59d788fbf0e3881ba8178c05158":["0debbe3b933db3b47fdc5984fbe24e55324d3ed4"],"48e6317c36b128552eaed2363bb069267defb0e0":["39c830d7063b84a924dd9f3285b6660e34bb8b26","ac90ca17453be359d8f4a124dc6a369730fe1b16","e90dd0b64429dc7138401e6da40805ab536751bd"],"e90dd0b64429dc7138401e6da40805ab536751bd":["39c830d7063b84a924dd9f3285b6660e34bb8b26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}