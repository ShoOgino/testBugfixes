{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testDeepPaging().mjava","commits":[{"id":"50eb25774a5690a93352e49e7732b8008c5e681e","date":1328112094,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testDeepPaging().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeepPaging() throws Exception {\n    for (int i = 0; i < 1000; i++){\n      assertU(adoc(\"id\", String.valueOf(i),  \"foo_t\", English.intToEnglish(i)));\n    }\n    assertU(commit());\n    SolrQueryRequest goldReq = null;\n    try {\n      goldReq = req(\"q\", \"foo_t:one\", \"rows\", \"50\", \"fl\", \"docid, score\");\n      SolrQueryResponse gold = h.queryAndResponse(\"standard\", goldReq);\n      ResultContext response = (ResultContext) gold.getValues().get(\"response\");\n      assertQ(\"page: \" + 0 + \" failed\",\n          req(\"q\", \"foo_t:one\", \"rows\", \"10\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\"),\n          \"*[count(//doc)=10]\");\n      //ugh, what a painful way to get the document\n      DocIterator iterator = response.docs.subset(9, 1).iterator();\n      int lastDoc = iterator.nextDoc();\n      float lastScore = iterator.score();\n      for (int i = 1; i < 5; i++){\n        //page through some results\n        DocList subset = response.docs.subset(i * 10, 1);\n        iterator = subset.iterator();\n        int compareDoc = iterator.nextDoc();\n        float compareScore = iterator.score();\n        assertQ(\"page: \" + i + \" failed\",\n            req(\"q\", \"foo_t:one\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\",\n                \"start\", String.valueOf(i * 10), \"rows\", \"1\",  //only get one doc, and then compare it to gold\n                CommonParams.PAGEDOC, String.valueOf(lastDoc), CommonParams.PAGESCORE, String.valueOf(lastScore)),\n            \"*[count(//doc)=1]\",\n            \"//float[@name='score'][.='\" + compareScore + \"']\",\n            \"//int[@name='[docid]'][.='\" + compareDoc + \"']\"\n        );\n        lastScore = compareScore;\n        lastDoc = compareDoc;\n\n      }\n    } finally {\n      if (goldReq != null ) {\n        goldReq.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28f769c762bf83c4a63b2b1277c74f3af56c2576","date":1328130924,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testDeepPaging().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testDeepPaging().mjava","sourceNew":"  @Ignore(\"See SOLR-1726\")\n  @Test\n  public void testDeepPaging() throws Exception {\n    for (int i = 0; i < 1000; i++){\n      assertU(adoc(\"id\", String.valueOf(i),  \"foo_t\", English.intToEnglish(i)));\n    }\n    assertU(commit());\n    SolrQueryRequest goldReq = null;\n    try {\n      goldReq = req(\"q\", \"foo_t:one\", \"rows\", \"50\", \"fl\", \"docid, score\");\n      SolrQueryResponse gold = h.queryAndResponse(\"standard\", goldReq);\n      ResultContext response = (ResultContext) gold.getValues().get(\"response\");\n      assertQ(\"page: \" + 0 + \" failed\",\n          req(\"q\", \"foo_t:one\", \"rows\", \"10\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\"),\n          \"*[count(//doc)=10]\");\n      //ugh, what a painful way to get the document\n      DocIterator iterator = response.docs.subset(9, 1).iterator();\n      int lastDoc = iterator.nextDoc();\n      float lastScore = iterator.score();\n      for (int i = 1; i < 5; i++){\n        //page through some results\n        DocList subset = response.docs.subset(i * 10, 1);\n        iterator = subset.iterator();\n        int compareDoc = iterator.nextDoc();\n        float compareScore = iterator.score();\n        assertQ(\"page: \" + i + \" failed\",\n            req(\"q\", \"foo_t:one\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\",\n                \"start\", String.valueOf(i * 10), \"rows\", \"1\",  //only get one doc, and then compare it to gold\n                CommonParams.PAGEDOC, String.valueOf(lastDoc), CommonParams.PAGESCORE, String.valueOf(lastScore)),\n            \"*[count(//doc)=1]\",\n            \"//float[@name='score'][.='\" + compareScore + \"']\",\n            \"//int[@name='[docid]'][.='\" + compareDoc + \"']\"\n        );\n        lastScore = compareScore;\n        lastDoc = compareDoc;\n\n      }\n    } finally {\n      if (goldReq != null ) {\n        goldReq.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeepPaging() throws Exception {\n    for (int i = 0; i < 1000; i++){\n      assertU(adoc(\"id\", String.valueOf(i),  \"foo_t\", English.intToEnglish(i)));\n    }\n    assertU(commit());\n    SolrQueryRequest goldReq = null;\n    try {\n      goldReq = req(\"q\", \"foo_t:one\", \"rows\", \"50\", \"fl\", \"docid, score\");\n      SolrQueryResponse gold = h.queryAndResponse(\"standard\", goldReq);\n      ResultContext response = (ResultContext) gold.getValues().get(\"response\");\n      assertQ(\"page: \" + 0 + \" failed\",\n          req(\"q\", \"foo_t:one\", \"rows\", \"10\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\"),\n          \"*[count(//doc)=10]\");\n      //ugh, what a painful way to get the document\n      DocIterator iterator = response.docs.subset(9, 1).iterator();\n      int lastDoc = iterator.nextDoc();\n      float lastScore = iterator.score();\n      for (int i = 1; i < 5; i++){\n        //page through some results\n        DocList subset = response.docs.subset(i * 10, 1);\n        iterator = subset.iterator();\n        int compareDoc = iterator.nextDoc();\n        float compareScore = iterator.score();\n        assertQ(\"page: \" + i + \" failed\",\n            req(\"q\", \"foo_t:one\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\",\n                \"start\", String.valueOf(i * 10), \"rows\", \"1\",  //only get one doc, and then compare it to gold\n                CommonParams.PAGEDOC, String.valueOf(lastDoc), CommonParams.PAGESCORE, String.valueOf(lastScore)),\n            \"*[count(//doc)=1]\",\n            \"//float[@name='score'][.='\" + compareScore + \"']\",\n            \"//int[@name='[docid]'][.='\" + compareDoc + \"']\"\n        );\n        lastScore = compareScore;\n        lastDoc = compareDoc;\n\n      }\n    } finally {\n      if (goldReq != null ) {\n        goldReq.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testDeepPaging().mjava","sourceNew":null,"sourceOld":"  @Ignore(\"See SOLR-1726\")\n  @Test\n  public void testDeepPaging() throws Exception {\n    for (int i = 0; i < 1000; i++){\n      assertU(adoc(\"id\", String.valueOf(i),  \"foo_t\", English.intToEnglish(i)));\n    }\n    assertU(commit());\n    SolrQueryRequest goldReq = null;\n    try {\n      goldReq = req(\"q\", \"foo_t:one\", \"rows\", \"50\", \"fl\", \"docid, score\");\n      SolrQueryResponse gold = h.queryAndResponse(\"standard\", goldReq);\n      ResultContext response = (ResultContext) gold.getValues().get(\"response\");\n      assertQ(\"page: \" + 0 + \" failed\",\n          req(\"q\", \"foo_t:one\", \"rows\", \"10\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\"),\n          \"*[count(//doc)=10]\");\n      //ugh, what a painful way to get the document\n      DocIterator iterator = response.docs.subset(9, 1).iterator();\n      int lastDoc = iterator.nextDoc();\n      float lastScore = iterator.score();\n      for (int i = 1; i < 5; i++){\n        //page through some results\n        DocList subset = response.docs.subset(i * 10, 1);\n        iterator = subset.iterator();\n        int compareDoc = iterator.nextDoc();\n        float compareScore = iterator.score();\n        assertQ(\"page: \" + i + \" failed\",\n            req(\"q\", \"foo_t:one\", CommonParams.QT, \"standard\", \"fl\", \"[docid], score\",\n                \"start\", String.valueOf(i * 10), \"rows\", \"1\",  //only get one doc, and then compare it to gold\n                CommonParams.PAGEDOC, String.valueOf(lastDoc), CommonParams.PAGESCORE, String.valueOf(lastScore)),\n            \"*[count(//doc)=1]\",\n            \"//float[@name='score'][.='\" + compareScore + \"']\",\n            \"//int[@name='[docid]'][.='\" + compareDoc + \"']\"\n        );\n        lastScore = compareScore;\n        lastDoc = compareDoc;\n\n      }\n    } finally {\n      if (goldReq != null ) {\n        goldReq.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["28f769c762bf83c4a63b2b1277c74f3af56c2576"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50eb25774a5690a93352e49e7732b8008c5e681e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28f769c762bf83c4a63b2b1277c74f3af56c2576":["50eb25774a5690a93352e49e7732b8008c5e681e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50eb25774a5690a93352e49e7732b8008c5e681e"],"50eb25774a5690a93352e49e7732b8008c5e681e":["28f769c762bf83c4a63b2b1277c74f3af56c2576"],"28f769c762bf83c4a63b2b1277c74f3af56c2576":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}