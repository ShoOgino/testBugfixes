{"path":"solr/core/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","sourceNew":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","sourceOld":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","sourceNew":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","sourceOld":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","sourceNew":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","sourceOld":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}