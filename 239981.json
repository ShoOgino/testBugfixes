{"path":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      charPool = new CharBlockPool(termsHash.docWriter);\n      primary = true;\n    } else {\n      charPool = primaryPerThread.charPool;\n      primary = false;\n    }\n\n    intPool = new IntBlockPool(termsHash.docWriter, termsHash.trackAllocations);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator, termsHash.trackAllocations);\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      charPool = new CharBlockPool(termsHash.docWriter);\n      primary = true;\n    } else {\n      charPool = primaryPerThread.charPool;\n      primary = false;\n    }\n\n    intPool = new IntBlockPool(termsHash.docWriter, termsHash.trackAllocations);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator, termsHash.trackAllocations);\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter, termsHash.trackAllocations);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator, termsHash.trackAllocations);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      charPool = new CharBlockPool(termsHash.docWriter);\n      primary = true;\n    } else {\n      charPool = primaryPerThread.charPool;\n      primary = false;\n    }\n\n    intPool = new IntBlockPool(termsHash.docWriter, termsHash.trackAllocations);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator, termsHash.trackAllocations);\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter, termsHash.trackAllocations);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator, termsHash.trackAllocations);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":null,"sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7d8780fb66b006b18af8f610c8048de0dc230f","date":1279708148,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":null,"sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","pathOld":"/dev/null","sourceNew":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator); // use the allocator from the docWriter which tracks the used bytes \n    primary = nextTermsHash != null;\n    if (primary) {\n      // We are primary\n      termBytePool = bytePool;\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this); // this will be the primaryPerThread in the secondary\n      assert nextPerThread != null;\n    } else {\n      assert primaryPerThread != null;\n      termBytePool = primaryPerThread.bytePool; // we are secondary and share the byte pool with the primary \n      nextPerThread = null;\n    }\n  }\n\n","sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator);\n\n    if (nextTermsHash != null) {\n      // We are primary\n      primary = true;\n      termBytePool = bytePool;\n    } else {\n      primary = false;\n      termBytePool = primaryPerThread.bytePool;\n    }\n\n    if (nextTermsHash != null)\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this);\n    else\n      nextPerThread = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":null,"sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator); // use the allocator from the docWriter which tracks the used bytes \n    primary = nextTermsHash != null;\n    if (primary) {\n      // We are primary\n      termBytePool = bytePool;\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this); // this will be the primaryPerThread in the secondary\n      assert nextPerThread != null;\n    } else {\n      assert primaryPerThread != null;\n      termBytePool = primaryPerThread.bytePool; // we are secondary and share the byte pool with the primary \n      nextPerThread = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":null,"sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator); // use the allocator from the docWriter which tracks the used bytes \n    primary = nextTermsHash != null;\n    if (primary) {\n      // We are primary\n      termBytePool = bytePool;\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this); // this will be the primaryPerThread in the secondary\n      assert nextPerThread != null;\n    } else {\n      assert primaryPerThread != null;\n      termBytePool = primaryPerThread.bytePool; // we are secondary and share the byte pool with the primary \n      nextPerThread = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerThread#TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread).mjava","sourceNew":null,"sourceOld":"  public TermsHashPerThread(DocInverterPerThread docInverterPerThread, final TermsHash termsHash, final TermsHash nextTermsHash, final TermsHashPerThread primaryPerThread) {\n    docState = docInverterPerThread.docState;\n\n    this.termsHash = termsHash;\n    this.consumer = termsHash.consumer.addThread(this);\n\n    intPool = new IntBlockPool(termsHash.docWriter);\n    bytePool = new ByteBlockPool(termsHash.docWriter.byteBlockAllocator); // use the allocator from the docWriter which tracks the used bytes \n    primary = nextTermsHash != null;\n    if (primary) {\n      // We are primary\n      termBytePool = bytePool;\n      nextPerThread = nextTermsHash.addThread(docInverterPerThread, this); // this will be the primaryPerThread in the secondary\n      assert nextPerThread != null;\n    } else {\n      assert primaryPerThread != null;\n      termBytePool = primaryPerThread.bytePool; // we are secondary and share the byte pool with the primary \n      nextPerThread = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce7d8780fb66b006b18af8f610c8048de0dc230f":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","ce7d8780fb66b006b18af8f610c8048de0dc230f"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce7d8780fb66b006b18af8f610c8048de0dc230f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["ce7d8780fb66b006b18af8f610c8048de0dc230f","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"334c1175813aea771a71728cd2c4ee4754fd0603":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}