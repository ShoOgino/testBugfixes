{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","sourceOld":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06263309947a9804c326e35ce627be8768e123a4","date":1517286624,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  void collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    for (Slice slice : coll.getSlices()) {\n      sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap);\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n\n  }\n\n","bugFix":["f9362075f92dff89425ca488b480f70d565d66e7","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","bugFix":["f9362075f92dff89425ca488b480f70d565d66e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList[Object],Replica.State,String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#collectionCmd(ZkNodeProps,ModifiableSolrParams,NamedList,Replica.State,String,Map[String,String],Set[String]).mjava","sourceNew":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList<Object> results, Replica.State stateMatcher, String asyncId, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    @SuppressWarnings(\"deprecation\")\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    final ShardRequestTracker shardRequestTracker = new ShardRequestTracker(asyncId);\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(shardRequestTracker.sliceCmd(clusterState, params, stateMatcher, slice, shardHandler));\n    }\n\n    shardRequestTracker.processResponses(results, shardHandler, false, null, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","sourceOld":"  /**\n   * Send request to all replicas of a collection\n   * @return List of replicas which is not live for receiving the request\n   */\n  List<Replica> collectionCmd(ZkNodeProps message, ModifiableSolrParams params,\n                     NamedList results, Replica.State stateMatcher, String asyncId, Map<String, String> requestMap, Set<String> okayExceptions) {\n    log.info(\"Executing Collection Cmd={}, asyncId={}\", params, asyncId);\n    String collectionName = message.getStr(NAME);\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler(overseer.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    List<Replica> notLivesReplicas = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      notLivesReplicas.addAll(sliceCmd(clusterState, params, stateMatcher, slice, shardHandler, asyncId, requestMap));\n    }\n\n    processResponses(results, shardHandler, false, null, asyncId, requestMap, okayExceptions);\n    return notLivesReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["06263309947a9804c326e35ce627be8768e123a4"],"06263309947a9804c326e35ce627be8768e123a4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"06263309947a9804c326e35ce627be8768e123a4":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["06263309947a9804c326e35ce627be8768e123a4"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["69e6520a21709190413a63084ed135271aab1a7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}