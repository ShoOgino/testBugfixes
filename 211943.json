{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"/dev/null","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setConnectionManagerTimeout(5000);\n          server.getLbServer().getHttpClient().getParams().setSoTimeout(15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"/dev/null","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setConnectionManagerTimeout(5000);\n          server.getLbServer().getHttpClient().getParams().setSoTimeout(15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"/dev/null","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setConnectionManagerTimeout(5000);\n          server.getLbServer().getHttpClient().getParams().setSoTimeout(15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setConnectionManagerTimeout(5000);\n          server.getLbServer().getHttpClient().getParams().setSoTimeout(15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random());\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bdd4aa796e0067ba181b149f1580a94d0ff5e0","date":1342362884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random());\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random());\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ef6348b84bf0f8a649826b69a70ac815ff560e2","date":1343106054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty, random());\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty, shardToClient, shardToLeaderClient,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":null,"sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getCloudState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getCloudState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["33bdd4aa796e0067ba181b149f1580a94d0ff5e0","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"33bdd4aa796e0067ba181b149f1580a94d0ff5e0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["33bdd4aa796e0067ba181b149f1580a94d0ff5e0"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","33bdd4aa796e0067ba181b149f1580a94d0ff5e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"33bdd4aa796e0067ba181b149f1580a94d0ff5e0":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","6ef6348b84bf0f8a649826b69a70ac815ff560e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["33bdd4aa796e0067ba181b149f1580a94d0ff5e0","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}