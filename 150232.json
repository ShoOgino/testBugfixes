{"path":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1","date":1331668628,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = sp.getId(null);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e6deb81c6b16f810baf365f9c768efa270e8d2a","date":1349474419,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (ch==' ' || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (ch==' ' || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (ParseException e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n\n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\");\n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n        // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#add(String,NamedList[String],DocTransformers,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  private void add(String fl, NamedList<String> rename, DocTransformers augmenters, SolrQueryRequest req) {\n    if( fl == null ) {\n      return;\n    }\n    try {\n      QueryParsing.StrParser sp = new QueryParsing.StrParser(fl);\n\n      for(;;) {\n        sp.opt(',');\n        sp.eatws();\n        if (sp.pos >= sp.end) break;\n\n        int start = sp.pos;\n\n        // short circuit test for a really simple field name\n        String key = null;\n        String field = getFieldName(sp);\n        char ch = sp.ch();\n\n        if (field != null) {\n          if (sp.opt(':')) {\n            // this was a key, not a field name\n            key = field;\n            field = null;\n            sp.eatws();\n            start = sp.pos;\n          } else {\n            if (Character.isWhitespace(ch) || ch == ',' || ch==0) {\n              addField( field, key, augmenters, req );\n              continue;\n            }\n            // an invalid field name... reset the position pointer to retry\n            sp.pos = start;\n            field = null;\n          }\n        }\n\n        if (key != null) {\n          // we read \"key : \"\n          field = sp.getId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            rename.add(field, key);\n            addField( field, key, augmenters, req );\n            continue;\n          }\n          // an invalid field name... reset the position pointer to retry\n          sp.pos = start;\n          field = null;\n        }\n\n        if (field == null) {\n          // We didn't find a simple name, so let's see if it's a globbed field name.\n          // Globbing only works with field names of the recommended form (roughly like java identifiers)\n\n          field = sp.getGlobbedId(null);\n          ch = sp.ch();\n          if (field != null && (Character.isWhitespace(ch) || ch == ',' || ch==0)) {\n            // \"*\" looks and acts like a glob, but we give it special treatment\n            if (\"*\".equals(field)) {\n              _wantsAllFields = true;\n            } else {\n              globs.add(field);\n            }\n            continue;\n          }\n\n          // an invalid glob\n          sp.pos = start;\n        }\n\n        String funcStr = sp.val.substring(start);\n\n        // Is it an augmenter of the form [augmenter_name foo=1 bar=myfield]?\n        // This is identical to localParams syntax except it uses [] instead of {!}\n\n        if (funcStr.startsWith(\"[\")) {\n          Map<String,String> augmenterArgs = new HashMap<String,String>();\n          int end = QueryParsing.parseLocalParams(funcStr, 0, augmenterArgs, req.getParams(), \"[\", ']');\n          sp.pos += end;\n          \n          // [foo] is short for [type=foo] in localParams syntax\n          String augmenterName = augmenterArgs.remove(\"type\"); \n          String disp = key;\n          if( disp == null ) {\n            disp = '['+augmenterName+']';\n          }\n\n          TransformerFactory factory = req.getCore().getTransformerFactory( augmenterName );\n          if( factory != null ) {\n            MapSolrParams augmenterParams = new MapSolrParams( augmenterArgs );\n            augmenters.addTransformer( factory.create(disp, augmenterParams, req) );\n          }\n          else {\n            // unknown transformer?\n          }\n          addField(field, disp, augmenters, req);\n          continue;\n        }\n\n\n        // let's try it as a function instead\n        QParser parser = QParser.getParser(funcStr, FunctionQParserPlugin.NAME, req);\n        Query q = null;\n        ValueSource vs = null;\n\n        try {\n          if (parser instanceof FunctionQParser) {\n            FunctionQParser fparser = (FunctionQParser)parser;\n            fparser.setParseMultipleSources(false);\n            fparser.setParseToEnd(false);\n\n            q = fparser.getQuery();\n\n            if (fparser.localParams != null) {\n              if (fparser.valFollowedParams) {\n                // need to find the end of the function query via the string parser\n                int leftOver = fparser.sp.end - fparser.sp.pos;\n                sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n              } else {\n                // the value was via the \"v\" param in localParams, so we need to find\n                // the end of the local params themselves to pick up where we left off\n                sp.pos = start + fparser.localParamsEnd;\n              }\n            } else {\n              // need to find the end of the function query via the string parser\n              int leftOver = fparser.sp.end - fparser.sp.pos;\n              sp.pos = sp.end - leftOver;   // reset our parser to the same amount of leftover\n            }\n          } else {\n            // A QParser that's not for function queries.\n            // It must have been specified via local params.\n            q = parser.getQuery();\n\n            assert parser.getLocalParams() != null;\n            sp.pos = start + parser.localParamsEnd;\n          }\n\n\n          if (q instanceof FunctionQuery) {\n            vs = ((FunctionQuery)q).getValueSource();\n          } else {\n            vs = new QueryValueSource(q, 0.0f);\n          }\n\n          if (key==null) {\n            SolrParams localParams = parser.getLocalParams();\n            if (localParams != null) {\n              key = localParams.get(\"key\");\n            }\n            if (key == null) {\n              // use the function name itself as the field name\n              key = sp.val.substring(start, sp.pos);\n            }\n          }\n\n\n          if (key==null) {\n            key = funcStr;\n          }\n          okFieldNames.add( key );\n          okFieldNames.add( funcStr );\n          augmenters.addTransformer( new ValueSourceAugmenter( key, parser, vs ) );\n        }\n        catch (SyntaxError e) {\n          // try again, simple rules for a field name with no whitespace\n          sp.pos = start;\n          field = sp.getSimpleString();\n\n          if (req.getSchema().getFieldOrNull(field) != null) {\n            // OK, it was an oddly named field\n            fields.add(field);\n            if( key != null ) {\n              rename.add(field, key);\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname: \" + e.getMessage(), e);\n          }\n        }\n\n       // end try as function\n\n      } // end for(;;)\n    } catch (SyntaxError e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing fieldname\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["8e6deb81c6b16f810baf365f9c768efa270e8d2a","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["8e6deb81c6b16f810baf365f9c768efa270e8d2a"],"c26f00b574427b55127e869b935845554afde1fa":["2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8e6deb81c6b16f810baf365f9c768efa270e8d2a":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}