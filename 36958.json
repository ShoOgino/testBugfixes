{"path":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c3c367a9a447fbe22b73e7dde652f132e693c5d","date":1004577180,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2355382afa0f25b02f903f0c0c00433c59edd075","date":1094509762,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"939b48b7116e2896b509c3448ad9e7178c9618fa","date":1202209973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(hits);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/SearchTestForDuplicates#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      System.out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, 1000).scoreDocs;\n      printHits(hits, searcher);\n\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["939b48b7116e2896b509c3448ad9e7178c9618fa"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"939b48b7116e2896b509c3448ad9e7178c9618fa":["2355382afa0f25b02f903f0c0c00433c59edd075"],"2355382afa0f25b02f903f0c0c00433c59edd075":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"]},"commit2Childs":{"4c3c367a9a447fbe22b73e7dde652f132e693c5d":["2355382afa0f25b02f903f0c0c00433c59edd075"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["4c3c367a9a447fbe22b73e7dde652f132e693c5d"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"939b48b7116e2896b509c3448ad9e7178c9618fa":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"2355382afa0f25b02f903f0c0c00433c59edd075":["939b48b7116e2896b509c3448ad9e7178c9618fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}