{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level, leaf, and populate bytes.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","sourceNew":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level #, leaf boolean, and populate bytes by reference. We don't decode the stack.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level, leaf, and populate bytes.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","sourceNew":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level #, leaf boolean, and populate bytes by reference. We don't decode the stack.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level #, leaf boolean, and populate bytes by reference. We don't decode the stack.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#readCell(BytesRef,Cell).mjava","sourceNew":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level #, leaf boolean, and populate bytes by reference. We don't decode the stack.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Cell readCell(BytesRef term, Cell scratch) {\n    if (scratch == null)\n      scratch = getWorldCell();\n\n    //We decode level #, leaf boolean, and populate bytes by reference. We don't decode the stack.\n\n    //reverse lookup term length to the level and hence the cell\n    NRCell[] cellsByLevel = ((NRCell) scratch).cellsByLevel;\n    boolean isLeaf = term.bytes[term.offset + term.length - 1] == 0;\n    int lenNoLeaf = isLeaf ? term.length - 1 : term.length;\n\n    NRCell result = cellsByLevel[levelByTermLen[lenNoLeaf]];\n    if (cellsByLevel[0].termBuf == null)\n      cellsByLevel[0].termBuf = result.term.bytes;//a kluge; see cell.ensureOwnTermBytes()\n    result.term.bytes = term.bytes;\n    result.term.offset = term.offset;\n    result.term.length = lenNoLeaf;//technically this isn't used but may help debugging\n    result.reset();\n    if (isLeaf)\n      result.setLeaf();\n\n    result.cellNumber = -1;//lazy decode flag\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}