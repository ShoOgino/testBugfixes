{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexReplicationClientTest.IndexReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (reader == null) {\n        reader = DirectoryReader.open(indexDir);\n        lastGeneration = reader.getIndexCommit().getGeneration();\n      } else {\n        DirectoryReader newReader = DirectoryReader.openIfChanged(reader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastGeneration + \" new=\" + newGeneration, newGeneration > lastGeneration);\n        reader.close();\n        reader = newReader;\n        lastGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}