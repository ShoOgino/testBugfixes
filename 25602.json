{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","commits":[{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"307fc3442cc0c2e8b515dae2357bac501b9849d1","date":1534405201,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","sourceOld":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(15);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","sourceOld":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 2, 2);\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 2, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 2, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 2, 2);\n  }\n\n","bugFix":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","sourceOld":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: {}\", coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","sourceOld":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: \" + coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod).mjava","sourceNew":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: {}\", coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","sourceOld":"  private void doSplitMixedReplicaTypes(SolrIndexSplitter.SplitMethod splitMethod) throws Exception {\n    waitForThingsToLevelOut(15, TimeUnit.SECONDS);\n    String collectionName = \"testSplitMixedReplicaTypes_\" + splitMethod.toLower();\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2, 0, 2); // TODO tlog replicas disabled right now.\n    create.setMaxShardsPerNode(5); // some high number so we can create replicas without hindrance\n    create.process(cloudClient);\n    \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 4));\n    \n    waitForRecoveriesToFinish(collectionName, false);\n\n    for (int i = 0; i < 100; i++) {\n      cloudClient.add(collectionName, getDoc(\"id\", \"id-\" + i, \"foo_s\", \"bar \" + i));\n    }\n    cloudClient.commit(collectionName);\n\n    CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName);\n    splitShard.setShardName(SHARD1);\n    splitShard.setSplitMethod(splitMethod.toLower());\n    CollectionAdminResponse rsp = splitShard.process(cloudClient);\n    waitForThingsToLevelOut(30, TimeUnit.SECONDS);\n   \n    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(2, 12));\n\n    cloudClient.getZkStateReader().forceUpdateCollection(collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collectionName);\n    log.info(\"coll: {}\", coll);\n\n    // verify the original shard\n    verifyShard(coll, SHARD1, Slice.State.INACTIVE, 2, 0, 2);\n    // verify new sub-shards\n    verifyShard(coll, SHARD1_0, Slice.State.ACTIVE, 2, 0, 2);\n    verifyShard(coll, SHARD1_1, Slice.State.ACTIVE, 2, 0, 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"307fc3442cc0c2e8b515dae2357bac501b9849d1":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["307fc3442cc0c2e8b515dae2357bac501b9849d1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"307fc3442cc0c2e8b515dae2357bac501b9849d1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["307fc3442cc0c2e8b515dae2357bac501b9849d1"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}