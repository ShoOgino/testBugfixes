{"path":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","commits":[{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \")\";\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c728c2c4e564b70110b013139d764abe136033f2","date":1460649910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c728c2c4e564b70110b013139d764abe136033f2"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c728c2c4e564b70110b013139d764abe136033f2":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"9856095f7afb5a607bf5e65077615ed91273508c":["c728c2c4e564b70110b013139d764abe136033f2","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["88b0212386fe531136816706dc37dc49b9dbf7dc","9856095f7afb5a607bf5e65077615ed91273508c"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c728c2c4e564b70110b013139d764abe136033f2":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}