{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","commits":[{"id":"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a","date":1363558184,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a filter that limits the maximum position of tokens to emit.\n   * \n   * @param in the stream to wrap\n   * @param maxTokenPosition max position of tokens to produce (1st token always has position 1)\n   * @param consumeAllTokens whether all tokens from the wrapped input stream must be consumed\n   *                         even if maxTokenPosition is exceeded.\n   */\n  public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {\n    super(in);\n    this.maxTokenPosition = maxTokenPosition;\n    this.consumeAllTokens = consumeAllTokens;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43acd3a99a12a5bec9c72097de0e294c80cb6daa","date":1396327381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","sourceNew":"  /**\n   * Build a filter that limits the maximum position of tokens to emit.\n   * \n   * @param in the stream to wrap\n   * @param maxTokenPosition max position of tokens to produce (1st token always has position 1)\n   * @param consumeAllTokens whether all tokens from the wrapped input stream must be consumed\n   *                         even if maxTokenPosition is exceeded.\n   */\n  public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {\n    super(in);\n    if (maxTokenPosition < 1) {\n      throw new IllegalArgumentException(\"maxTokenPosition must be greater than zero\");\n    }\n    this.maxTokenPosition = maxTokenPosition;\n    this.consumeAllTokens = consumeAllTokens;\n  }\n\n","sourceOld":"  /**\n   * Build a filter that limits the maximum position of tokens to emit.\n   * \n   * @param in the stream to wrap\n   * @param maxTokenPosition max position of tokens to produce (1st token always has position 1)\n   * @param consumeAllTokens whether all tokens from the wrapped input stream must be consumed\n   *                         even if maxTokenPosition is exceeded.\n   */\n  public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {\n    super(in);\n    this.maxTokenPosition = maxTokenPosition;\n    this.consumeAllTokens = consumeAllTokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter#LimitTokenPositionFilter(TokenStream,int,boolean).mjava","sourceNew":"  /**\n   * Build a filter that limits the maximum position of tokens to emit.\n   * \n   * @param in the stream to wrap\n   * @param maxTokenPosition max position of tokens to produce (1st token always has position 1)\n   * @param consumeAllTokens whether all tokens from the wrapped input stream must be consumed\n   *                         even if maxTokenPosition is exceeded.\n   */\n  public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {\n    super(in);\n    if (maxTokenPosition < 1) {\n      throw new IllegalArgumentException(\"maxTokenPosition must be greater than zero\");\n    }\n    this.maxTokenPosition = maxTokenPosition;\n    this.consumeAllTokens = consumeAllTokens;\n  }\n\n","sourceOld":"  /**\n   * Build a filter that limits the maximum position of tokens to emit.\n   * \n   * @param in the stream to wrap\n   * @param maxTokenPosition max position of tokens to produce (1st token always has position 1)\n   * @param consumeAllTokens whether all tokens from the wrapped input stream must be consumed\n   *                         even if maxTokenPosition is exceeded.\n   */\n  public LimitTokenPositionFilter(TokenStream in, int maxTokenPosition, boolean consumeAllTokens) {\n    super(in);\n    this.maxTokenPosition = maxTokenPosition;\n    this.consumeAllTokens = consumeAllTokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43acd3a99a12a5bec9c72097de0e294c80cb6daa"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a":["5eb2511ababf862ea11e10761c70ee560cd84510","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}