{"path":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxScores().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteboxScores() throws Exception {\n    final SchemaField analysisField = h.getCore().getLatestSchema().getField(\"multigrams_body\");\n    assertNotNull(analysisField);\n    final Map<String,Double> fieldWeights = new TreeMap<>();\n    fieldWeights.put(\"multigrams_title\", 1.0D);\n    fieldWeights.put(\"multigrams_body\", 0.0D); // NOTE: 0 weighting should only affect total score\n    \n    final String input = \"xxxyyyzzz BROWN fox why are we lAzY\";\n    final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);\n    try (SolrQueryRequest req = req()) {\n      Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());\n    }\n    Phrase.populateScores(phrases, fieldWeights, 3, 7);\n\n    // do some basic sanity checks of the field & total scores...\n\n    for (Phrase xyz : phrases.subList(0, 7)) {\n      // first 7 all start with xyz which isn't in index (in either field) so all scores should be -1\n      assertEquals(xyz.toString(), -1.0D, xyz.getTotalScore(), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_body\"), 0.0D);\n    }\n    \n    // any individual terms (past xyz) should score 0.0 because they are all actually in the index\n    // (in both fields)\n    for (Phrase term : phrases.subList(7, phrases.size()).stream().filter\n           ((p -> 1 == p.getPositionLength())).collect(Collectors.toList())) {\n      \n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_body\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getTotalScore(), 0.0D);\n    }\n\n    // \"brown fox\" should score positively in both fields, and overall...\n    final Phrase brown_fox = phrases.get(8);\n    assertEquals(\"BROWN fox\", brown_fox.getSubSequence());\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_body\"), greaterThan(0.0D) );\n    assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));\n    \n    // \"we lazy\" does appear in a title value, but should score poorly given how often the terms\n    // are used in other contexts, and should score -1 against body -- but because of our weights,\n    // that shouldn't bring down the total\n    final Phrase we_lazy = phrases.get(phrases.size()-2);\n    assertEquals(\"we lAzY\", we_lazy.getSubSequence());\n    assertEquals(we_lazy.toString(), -1.0D, we_lazy.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), lessThan(0.0D));\n    assertThat(we_lazy.toString(), we_lazy.getTotalScore(), lessThan(0.0D));\n    assertEquals(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), we_lazy.getTotalScore(),\n                 0.0D);\n\n    // \"why are we lazy\" is longer then the max indexed phrase size & appears verbatim in a title value\n    // it should score -1 against body -- but because of our weights, that shouldn't bring down the total\n    final Phrase wawl = phrases.get(phrases.size()-7);\n    assertEquals(\"why are we lAzY\", wawl.getSubSequence());\n    assertEquals(wawl.toString(), -1.0D, wawl.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(wawl.toString(), wawl.getTotalScore(), greaterThan(0.0D));\n    assertEquals(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), wawl.getTotalScore(),\n                 0.0D);\n\n    // \"brown fox why are we\" is longer then the max indexed phrase, and none of it's\n    // (longest) sub phrases exists in either field -- so all of it's scores should be -1\n    final Phrase bfwaw = phrases.get(11);\n    assertEquals(\"BROWN fox why are we\", bfwaw.getSubSequence());\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_title\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getTotalScore(), 0.0D);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteboxScores().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testWhiteboxScores() throws Exception {\n    final SchemaField analysisField = h.getCore().getLatestSchema().getField(\"multigrams_body\");\n    assertNotNull(analysisField);\n    final Map<String,Double> fieldWeights = new TreeMap<>();\n    fieldWeights.put(\"multigrams_title\", 1.0D);\n    fieldWeights.put(\"multigrams_body\", 0.0D); // NOTE: 0 weighting should only affect total score\n    \n    final String input = \"xxxyyyzzz BROWN fox why are we lAzY\";\n    final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);\n    try (SolrQueryRequest req = req()) {\n      Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());\n    }\n    Phrase.populateScores(phrases, fieldWeights, 3, 7);\n\n    // do some basic sanity checks of the field & total scores...\n\n    for (Phrase xyz : phrases.subList(0, 7)) {\n      // first 7 all start with xyz which isn't in index (in either field) so all scores should be -1\n      assertEquals(xyz.toString(), -1.0D, xyz.getTotalScore(), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_body\"), 0.0D);\n    }\n    \n    // any individual terms (past xyz) should score 0.0 because they are all actually in the index\n    // (in both fields)\n    for (Phrase term : phrases.subList(7, phrases.size()).stream().filter\n           ((p -> 1 == p.getPositionLength())).collect(Collectors.toList())) {\n      \n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_body\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getTotalScore(), 0.0D);\n    }\n\n    // \"brown fox\" should score positively in both fields, and overall...\n    final Phrase brown_fox = phrases.get(8);\n    assertEquals(\"BROWN fox\", brown_fox.getSubSequence());\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_body\"), greaterThan(0.0D) );\n    assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));\n    \n    // \"we lazy\" does appear in a title value, but should score poorly given how often the terms\n    // are used in other contexts, and should score -1 against body -- but because of our weights,\n    // that shouldn't bring down the total\n    final Phrase we_lazy = phrases.get(phrases.size()-2);\n    assertEquals(\"we lAzY\", we_lazy.getSubSequence());\n    assertEquals(we_lazy.toString(), -1.0D, we_lazy.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), lessThan(0.0D));\n    assertThat(we_lazy.toString(), we_lazy.getTotalScore(), lessThan(0.0D));\n    assertEquals(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), we_lazy.getTotalScore(),\n                 0.0D);\n\n    // \"why are we lazy\" is longer then the max indexed phrase size & appears verbatim in a title value\n    // it should score -1 against body -- but because of our weights, that shouldn't bring down the total\n    final Phrase wawl = phrases.get(phrases.size()-7);\n    assertEquals(\"why are we lAzY\", wawl.getSubSequence());\n    assertEquals(wawl.toString(), -1.0D, wawl.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(wawl.toString(), wawl.getTotalScore(), greaterThan(0.0D));\n    assertEquals(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), wawl.getTotalScore(),\n                 0.0D);\n\n    // \"brown fox why are we\" is longer then the max indexed phrase, and none of it's\n    // (longest) sub phrases exists in either field -- so all of it's scores should be -1\n    final Phrase bfwaw = phrases.get(11);\n    assertEquals(\"BROWN fox why are we\", bfwaw.getSubSequence());\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_title\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getTotalScore(), 0.0D);\n    \n  }\n\n","sourceOld":"  public void testWhiteboxScores() throws Exception {\n    final SchemaField analysisField = h.getCore().getLatestSchema().getField(\"multigrams_body\");\n    assertNotNull(analysisField);\n    final Map<String,Double> fieldWeights = new TreeMap<>();\n    fieldWeights.put(\"multigrams_title\", 1.0D);\n    fieldWeights.put(\"multigrams_body\", 0.0D); // NOTE: 0 weighting should only affect total score\n    \n    final String input = \"xxxyyyzzz BROWN fox why are we lAzY\";\n    final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);\n    try (SolrQueryRequest req = req()) {\n      Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());\n    }\n    Phrase.populateScores(phrases, fieldWeights, 3, 7);\n\n    // do some basic sanity checks of the field & total scores...\n\n    for (Phrase xyz : phrases.subList(0, 7)) {\n      // first 7 all start with xyz which isn't in index (in either field) so all scores should be -1\n      assertEquals(xyz.toString(), -1.0D, xyz.getTotalScore(), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore(\"multigrams_body\"), 0.0D);\n    }\n    \n    // any individual terms (past xyz) should score 0.0 because they are all actually in the index\n    // (in both fields)\n    for (Phrase term : phrases.subList(7, phrases.size()).stream().filter\n           ((p -> 1 == p.getPositionLength())).collect(Collectors.toList())) {\n      \n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_title\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getFieldScore(\"multigrams_body\"), 0.0D);\n      assertEquals(term.toString(), 0.0D, term.getTotalScore(), 0.0D);\n    }\n\n    // \"brown fox\" should score positively in both fields, and overall...\n    final Phrase brown_fox = phrases.get(8);\n    assertEquals(\"BROWN fox\", brown_fox.getSubSequence());\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(brown_fox.toString(), brown_fox.getFieldScore(\"multigrams_body\"), greaterThan(0.0D) );\n    assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));\n    \n    // \"we lazy\" does appear in a title value, but should score poorly given how often the terms\n    // are used in other contexts, and should score -1 against body -- but because of our weights,\n    // that shouldn't bring down the total\n    final Phrase we_lazy = phrases.get(phrases.size()-2);\n    assertEquals(\"we lAzY\", we_lazy.getSubSequence());\n    assertEquals(we_lazy.toString(), -1.0D, we_lazy.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), lessThan(0.0D));\n    assertThat(we_lazy.toString(), we_lazy.getTotalScore(), lessThan(0.0D));\n    assertEquals(we_lazy.toString(), we_lazy.getFieldScore(\"multigrams_title\"), we_lazy.getTotalScore(),\n                 0.0D);\n\n    // \"why are we lazy\" is longer then the max indexed phrase size & appears verbatim in a title value\n    // it should score -1 against body -- but because of our weights, that shouldn't bring down the total\n    final Phrase wawl = phrases.get(phrases.size()-7);\n    assertEquals(\"why are we lAzY\", wawl.getSubSequence());\n    assertEquals(wawl.toString(), -1.0D, wawl.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertThat(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), greaterThan(0.0D));\n    assertThat(wawl.toString(), wawl.getTotalScore(), greaterThan(0.0D));\n    assertEquals(wawl.toString(), wawl.getFieldScore(\"multigrams_title\"), wawl.getTotalScore(),\n                 0.0D);\n\n    // \"brown fox why are we\" is longer then the max indexed phrase, and none of it's\n    // (longest) sub phrases exists in either field -- so all of it's scores should be -1\n    final Phrase bfwaw = phrases.get(11);\n    assertEquals(\"BROWN fox why are we\", bfwaw.getSubSequence());\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_title\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore(\"multigrams_body\"), 0.0D);\n    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getTotalScore(), 0.0D);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}