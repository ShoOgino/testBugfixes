{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score());\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score());\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitudeCeil(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitudeCeil(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D polygon = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {\n        // compute bounding box\n        int minXOfs = 0;\n        int minYOfs = 0;\n        int maxXOfs = 0;\n        int maxYOfs = 0;\n        for (int d = 1; d < 3; ++d) {\n          // check minX\n          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minXOfs = d;\n          }\n          // check maxX\n          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxXOfs = d;\n          }\n          // check minY\n          aOfs = minYOfs * 2 * LatLonPoint.BYTES;\n          bOfs = d * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {\n            minYOfs = d;\n          }\n          // check maxY\n          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;\n          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {\n            maxYOfs = d;\n          }\n        }\n        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;\n        minYOfs *= 2 * LatLonPoint.BYTES;\n        maxYOfs *= 2 * LatLonPoint.BYTES;\n\n        double minLat = GeoEncodingUtils.decodeLatitude(minTriangle, minYOfs);\n        double minLon = GeoEncodingUtils.decodeLongitude(minTriangle, minXOfs);\n        double maxLat = GeoEncodingUtils.decodeLatitude(maxTriangle, maxYOfs);\n        double maxLon = GeoEncodingUtils.decodeLongitude(maxTriangle, maxXOfs);\n\n        // check internal node against query\n        return polygon.relate(minLat, maxLat, minLon, maxLon);\n      }\n\n      private boolean queryCrossesTriangle(byte[] t) {\n        double ay = GeoEncodingUtils.decodeLatitude(t, 0);\n        double ax = GeoEncodingUtils.decodeLongitude(t, LatLonPoint.BYTES);\n        double by = GeoEncodingUtils.decodeLatitude(t, 2 * LatLonPoint.BYTES);\n        double bx = GeoEncodingUtils.decodeLongitude(t, 3 * LatLonPoint.BYTES);\n        double cy = GeoEncodingUtils.decodeLatitude(t, 4 * LatLonPoint.BYTES);\n        double cx = GeoEncodingUtils.decodeLongitude(t, 5 * LatLonPoint.BYTES);\n        return polygon.relateTriangle(ax, ay, bx, by, cx, cy) != Relation.CELL_OUTSIDE_QUERY;\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryCrossesTriangle(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the polygon query.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedTriangle) {\n            if (queryCrossesTriangle(packedTriangle) == false) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation r = relateRangeToQuery(minPackedValue, maxPackedValue);\n            if (r == Relation.CELL_OUTSIDE_QUERY) {\n              return Relation.CELL_INSIDE_QUERY;\n            } else if (r == Relation.CELL_INSIDE_QUERY) {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n            return r;\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the query\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[]{reader.maxDoc()};\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n\n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score());\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score());\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5e8251ad51618827e557dd369f16921a666914b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5e8251ad51618827e557dd369f16921a666914b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":["97f74f84954e9fefbac4cb38b9bf339e1757600d","2aeefba8262036d422d639e48c49d51316bea138","9c226b0eeb8b028f572020f459851a663a2c064e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n\n        FixedBitSet intersect = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor visitor = getDenseIntersectVisitor(intersect, disjoint);\n        return new RelationScorerSupplier(values, visitor) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, intersect, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue()) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            boolean queryMatches = queryMatches(t, scratchTriangle, queryRelation);\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              if (queryMatches) {\n                intersect.set(docID);\n              } else {\n                disjoint.set(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              adder.add(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, ShapeField.QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, ShapeField.QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == ShapeField.QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            boolean queryMatches = queryMatches(t, scratchTriangle, queryRelation);\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              if (queryMatches) {\n                intersect.set(docID);\n              } else {\n                disjoint.set(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(ShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == ShapeField.QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, ShapeField.QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, ShapeField.QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(ShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    return new ConstantScoreWeight(this, boost) {\n\n      /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n      protected IntersectVisitor getSparseIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) throws IOException {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, QueryRelation.INTERSECTS);\n          }\n        };\n      }\n\n      /** create a visitor that adds documents that match the query using a dense bitset. (Used by WITHIN, DISJOINT) */\n      protected IntersectVisitor getDenseIntersectVisitor(FixedBitSet intersect, FixedBitSet disjoint, QueryRelation queryRelation) {\n        return new IntersectVisitor() {\n          final int[] scratchTriangle = new int[6];\n          @Override\n          public void visit(int docID) throws IOException {\n            if (queryRelation == QueryRelation.DISJOINT) {\n              // if DISJOINT query set the doc in the disjoint bitset\n              disjoint.set(docID);\n            } else {\n              // for INTERSECT, and WITHIN queries we set the intersect bitset\n              intersect.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(int docID, byte[] t) throws IOException {\n            if (queryMatches(t, scratchTriangle, queryRelation)) {\n              intersect.set(docID);\n            } else {\n              disjoint.set(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n            boolean queryMatches = queryMatches(t, scratchTriangle, queryRelation);\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              if (queryMatches) {\n                intersect.set(docID);\n              } else {\n                disjoint.set(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n            return relateRangeToQuery(minTriangle, maxTriangle, queryRelation);\n          }\n        };\n      }\n\n      /** get a scorer supplier for INTERSECT queries */\n      protected ScorerSupplier getIntersectScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        IntersectVisitor visitor = getSparseIntersectVisitor(result);\n        return new RelationScorerSupplier(values, visitor, null, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getIntersectsScorer(LatLonShapeQuery.this, reader, weight, result, score(), scoreMode);\n          }\n        };\n      }\n\n      /** get a scorer supplier for all other queries (DISJOINT, WITHIN) */\n      protected ScorerSupplier getScorerSupplier(LeafReader reader, PointValues values, Weight weight, ScoreMode scoreMode) throws IOException {\n        if (queryRelation == QueryRelation.INTERSECTS) {\n          return getIntersectScorerSupplier(reader, values, weight, scoreMode);\n        }\n        //For within and disjoint we need two passes to remove false positives in case of multi-shapes.\n        FixedBitSet within = new FixedBitSet(reader.maxDoc());\n        FixedBitSet disjoint = new FixedBitSet(reader.maxDoc());\n        IntersectVisitor withinVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.WITHIN);\n        IntersectVisitor disjointVisitor = getDenseIntersectVisitor(within, disjoint, QueryRelation.DISJOINT);\n        return new RelationScorerSupplier(values, withinVisitor, disjointVisitor, queryRelation) {\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            return getScorer(LatLonShapeQuery.this, weight, within, disjoint, score(), scoreMode);\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n\n        boolean allDocsMatch = true;\n        if (values.getDocCount() != reader.maxDoc() ||\n            relateRangeToQuery(values.getMinPackedValue(), values.getMaxPackedValue(), queryRelation) != Relation.CELL_INSIDE_QUERY) {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n\n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return getScorerSupplier(reader, values, weight, scoreMode);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["9c226b0eeb8b028f572020f459851a663a2c064e"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["2aeefba8262036d422d639e48c49d51316bea138"],"9c226b0eeb8b028f572020f459851a663a2c064e":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["2aeefba8262036d422d639e48c49d51316bea138","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"5e8251ad51618827e557dd369f16921a666914b5":["646cad9a0473e40f431299c5d1567d1f4d32f689","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"9c226b0eeb8b028f572020f459851a663a2c064e":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}