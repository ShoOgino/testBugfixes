{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","pathOld":"/dev/null","sourceNew":"  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","pathOld":"/dev/null","sourceNew":"  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","sourceNew":"  /**\n   * Start all servers for cluster, initialize shards whitelist and then restart\n   */\n  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n      // Set the shards whitelist to all shards plus the fake one used for tolerant test\n      System.setProperty(SOLR_TESTS_SHARDS_WHITELIST, servers.getWhitelistString() + \",http://[ff01::114]:33332\");\n      systemSetPropertySolrDisableShardsWhitelist(\"false\");\n      restartServers();\n    }\n  }\n\n","sourceOld":"  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19cb1074b0b5fb6a8c8eb6962fa6334248f33f4d","date":1554329703,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#initServers().mjava","sourceNew":"  /**\n   * Start all servers for cluster if they don't already exist\n   */\n  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Start all servers for cluster, initialize shards whitelist and then restart\n   */\n  public static void initServers() throws Exception {\n    if (servers == null) {\n      servers = new SolrInstances(3, \"solrconfig-tlog.xml\", \"schema_latest.xml\");\n      // Set the shards whitelist to all shards plus the fake one used for tolerant test\n      System.setProperty(SOLR_TESTS_SHARDS_WHITELIST, servers.getWhitelistString() + \",http://[ff01::114]:33332\");\n      systemSetPropertySolrDisableShardsWhitelist(\"false\");\n      restartServers();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d51e7db479b42602c7e23ba871b177387268179":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19cb1074b0b5fb6a8c8eb6962fa6334248f33f4d":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19cb1074b0b5fb6a8c8eb6962fa6334248f33f4d"]},"commit2Childs":{"4d51e7db479b42602c7e23ba871b177387268179":["19cb1074b0b5fb6a8c8eb6962fa6334248f33f4d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["4d51e7db479b42602c7e23ba871b177387268179","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"19cb1074b0b5fb6a8c8eb6962fa6334248f33f4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}