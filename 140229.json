{"path":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    doc.add(new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED)); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    doc.add(new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED)); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4646f166374b438da68ac06972ca143d0a54d59","date":1294197416,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    doc.add(new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED)); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    doc.add(new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED)); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    doc.add(new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED)); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#createDocument(String,int,int).mjava","sourceNew":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","sourceOld":"  private static Document createDocument(String text, int ng1, int ng2) {\n    Document doc = new Document();\n    // the word field is never queried on... its indexed so it can be quickly\n    // checked for rebuild (and stored for retrieval). Doesn't need norms or TF/pos\n    Field f = new Field(F_WORD, text, Field.Store.YES, Field.Index.NOT_ANALYZED);\n    f.setOmitTermFreqAndPositions(true);\n    f.setOmitNorms(true);\n    doc.add(f); // orig term\n    addGram(text, doc, ng1, ng2);\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","d4646f166374b438da68ac06972ca143d0a54d59"],"e230a61047bc041516c811baa08a7174d6f8322a":["d4646f166374b438da68ac06972ca143d0a54d59"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d4646f166374b438da68ac06972ca143d0a54d59","e230a61047bc041516c811baa08a7174d6f8322a"],"d4646f166374b438da68ac06972ca143d0a54d59":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","d4646f166374b438da68ac06972ca143d0a54d59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"d4646f166374b438da68ac06972ca143d0a54d59":["70ad682703b8585f5d0a637efec044d57ec05efb","e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","d4646f166374b438da68ac06972ca143d0a54d59","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}