{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores);\n          weight.normalize(1f, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        // no-op\n        // This query is for abuse cases when the number of terms is too high to\n        // run efficiently as a BooleanQuery. So likewise we hide its terms in\n        // order to protect highlighters\n      }\n\n      /**\n       * On the given leaf context, try to either rewrite to a disjunction if\n       * there are few matching terms, or build a bitset containing matching docs.\n       */\n      private WeightOrDocIdSet rewrite(LeafReaderContext context) throws IOException {\n        final LeafReader reader = context.reader();\n\n        // We will first try to collect up to 'threshold' terms into 'matchingTerms'\n        // if there are two many terms, we will fall back to building the 'builder'\n        final int threshold = Math.min(BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, BooleanQuery.getMaxClauseCount());\n        assert termData.size() > threshold : \"Query should have been rewritten\";\n        List<TermAndState> matchingTerms = new ArrayList<>(threshold);\n        DocIdSetBuilder builder = null;\n\n        final Fields fields = reader.fields();\n        String lastField = null;\n        Terms terms = null;\n        TermsEnum termsEnum = null;\n        PostingsEnum docs = null;\n        TermIterator iterator = termData.iterator();\n        for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {\n          String field = iterator.field();\n          // comparing references is fine here\n          if (field != lastField) {\n            terms = fields.terms(field);\n            if (terms == null) {\n              termsEnum = null;\n            } else {\n              termsEnum = terms.iterator();\n            }\n            lastField = field;\n          }\n          if (termsEnum != null && termsEnum.seekExact(term)) {\n            if (matchingTerms == null) {\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n            } else if (matchingTerms.size() < threshold) {\n              matchingTerms.add(new TermAndState(field, termsEnum));\n            } else {\n              assert matchingTerms.size() == threshold;\n              if (singleField) {\n                // common case: all terms are in the same field\n                // use an optimized builder that leverages terms stats to be more efficient\n                builder = new DocIdSetBuilder(reader.maxDoc(), terms);\n              } else {\n                // corner case: different fields\n                // don't make assumptions about the docs we will get\n                builder = new DocIdSetBuilder(reader.maxDoc());\n              }\n              docs = termsEnum.postings(docs, PostingsEnum.NONE);\n              builder.add(docs);\n              for (TermAndState t : matchingTerms) {\n                t.termsEnum.seekExact(t.term, t.state);\n                docs = t.termsEnum.postings(docs, PostingsEnum.NONE);\n                builder.add(docs);\n              }\n              matchingTerms = null;\n            }\n          }\n        }\n        if (matchingTerms != null) {\n          assert builder == null;\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          for (TermAndState t : matchingTerms) {\n            final TermContext termContext = new TermContext(searcher.getTopReaderContext());\n            termContext.register(t.state, context.ord, t.docFreq, t.totalTermFreq);\n            bq.add(new TermQuery(new Term(t.field, t.term), termContext), Occur.SHOULD);\n          }\n          Query q = new ConstantScoreQuery(bq.build());\n          final Weight weight = searcher.rewrite(q).createWeight(searcher, needsScores, score());\n          return new WeightOrDocIdSet(weight);\n        } else {\n          assert builder != null;\n          return new WeightOrDocIdSet(builder.build());\n        }\n      }\n\n      private Scorer scorer(DocIdSet set) throws IOException {\n        if (set == null) {\n          return null;\n        }\n        final DocIdSetIterator disi = set.iterator();\n        if (disi == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), disi);\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.bulkScorer(context);\n        } else {\n          final Scorer scorer = scorer(weightOrBitSet.set);\n          if (scorer == null) {\n            return null;\n          }\n          return new DefaultBulkScorer(scorer);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final WeightOrDocIdSet weightOrBitSet = rewrite(context);\n        if (weightOrBitSet.weight != null) {\n          return weightOrBitSet.weight.scorer(context);\n        } else {\n          return scorer(weightOrBitSet.set);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["8d73510b39df24d6b65de48e56f8dccb136b9d01","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}