{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"/dev/null","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          liveDocs.write(dir, delFileName, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","date":1326996651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          liveDocs.write(dir, delFileName, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01cb549dce822ce8a82b6ce2754b5a63181a44ca","date":1326996973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs MutableBits=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01bf951751b6dabfd53cb1429a659b28cd6ab4b","date":1327023967,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs MutableBits=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs MutableBits=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs MutableBits=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8daf107908340529aa1381b475f2eb79b4f4865a","date":1327774969,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs(liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          liveDocs.write(dir, delFileName, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        final String delFileName = info.getDelFileName();\n        boolean success = false;\n        try {\n          liveDocs.write(dir, delFileName, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n            try {\n              dir.deleteFile(delFileName);\n            } catch (Throwable t) {\n              // Suppress this so we keep throwing the\n              // original exception\n            }\n          }\n        }\n        assert (info.docCount - liveDocs.count()) == info.getDelCount() + pendingDeleteCount:\n           \"delete count mismatch during commit: seg=\" + info + \" info.delCount=\" + info.getDelCount() + \" vs BitVector=\" + (info.docCount-liveDocs.count() + \" pendingDelCount=\" + pendingDeleteCount);\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#writeLiveDocs(Directory).mjava","sourceNew":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    // Commit live docs to the directory (writes new\n    // _X_N.del files); returns true if it wrote the file\n    // and false if there were no new deletes to write:\n    public synchronized boolean writeLiveDocs(Directory dir) throws IOException {\n      //System.out.println(\"rld.writeLiveDocs seg=\" + info + \" pendingDelCount=\" + pendingDeleteCount);\n      if (pendingDeleteCount != 0) {\n        // We have new deletes\n        assert liveDocs.length() == info.docCount;\n\n        // Save in case we need to rollback on failure:\n        final SegmentInfo sav = (SegmentInfo) info.clone();\n        info.advanceDelGen();\n        info.setDelCount(info.getDelCount() + pendingDeleteCount);\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        boolean success = false;\n        try {\n          info.getCodec().liveDocsFormat().writeLiveDocs((MutableBits)liveDocs, dir, info, IOContext.DEFAULT);\n          success = true;\n        } finally {\n          if (!success) {\n            info.reset(sav);\n          }\n        }\n        pendingDeleteCount = 0;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"8daf107908340529aa1381b475f2eb79b4f4865a":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["9ce667c6d3400b22523701c549c0d35e26da8b46","8daf107908340529aa1381b475f2eb79b4f4865a"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["01cb549dce822ce8a82b6ce2754b5a63181a44ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"01cb549dce822ce8a82b6ce2754b5a63181a44ca":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7"]},"commit2Childs":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["01cb549dce822ce8a82b6ce2754b5a63181a44ca"],"8daf107908340529aa1381b475f2eb79b4f4865a":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["8daf107908340529aa1381b475f2eb79b4f4865a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"01cb549dce822ce8a82b6ce2754b5a63181a44ca":["c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}