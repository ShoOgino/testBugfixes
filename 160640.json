{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTermReuse(a, \"\", \"\");\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTermReuse(a, \"\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTermReuse(a, \"\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n    a.close();\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchMinimalStemFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n    a.close();\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        return new TokenStreamComponents(tokenizer, new FrenchMinimalStemFilter(tokenizer));\n      }\n    };\n    checkOneTerm(a, \"\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}