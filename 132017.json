{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random, dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random, dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random, dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random, dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestIndexReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random(), dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random(), dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random, dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random, dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random(), dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random(), dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random(), dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random(), dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random(), dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random(), dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","sourceOld":"  public void testReopen() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    final Directory dir1 = newDirectory();\n    \n    createIndex(random(), dir1, false);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir1);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir1);\n      }\n      \n    });\n    dir1.close();\n    \n    final Directory dir2 = newDirectory();\n    \n    createIndex(random(), dir2, true);\n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        TestDirectoryReaderReopen.modifyIndex(i, dir2);\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir2);\n      }\n      \n    });\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"0837ab0472feecb3a54260729d845f839e1cbd72":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ad7de846867bd14c63f9dd19df082f72c5ea9c54","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0837ab0472feecb3a54260729d845f839e1cbd72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}