{"path":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      value = \"bytes:bytes.utf8ToString();\";\n      break;\n    case VAR_INTS:\n      value = \"int:\" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32:\" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64:\" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      // don't use to unicode string this is not necessarily unicode here\n      value = \"bytes: \" + bytes.toString();\n      break;\n    case FIXED_INTS_16:\n      value = \"int16: \" + longValue;\n      break;\n    case FIXED_INTS_32:\n      value = \"int32: \" + longValue;\n      break;\n    case FIXED_INTS_64:\n      value = \"int64: \" + longValue;\n      break;\n    case FIXED_INTS_8:\n      value = \"int8: \" + longValue;\n      break;\n    case VAR_INTS:\n      value = \"vint: \" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32: \" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64: \" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      value = \"bytes:bytes.utf8ToString();\";\n      break;\n    case VAR_INTS:\n      value = \"int:\" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32:\" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64:\" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      // don't use to unicode string this is not necessarily unicode here\n      value = \"bytes: \" + bytes.toString();\n      break;\n    case FIXED_INTS_16:\n      value = \"int16: \" + longValue;\n      break;\n    case FIXED_INTS_32:\n      value = \"int32: \" + longValue;\n      break;\n    case FIXED_INTS_64:\n      value = \"int64: \" + longValue;\n      break;\n    case FIXED_INTS_8:\n      value = \"int8: \" + longValue;\n      break;\n    case VAR_INTS:\n      value = \"vint: \" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32: \" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64: \" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": DocValuesField \" + value + \">\";\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      // don't use to unicode string this is not necessarily unicode here\n      value = \"bytes: \" + bytes.toString();\n      break;\n    case FIXED_INTS_16:\n      value = \"int16: \" + longValue;\n      break;\n    case FIXED_INTS_32:\n      value = \"int32: \" + longValue;\n      break;\n    case FIXED_INTS_64:\n      value = \"int64: \" + longValue;\n      break;\n    case FIXED_INTS_8:\n      value = \"int8: \" + longValue;\n      break;\n    case VAR_INTS:\n      value = \"vint: \" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32: \" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64: \" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      // don't use to unicode string this is not necessarily unicode here\n      value = \"bytes: \" + bytes.toString();\n      break;\n    case FIXED_INTS_16:\n      value = \"int16: \" + longValue;\n      break;\n    case FIXED_INTS_32:\n      value = \"int32: \" + longValue;\n      break;\n    case FIXED_INTS_64:\n      value = \"int64: \" + longValue;\n      break;\n    case FIXED_INTS_8:\n      value = \"int8: \" + longValue;\n      break;\n    case VAR_INTS:\n      value = \"vint: \" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32: \" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64: \" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": DocValuesField \" + value + \">\";\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_SORTED:\n      // don't use to unicode string this is not necessarily unicode here\n      value = \"bytes: \" + bytes.toString();\n      break;\n    case FIXED_INTS_16:\n      value = \"int16: \" + longValue;\n      break;\n    case FIXED_INTS_32:\n      value = \"int32: \" + longValue;\n      break;\n    case FIXED_INTS_64:\n      value = \"int64: \" + longValue;\n      break;\n    case FIXED_INTS_8:\n      value = \"int8: \" + longValue;\n      break;\n    case VAR_INTS:\n      value = \"vint: \" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32: \" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64: \" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["e128967bca58657bc0039d4bfe631e63e81f1977"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}