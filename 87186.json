{"path":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}