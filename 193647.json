{"path":"modules/spatial/src/test/org/apache/lucene/spatial/base/distance/TestDistances#testCalcBoxByDistFromPt().mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/distance/TestDistances#testCalcBoxByDistFromPt().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#testCalcBoxByDistFromPt().mjava","sourceNew":"  @Test\n  public void testCalcBoxByDistFromPt() {\n    //first test regression\n    {\n      double d = 6894.1;\n      Point pCtr = pLL(-20, 84);\n      Point pTgt = pLL(-42, 15);\n      assertTrue(dc().distance(pCtr, pTgt) < d);\n      //since the pairwise distance is less than d, a bounding box from ctr with d should contain pTgt.\n      Rectangle r = dc().calcBoxByDistFromPt(pCtr, d, ctx);\n      assertEquals(SpatialRelation.CONTAINS,r.relate(pTgt, ctx));\n      checkBBox(pCtr,d);\n    }\n\n    assertEquals(\"0 dist, horiz line\",\n        -45,dc().calcBoxByDistFromPtHorizAxis(ctx.makePoint(-180,-45),0,ctx),0);\n\n    double MAXDIST = ctx.getUnits().earthCircumference() / 2;\n    checkBBox(ctx.makePoint(0,0), MAXDIST);\n    checkBBox(ctx.makePoint(0,0), MAXDIST *0.999999);\n    checkBBox(ctx.makePoint(0,0),0);\n    checkBBox(ctx.makePoint(0,0),0.000001);\n    checkBBox(ctx.makePoint(0,90),0.000001);\n    checkBBox(ctx.makePoint(-32.7,-5.42),9829);\n    checkBBox(ctx.makePoint(0,90-20),ctx.getDistCalc().degreesToDistance(20));\n    {\n      double d = 0.010;//10m\n      checkBBox(ctx.makePoint(0,90-ctx.getDistCalc().distanceToDegrees(d+0.001)),d);\n    }\n\n    for (int T = 0; T < 100; T++) {\n      double lat = -90 + random.nextDouble()*180;\n      double lon = -180 + random.nextDouble()*360;\n      Point ctr = ctx.makePoint(lon, lat);\n      double dist = MAXDIST*random.nextDouble();\n      checkBBox(ctr, dist);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCalcBoxByDistFromPt() {\n    //first test regression\n    {\n      double d = 6894.1;\n      Point pCtr = pLL(-20, 84);\n      Point pTgt = pLL(-42, 15);\n      assertTrue(dc().distance(pCtr, pTgt) < d);\n      //since the pairwise distance is less than d, a bounding box from ctr with d should contain pTgt.\n      Rectangle r = dc().calcBoxByDistFromPt(pCtr, d, ctx);\n      assertEquals(SpatialRelation.CONTAINS,r.relate(pTgt, ctx));\n      checkBBox(pCtr,d);\n    }\n\n    assertEquals(\"0 dist, horiz line\",\n        -45,dc().calcBoxByDistFromPtHorizAxis(ctx.makePoint(-180,-45),0,ctx),0);\n\n    double MAXDIST = ctx.getUnits().earthCircumference() / 2;\n    checkBBox(ctx.makePoint(0,0), MAXDIST);\n    checkBBox(ctx.makePoint(0,0), MAXDIST *0.999999);\n    checkBBox(ctx.makePoint(0,0),0);\n    checkBBox(ctx.makePoint(0,0),0.000001);\n    checkBBox(ctx.makePoint(0,90),0.000001);\n    checkBBox(ctx.makePoint(-32.7,-5.42),9829);\n    checkBBox(ctx.makePoint(0,90-20),ctx.getDistCalc().degreesToDistance(20));\n    {\n      double d = 0.010;//10m\n      checkBBox(ctx.makePoint(0,90-ctx.getDistCalc().distanceToDegrees(d+0.001)),d);\n    }\n\n    for (int T = 0; T < 100; T++) {\n      double lat = -90 + random.nextDouble()*180;\n      double lon = -180 + random.nextDouble()*360;\n      Point ctr = ctx.makePoint(lon, lat);\n      double dist = MAXDIST*random.nextDouble();\n      checkBBox(ctr, dist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/distance/TestDistances#testCalcBoxByDistFromPt().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/distance/TestDistances#testCalcBoxByDistFromPt().mjava","sourceNew":"  @Test\n  public void testCalcBoxByDistFromPt() {\n    //first test regression\n    {\n      double d = 6894.1;\n      Point pCtr = pLL(-20, 84);\n      Point pTgt = pLL(-42, 15);\n      assertTrue(dc().distance(pCtr, pTgt) < d);\n      //since the pairwise distance is less than d, a bounding box from ctr with d should contain pTgt.\n      Rectangle r = dc().calcBoxByDistFromPt(pCtr, d, ctx);\n      assertEquals(SpatialRelation.CONTAINS,r.relate(pTgt, ctx));\n      checkBBox(pCtr,d);\n    }\n\n    assertEquals(\"0 dist, horiz line\",\n        -45,dc().calcBoxByDistFromPtHorizAxis(ctx.makePoint(-180,-45),0,ctx),0);\n\n    double MAXDIST = ctx.getUnits().earthCircumference() / 2;\n    checkBBox(ctx.makePoint(0,0), MAXDIST);\n    checkBBox(ctx.makePoint(0,0), MAXDIST *0.999999);\n    checkBBox(ctx.makePoint(0,0),0);\n    checkBBox(ctx.makePoint(0,0),0.000001);\n    checkBBox(ctx.makePoint(0,90),0.000001);\n    checkBBox(ctx.makePoint(-32.7,-5.42),9829);\n    checkBBox(ctx.makePoint(0,90-20),ctx.getDistCalc().degreesToDistance(20));\n    {\n      double d = 0.010;//10m\n      checkBBox(ctx.makePoint(0,90-ctx.getDistCalc().distanceToDegrees(d+0.001)),d);\n    }\n\n    for (int T = 0; T < 100; T++) {\n      double lat = -90 + random.nextDouble()*180;\n      double lon = -180 + random.nextDouble()*360;\n      Point ctr = ctx.makePoint(lon, lat);\n      double dist = MAXDIST*random.nextDouble();\n      checkBBox(ctr, dist);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCalcBoxByDistFromPt() {\n    //first test regression\n    {\n      double d = 6894.1;\n      Point pCtr = pLL(-20, 84);\n      Point pTgt = pLL(-42, 15);\n      assertTrue(dc().distance(pCtr, pTgt) < d);\n      //since the pairwise distance is less than d, a bounding box from ctr with d should contain pTgt.\n      Rectangle r = dc().calcBoxByDistFromPt(pCtr, d, ctx);\n      assertEquals(SpatialRelation.CONTAINS,r.relate(pTgt, ctx));\n      checkBBox(pCtr,d);\n    }\n\n    assertEquals(\"0 dist, horiz line\",\n        -45,dc().calcBoxByDistFromPtHorizAxis(ctx.makePoint(-180,-45),0,ctx),0);\n\n    double MAXDIST = ctx.getUnits().earthCircumference() / 2;\n    checkBBox(ctx.makePoint(0,0), MAXDIST);\n    checkBBox(ctx.makePoint(0,0), MAXDIST *0.999999);\n    checkBBox(ctx.makePoint(0,0),0);\n    checkBBox(ctx.makePoint(0,0),0.000001);\n    checkBBox(ctx.makePoint(0,90),0.000001);\n    checkBBox(ctx.makePoint(-32.7,-5.42),9829);\n    checkBBox(ctx.makePoint(0,90-20),ctx.getDistCalc().degreesToDistance(20));\n    {\n      double d = 0.010;//10m\n      checkBBox(ctx.makePoint(0,90-ctx.getDistCalc().distanceToDegrees(d+0.001)),d);\n    }\n\n    for (int T = 0; T < 100; T++) {\n      double lat = -90 + random.nextDouble()*180;\n      double lon = -180 + random.nextDouble()*360;\n      Point ctr = ctx.makePoint(lon, lat);\n      double dist = MAXDIST*random.nextDouble();\n      checkBBox(ctr, dist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}