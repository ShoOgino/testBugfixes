{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","commits":[{"id":"8a7f628d78d532de820bc8af06bb870f1cb5eafb","date":1570036413,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    \n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    \n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    \n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testClusterPropOverridesCollecitonProp().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic logic is <b>not</b> used if the cluster prop for it is disabled \n   * (even if sys prop is set after collection is created)\n   */\n  @Test\n  public void testClusterPropOverridesCollecitonProp() throws Exception {\n    final String COLLECTION = \"test_clusterprop\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,2)\", COLLECTION,\n                 clusterShape(2, 2), 90, TimeUnit.SECONDS);\n                 \n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["8a7f628d78d532de820bc8af06bb870f1cb5eafb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8a7f628d78d532de820bc8af06bb870f1cb5eafb"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a7f628d78d532de820bc8af06bb870f1cb5eafb","b0b597c65628ca9e73913a07e81691f8229bae35"],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","b0b597c65628ca9e73913a07e81691f8229bae35"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}