{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","commits":[{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","pathOld":"/dev/null","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 36, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<Thread>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0acc1d2633f1da06cf1cebacb81588a93933a","date":1390667229,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<Thread>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 36, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<Thread>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<Thread>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4339eef0c1b12030c8590187e652cd1cd0a1f3cb","date":1397833225,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    compareResults(controlCount, cloudCount);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d4e0acc1d2633f1da06cf1cebacb81588a93933a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d4e0acc1d2633f1da06cf1cebacb81588a93933a":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["d4e0acc1d2633f1da06cf1cebacb81588a93933a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["bafca15d8e408346a67f4282ad1143b88023893b"],"d4e0acc1d2633f1da06cf1cebacb81588a93933a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}