{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac1075ab5d486199f24ec3a7c07dc9b74606161","date":1476897426,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2305f39a86a068f1cee6fc5fbdfb760b153ac138","date":1476906991,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(ID, id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(ID, id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    if(includeStreams){\n      // streams\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      } else {\n        throw new IOException(\"This UniqueStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"runInterval\", Long.toString(runInterval)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"queueSize\", Integer.toString(queueSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"terminate\", Boolean.toString(terminate)));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","3ac1075ab5d486199f24ec3a7c07dc9b74606161"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["3ac1075ab5d486199f24ec3a7c07dc9b74606161","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}