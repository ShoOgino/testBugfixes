{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad68f0b439c4c71e87d2905799fdc28eb3174f3e","date":1294830907,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":"  public void testGoodCases() throws Exception {\n    \n    IndexReader reader = IndexReader.open(store);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    reader = IndexReader.open(store);\n    searcher = new IndexSearcher(reader);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexSearcher searcher = new IndexSearcher(store, true);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    searcher = new IndexSearcher(store, true);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":null,"sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexReader reader = IndexReader.open(store);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    reader = IndexReader.open(store);\n    searcher = new IndexSearcher(reader);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":null,"sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexReader reader = IndexReader.open(store);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    reader = IndexReader.open(store);\n    searcher = new IndexSearcher(reader);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testGoodCases().mjava","sourceNew":null,"sourceOld":"  public void testGoodCases() throws Exception {\n    \n    IndexReader reader = IndexReader.open(store);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should put docs with shorter length first\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      \n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" <= \" + lastScore;\n      assertTrue(msg, scores[i] <= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n\n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"field\");\n    \n    // new norm (with default similarity) should put longer docs first\n    reader = IndexReader.open(store);\n    searcher = new IndexSearcher(reader);\n    searcher.search(new TermQuery(new Term(\"field\", \"word\")),  new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      @Override\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        docBase = context.docBase;\n      }\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    reader.close();\n    \n    lastScore = 0.0f;\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" >= \" + lastScore;\n      assertTrue(msg, scores[i] >= lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"323f871ffe96b871d8c534a614be60751bb023c2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ad68f0b439c4c71e87d2905799fdc28eb3174f3e":["323f871ffe96b871d8c534a614be60751bb023c2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ad68f0b439c4c71e87d2905799fdc28eb3174f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ad68f0b439c4c71e87d2905799fdc28eb3174f3e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ad68f0b439c4c71e87d2905799fdc28eb3174f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"323f871ffe96b871d8c534a614be60751bb023c2":["ad68f0b439c4c71e87d2905799fdc28eb3174f3e"],"ad68f0b439c4c71e87d2905799fdc28eb3174f3e":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3a0403b45dfe384fae4a1b6e96c3265d000c498","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}