{"path":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf","date":1303512308,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        state.attribute.reflectWith(reflector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this AttributeSource holds to the given {@link AttributeReflector}.\n   *\n   * <p>This method iterates over all Attribute implementations and calls the\n   * corresponding {@link AttributeImpl#reflectWith} method.</p>\n   *\n   * @see AttributeImpl#reflectWith\n   */\n  public final void reflectWith(AttributeReflector reflector) {\n    for (State state = getCurrentState(); state != null; state = state.next) {\n      state.attribute.reflectWith(reflector);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["e79a6d080bdd5b2a8f56342cf571b5476de04180","47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","47ef98c97dcd0008187c6ae3c5b4dfe61fbe55cf","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}