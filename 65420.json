{"path":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","pathOld":"/dev/null","sourceNew":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new DefaultZkACLProvider() {\n            @Override\n            protected List<ACL> createGlobalACLsToAdd() {\n              try {\n                List<ACL> result = new ArrayList<ACL>();\n            \n                if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestUsername + \":\" + digestPassword))));\n                }\n            \n                if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n                }\n                \n                if (result.isEmpty()) {\n                  result = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n                \n                return result;\n              } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","sourceNew":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new VMParamsAllAndReadonlyDigestZkACLProvider() {\n            @Override\n            protected List<ACL> createNonSecurityACLsToAdd() {\n              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n\n            /**\n             * @return Set of ACLs to return security-related znodes\n             */\n            @Override\n            protected List<ACL> createSecurityACLsToAdd() {\n              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n          };\n        }\n        \n      };\n    }\n\n","sourceOld":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new DefaultZkACLProvider() {\n            @Override\n            protected List<ACL> createGlobalACLsToAdd() {\n              try {\n                List<ACL> result = new ArrayList<ACL>();\n            \n                if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestUsername + \":\" + digestPassword))));\n                }\n            \n                if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n                }\n                \n                if (result.isEmpty()) {\n                  result = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n                \n                return result;\n              } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","sourceNew":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new VMParamsAllAndReadonlyDigestZkACLProvider() {\n            @Override\n            protected List<ACL> createNonSecurityACLsToAdd() {\n              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n\n            /**\n             * @return Set of ACLs to return security-related znodes\n             */\n            @Override\n            protected List<ACL> createSecurityACLsToAdd() {\n              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n          };\n        }\n        \n      };\n    }\n\n","sourceOld":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new DefaultZkACLProvider() {\n            @Override\n            protected List<ACL> createGlobalACLsToAdd() {\n              try {\n                List<ACL> result = new ArrayList<ACL>();\n            \n                if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestUsername + \":\" + digestPassword))));\n                }\n            \n                if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n                }\n                \n                if (result.isEmpty()) {\n                  result = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n                \n                return result;\n              } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","sourceNew":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new VMParamsAllAndReadonlyDigestZkACLProvider() {\n            @Override\n            protected List<ACL> createNonSecurityACLsToAdd() {\n              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n\n            /**\n             * @return Set of ACLs to return security-related znodes\n             */\n            @Override\n            protected List<ACL> createSecurityACLsToAdd() {\n              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n          };\n        }\n        \n      };\n    }\n\n","sourceOld":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new DefaultZkACLProvider() {\n            @Override\n            protected List<ACL> createGlobalACLsToAdd() {\n              try {\n                List<ACL> result = new ArrayList<ACL>();\n            \n                if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.ALL, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestUsername + \":\" + digestPassword))));\n                }\n            \n                if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {\n                  result.add(new ACL(ZooDefs.Perms.READ, new Id(\"digest\", DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + \":\" + digestReadonlyPassword))));\n                }\n                \n                if (result.isEmpty()) {\n                  result = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n                \n                return result;\n              } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverriddenZkACLAndCredentialsProvidersTest.SolrZkClientFactoryUsingCompletelyNewProviders#getSolrZkClient(String,int).mjava","sourceNew":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                result.add(new ZkCredentials(\"digest\",\n                    (digestUsername + \":\" + digestPassword).getBytes(StandardCharsets.UTF_8)));\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new VMParamsAllAndReadonlyDigestZkACLProvider() {\n            @Override\n            protected List<ACL> createNonSecurityACLsToAdd() {\n              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n\n            /**\n             * @return Set of ACLs to return security-related znodes\n             */\n            @Override\n            protected List<ACL> createSecurityACLsToAdd() {\n              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n          };\n        }\n        \n      };\n    }\n\n","sourceOld":"    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {\n      return new SolrZkClient(zkServerAddress, zkClientTimeout) {\n        \n        @Override\n        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n          return new DefaultZkCredentialsProvider() {\n            @Override\n            protected Collection<ZkCredentials> createCredentials() {\n              List<ZkCredentials> result = new ArrayList<ZkCredentials>();\n              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {\n                try {\n                  result.add(new ZkCredentials(\"digest\", (digestUsername + \":\" + digestPassword).getBytes(\"UTF-8\")));\n                } catch (UnsupportedEncodingException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n              return result;\n            }\n\n          };\n        }\n\n        @Override\n        public ZkACLProvider createZkACLProvider() {\n          return new VMParamsAllAndReadonlyDigestZkACLProvider() {\n            @Override\n            protected List<ACL> createNonSecurityACLsToAdd() {\n              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n\n            /**\n             * @return Set of ACLs to return security-related znodes\n             */\n            @Override\n            protected List<ACL> createSecurityACLsToAdd() {\n              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);\n            }\n          };\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"]},"commit2Childs":{"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"20be168d828ac40d262f85364d02f15b491dd88b":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c83f985d9828d30801541f1eed26aa3169646baf":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}