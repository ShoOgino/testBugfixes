{"path":"src/java/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","pathOld":"src/java/org/apache/solr/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","sourceNew":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write(\"=\\\"\");\n      out.write(attrs[i].toString());\n      out.write(\"\\\"\");\n    }\n    if (val == null) {\n      out.write(\"/>\");\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write(\"</\");\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","sourceOld":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write(\"=\\\"\");\n      out.write(attrs[i].toString());\n      out.write(\"\\\"\");\n    }\n    if (val == null) {\n      out.write(\"/>\");\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write(\"</\");\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c355d9286f784cff62d09cae2d0752fdacb156e","date":1192387134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","pathOld":"src/java/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","sourceNew":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write('=');\n      out.write('\"');\n      out.write(attrs[i].toString());\n      out.write('\"');\n    }\n    if (val == null) {\n      out.write('/');\n      out.write('>');\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write('<');\n      out.write('/');\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","sourceOld":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write(\"=\\\"\");\n      out.write(attrs[i].toString());\n      out.write(\"\\\"\");\n    }\n    if (val == null) {\n      out.write(\"/>\");\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write(\"</\");\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","pathOld":"src/java/org/apache/solr/common/util/XML#writeUnescapedXML(Writer,String,String,Object...).mjava","sourceNew":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write('=');\n      out.write('\"');\n      out.write(attrs[i].toString());\n      out.write('\"');\n    }\n    if (val == null) {\n      out.write('/');\n      out.write('>');\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write('<');\n      out.write('/');\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","sourceOld":"  /** does NOT escape character data in val, must already be valid XML */\n  public final static void writeUnescapedXML(Writer out, String tag, String val, Object... attrs) throws IOException {\n    out.write('<');\n    out.write(tag);\n    for (int i=0; i<attrs.length; i++) {\n      out.write(' ');\n      out.write(attrs[i++].toString());\n      out.write('=');\n      out.write('\"');\n      out.write(attrs[i].toString());\n      out.write('\"');\n    }\n    if (val == null) {\n      out.write('/');\n      out.write('>');\n    } else {\n      out.write('>');\n      out.write(val);\n      out.write('<');\n      out.write('/');\n      out.write(tag);\n      out.write('>');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}