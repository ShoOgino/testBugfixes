{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}