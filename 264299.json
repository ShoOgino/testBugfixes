{"path":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final SegmentInfos infosSorted = new SegmentInfos();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.info(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final SegmentInfos eligible = new SegmentInfos();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        SegmentInfos best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final SegmentInfos candidate = new SegmentInfos();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.info(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["404dafe26b816e6ed478486e26abd62d8607b123","404dafe26b816e6ed478486e26abd62d8607b123","0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final SegmentInfos infosSorted = new SegmentInfos();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.info(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final SegmentInfos eligible = new SegmentInfos();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        SegmentInfos best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final SegmentInfos candidate = new SegmentInfos();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.info(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final SegmentInfos infosSorted = new SegmentInfos();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.info(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final SegmentInfos eligible = new SegmentInfos();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        SegmentInfos best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final SegmentInfos candidate = new SegmentInfos();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.info(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final SegmentInfos infosSorted = new SegmentInfos();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.info(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final SegmentInfos eligible = new SegmentInfos();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        SegmentInfos best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final SegmentInfos candidate = new SegmentInfos();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.info(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final SegmentInfos infosSorted = new SegmentInfos();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.info(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final SegmentInfos eligible = new SegmentInfos();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        SegmentInfos best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final SegmentInfos candidate = new SegmentInfos();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.info(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>();\n    infosSorted.addAll(infos);\n\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes(true);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentInfo> toBeMerged = new HashSet<SegmentInfo>();\n\n    final List<SegmentInfo> infosSorted = new ArrayList<SegmentInfo>(infos.asList());\n    Collections.sort(infosSorted, segmentByteSizeDescending);\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(\"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() >= allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentInfo> candidate = new ArrayList<SegmentInfo>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(\"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(\"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(\"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["3cc749c053615f5871f3b95715fe292f34e70a53","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3cc749c053615f5871f3b95715fe292f34e70a53":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3cc749c053615f5871f3b95715fe292f34e70a53":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3","45669a651c970812a680841b97a77cce06af559f"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["3cc749c053615f5871f3b95715fe292f34e70a53","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}