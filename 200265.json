{"path":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt();\t\t  // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n\tSegmentInfo si = new SegmentInfo(input.readString(), input.readInt(),\n\t\t\t\t\t directory);\n\taddElement(si);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2cbfa4afac663762cc089553b02cd40096d8ac6","date":1069155357,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt();\t\t          // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si = new SegmentInfo(input.readString(), input.readInt(),\n          directory);\n        addElement(si);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt();\t\t  // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n\tSegmentInfo si = new SegmentInfo(input.readString(), input.readInt(),\n\t\t\t\t\t directory);\n\taddElement(si);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt(); // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      if (input.getFilePointer() >= input.length())\n        version = 0; // old file format without version number\n      else\n        version = input.readLong(); // read version\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt();\t\t          // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si = new SegmentInfo(input.readString(), input.readInt(),\n          directory);\n        addElement(si);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5080735f27287ee9a86441cfca7da3af146ee8d7","date":1081415599,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    \n    InputStream input = directory.openFile(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = 0; // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    InputStream input = directory.openFile(\"segments\");\n    try {\n      counter = input.readInt(); // read counter\n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      if (input.getFilePointer() >= input.length())\n        version = 0; // old file format without version number\n      else\n        version = input.readLong(); // read version\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = 0; // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    \n    InputStream input = directory.openFile(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = 0; // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6627e96da3f5efc85314b83db335fea8518ad464","date":1117908960,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = 0; // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd6eb8b1d71f36e7d134adc278a3d27c2559414c","date":1118080332,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(Constants.INDEX_SEGMENTS_FILENAME);\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(\"segments\");\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24157515079eea65faeec4e1dbb01fea58444c8e","date":1118343636,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(Constants.INDEX_SEGMENTS_FILENAME);\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   */\n  public final void read(Directory directory) throws IOException {\n\n    generation = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws IOException {\n    \n    IndexInput input = directory.openInput(IndexFileNames.SEGMENTS);\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < FORMAT)\n          throw new IOException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        SegmentInfo si =\n          new SegmentInfo(input.readString(), input.readInt(), directory);\n        addElement(si);\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n    }\n    finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   */\n  public final void read(Directory directory) throws IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   */\n  public final void read(Directory directory) throws IOException {\n\n    generation = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   */\n  public final void read(Directory directory) throws IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a","date":1172364225,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      public Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["5080735f27287ee9a86441cfca7da3af146ee8d7"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24157515079eea65faeec4e1dbb01fea58444c8e":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["eeefd99c477417e5c7c574228461ebafe92469d4"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["6627e96da3f5efc85314b83db335fea8518ad464"],"eeefd99c477417e5c7c574228461ebafe92469d4":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["24157515079eea65faeec4e1dbb01fea58444c8e"],"6627e96da3f5efc85314b83db335fea8518ad464":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["c2cbfa4afac663762cc089553b02cd40096d8ac6"],"c2cbfa4afac663762cc089553b02cd40096d8ac6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"5080735f27287ee9a86441cfca7da3af146ee8d7":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["6627e96da3f5efc85314b83db335fea8518ad464"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["c2cbfa4afac663762cc089553b02cd40096d8ac6"],"24157515079eea65faeec4e1dbb01fea58444c8e":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fd6eb8b1d71f36e7d134adc278a3d27c2559414c":["24157515079eea65faeec4e1dbb01fea58444c8e"],"eeefd99c477417e5c7c574228461ebafe92469d4":["1b54a9bc667895a2095a886184bf69a3179e63df"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["eeefd99c477417e5c7c574228461ebafe92469d4"],"6627e96da3f5efc85314b83db335fea8518ad464":["fd6eb8b1d71f36e7d134adc278a3d27c2559414c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["5080735f27287ee9a86441cfca7da3af146ee8d7"],"c2cbfa4afac663762cc089553b02cd40096d8ac6":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"5080735f27287ee9a86441cfca7da3af146ee8d7":["e971ba25509e21a130fef61f0687be0446ca27a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}