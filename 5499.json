{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the {@link Writer} implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(source.type()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(StoredField,Source,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeDoc(Field,Source,int,int).mjava","sourceNew":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(StoredField scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","sourceOld":"  /**\n   * Merges a document with the given <code>docID</code>. The methods\n   * implementation obtains the value for the <i>sourceDoc</i> id from the\n   * current {@link Source}.\n   * <p>\n   * This method is used during merging to provide implementation agnostic\n   * default merge implementation.\n   * </p>\n   * <p>\n   * All documents IDs between the given ID and the previously given ID or\n   * <tt>0</tt> if the method is call the first time are filled with default\n   * values depending on the implementation. The given document\n   * ID must always be greater than the previous ID or <tt>0</tt> if called the\n   * first time.\n   */\n  protected void mergeDoc(Field scratchField, Source source, int docID, int sourceDoc)\n      throws IOException {\n    switch(getType()) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      scratchField.setBytesValue(source.getBytes(sourceDoc, spare));\n      break;\n    case FIXED_INTS_8:\n      scratchField.setByteValue((byte) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_16:\n      scratchField.setShortValue((short) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_32:\n      scratchField.setIntValue((int) source.getInt(sourceDoc));\n      break;\n    case FIXED_INTS_64:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case VAR_INTS:\n      scratchField.setLongValue(source.getInt(sourceDoc));\n      break;\n    case FLOAT_32:\n      scratchField.setFloatValue((float) source.getFloat(sourceDoc));\n      break;\n    case FLOAT_64:\n      scratchField.setDoubleValue(source.getFloat(sourceDoc));\n      break;\n    }\n    add(docID, scratchField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a78a90fc9701e511308346ea29f4f5e548bb39fe","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"1d028314cced5858683a1bb4741423d0f934257b":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}