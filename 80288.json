{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","commits":[{"id":"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2","date":1417531913,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from an existing {@link DirectoryReader}.  Note that\n   * this steals the incoming reference.\n   *\n   * @param reader the DirectoryReader.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(DirectoryReader reader, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    this.current = getSearcher(searcherFactory, reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from an existing {@link DirectoryReader}.  Note that\n   * this steals the incoming reference.\n   *\n   * @param reader the DirectoryReader.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(DirectoryReader reader, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    this.current = getSearcher(searcherFactory, reader, null);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from an existing {@link DirectoryReader}.  Note that\n   * this steals the incoming reference.\n   *\n   * @param reader the DirectoryReader.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(DirectoryReader reader, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    this.current = getSearcher(searcherFactory, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(DirectoryReader,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from an existing {@link DirectoryReader}.  Note that\n   * this steals the incoming reference.\n   *\n   * @param reader the DirectoryReader.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(DirectoryReader reader, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    this.current = getSearcher(searcherFactory, reader, null);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from an existing {@link DirectoryReader}.  Note that\n   * this steals the incoming reference.\n   *\n   * @param reader the DirectoryReader.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(DirectoryReader reader, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    this.current = getSearcher(searcherFactory, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["e6b408591e92d6caf6e2635a340e4cd5f6fb69e2"],"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["e6b408591e92d6caf6e2635a340e4cd5f6fb69e2","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6b408591e92d6caf6e2635a340e4cd5f6fb69e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}