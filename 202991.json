{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          \n          // NOTE: instead of moving supplementary code points (0xee and 0xef) to the unused 0xfe and 0xff, \n          // we move them to the unused 0xfc and 0xfd [reserved for future 6-byte character sequences]\n          // this reserves 0xff for preflex's term reordering (surrogate dance), and if unicode grows such\n          // that 6-byte sequences are needed we have much bigger problems anyway.\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0xe;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0xe;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"af2638813028b254a88b418ebeafb541afb49653":["7530de27b87b961b51f01bd1299b7004d46e8823","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}