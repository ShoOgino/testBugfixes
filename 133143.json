{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","commits":[{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterStateUpdater,ClusterState,ZkNodeProps).mjava","sourceNew":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionProcessor.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","sourceOld":"    ExclusiveSliceProperty(ClusterStateUpdater updater, ClusterState clusterState, ZkNodeProps message) {\n      this.updater = updater;\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionProcessor.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","sourceOld":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionProcessor.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","bugFix":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ExclusiveSliceProperty#ExclusiveSliceProperty(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    ExclusiveSliceProperty(ClusterState clusterState, ZkNodeProps message) {\n      this.clusterState = clusterState;\n      String tmp = message.getStr(ZkStateReader.PROPERTY_PROP);\n      if (StringUtils.startsWith(tmp, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n        tmp = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + tmp;\n      }\n      this.property = tmp.toLowerCase(Locale.ROOT);\n      collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n\n      if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(property)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Overseer '\" + message.getStr(QUEUE_OPERATION) + \"'  requires both the '\" + ZkStateReader.COLLECTION_PROP + \"' and '\" +\n                ZkStateReader.PROPERTY_PROP + \"' parameters. No action taken \");\n      }\n\n      Boolean shardUnique = Boolean.parseBoolean(message.getStr(SHARD_UNIQUE));\n      if (shardUnique == false &&\n          SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(this.property) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Balancing properties amongst replicas in a slice requires that\"\n            + \" the property be a pre-defined property (e.g. 'preferredLeader') or that 'shardUnique' be set to 'true' \" +\n            \" Property: \" + this.property + \" shardUnique: \" + Boolean.toString(shardUnique));\n      }\n\n      collection = clusterState.getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Could not find collection ' \" + collectionName + \"' for overseer operation '\" +\n                message.getStr(QUEUE_OPERATION) + \"'. No action taken.\");\n      }\n      onlyActiveNodes = Boolean.parseBoolean(message.getStr(ONLY_ACTIVE_NODES, \"true\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"5886c3d78997b0c3f9151247c967e32a8529c59e":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","5886c3d78997b0c3f9151247c967e32a8529c59e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}