{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String).mjava","commits":[{"id":"88cad0b82c4fc846896801e268b13def4dc1b84e","date":1564824026,"type":0,"author":"Leonardo Menezes","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String exportTerms(String destDir, String field) {\n    String filename = \"terms_\" + field + \"_\" + System.currentTimeMillis() + \".out\";\n    Path path = Paths.get(destDir, filename);\n    try {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new LukeException(String.format(Locale.US, \"Field %s does not contain any terms to be exported\", field));\n      }\n      try (BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(\"UTF-8\"))) {\n        TermsEnum termsEnum = terms.iterator();\n        BytesRef term;\n        while (!Thread.currentThread().isInterrupted() && (term = termsEnum.next()) != null) {\n          writer.write(String.format(Locale.US, \"%s,%d\\n\", term.utf8ToString(), +termsEnum.docFreq()));\n        }\n        return path.toString();\n      }\n    } catch (IOException e) {\n      throw new LukeException(\"Terms file export for field [\" + field + \"] to file [\" + filename + \"] has failed.\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String exportTerms(String destDir, String field) {\n    String filename = \"terms_\" + field + \"_\" + System.currentTimeMillis() + \".out\";\n    Path path = Paths.get(destDir, filename);\n    try {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new LukeException(String.format(Locale.US, \"Field %s does not contain any terms to be exported\", field));\n      }\n      try (BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(\"UTF-8\"))) {\n        TermsEnum termsEnum = terms.iterator();\n        BytesRef term;\n        while (!Thread.currentThread().isInterrupted() && (term = termsEnum.next()) != null) {\n          writer.write(String.format(Locale.US, \"%s,%d\\n\", term.utf8ToString(), +termsEnum.docFreq()));\n        }\n        return path.toString();\n      }\n    } catch (IOException e) {\n      throw new LukeException(\"Terms file export for field [\" + field + \"] to file [\" + filename + \"] has failed.\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String exportTerms(String destDir, String field) {\n    String filename = \"terms_\" + field + \"_\" + System.currentTimeMillis() + \".out\";\n    Path path = Paths.get(destDir, filename);\n    try {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new LukeException(String.format(Locale.US, \"Field %s does not contain any terms to be exported\", field));\n      }\n      try (BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(\"UTF-8\"))) {\n        TermsEnum termsEnum = terms.iterator();\n        BytesRef term;\n        while (!Thread.currentThread().isInterrupted() && (term = termsEnum.next()) != null) {\n          writer.write(String.format(Locale.US, \"%s,%d\\n\", term.utf8ToString(), +termsEnum.docFreq()));\n        }\n        return path.toString();\n      }\n    } catch (IOException e) {\n      throw new LukeException(\"Terms file export for field [\" + field + \"] to file [\" + filename + \"] has failed.\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3f81218fdc170a818bb0a75b395a3650a661d","date":1568804028,"type":5,"author":"Amish Shah","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String,String).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/tools/IndexToolsImpl#exportTerms(String,String).mjava","sourceNew":"  public String exportTerms(String destDir, String field, String delimiter) {\n    String filename = \"terms_\" + field + \"_\" + System.currentTimeMillis() + \".out\";\n    Path path = Paths.get(destDir, filename);\n    try {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new LukeException(String.format(Locale.US, \"Field %s does not contain any terms to be exported\", field));\n      }\n      try (BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(\"UTF-8\"))) {\n        TermsEnum termsEnum = terms.iterator();\n        BytesRef term;\n        while (!Thread.currentThread().isInterrupted() && (term = termsEnum.next()) != null) {\n          writer.write(String.format(Locale.US, \"%s%s%d\\n\", term.utf8ToString(), delimiter, +termsEnum.docFreq()));\n        }\n        return path.toString();\n      }\n    } catch (IOException e) {\n      throw new LukeException(\"Terms file export for field [\" + field + \"] to file [\" + filename + \"] has failed.\", e);\n    }\n  }\n\n","sourceOld":"  public String exportTerms(String destDir, String field) {\n    String filename = \"terms_\" + field + \"_\" + System.currentTimeMillis() + \".out\";\n    Path path = Paths.get(destDir, filename);\n    try {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new LukeException(String.format(Locale.US, \"Field %s does not contain any terms to be exported\", field));\n      }\n      try (BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(\"UTF-8\"))) {\n        TermsEnum termsEnum = terms.iterator();\n        BytesRef term;\n        while (!Thread.currentThread().isInterrupted() && (term = termsEnum.next()) != null) {\n          writer.write(String.format(Locale.US, \"%s,%d\\n\", term.utf8ToString(), +termsEnum.docFreq()));\n        }\n        return path.toString();\n      }\n    } catch (IOException e) {\n      throw new LukeException(\"Terms file export for field [\" + field + \"] to file [\" + filename + \"] has failed.\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88cad0b82c4fc846896801e268b13def4dc1b84e"],"01e3f81218fdc170a818bb0a75b395a3650a661d":["88cad0b82c4fc846896801e268b13def4dc1b84e"],"88cad0b82c4fc846896801e268b13def4dc1b84e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","88cad0b82c4fc846896801e268b13def4dc1b84e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01e3f81218fdc170a818bb0a75b395a3650a661d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","88cad0b82c4fc846896801e268b13def4dc1b84e","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"88cad0b82c4fc846896801e268b13def4dc1b84e":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","01e3f81218fdc170a818bb0a75b395a3650a661d","f8061ddd97f3352007d927dae445884a6f3d857b"],"01e3f81218fdc170a818bb0a75b395a3650a661d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}