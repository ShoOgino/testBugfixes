{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n    \n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["08807474e48bac766abf10459c3c25e4a5e4d7cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n    \n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02dfe884e3d07476d8a6a68ed8b3671d9258a4b0","date":1490749780,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","sourceNew":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n\n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() || onlyLeaderIndexes ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() || onlyLeaderIndexes ? TestUtil.nextInt(random(),0,2) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","sourceOld":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n    \n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08807474e48bac766abf10459c3c25e4a5e4d7cc","date":1490873946,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#buildRandomIndex(Float,List[Integer]).mjava","sourceNew":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n\n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() || onlyLeaderIndexes ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() || onlyLeaderIndexes ? TestUtil.nextInt(random(),0,2) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","sourceOld":"  /** \n   * Helper method to build a randomized index with the fields needed for all test methods in this class.\n   * At a minimum, this index will contain 1 doc per \"special\" (non-negative) document id.  These special documents will be added with the <code>initFloat</code> specified in the \"inplace_updatable_float\" field.\n   *\n   * A random number of documents (with negative ids) will be indexed in between each of the \n   * \"special\" documents, as well as before/after the first/last special document.\n   *\n   * @param initFloat Value to use in the \"inplace_updatable_float\" for the special documents; will never be used if null\n   * @param specialIds The ids to use for the special documents, all values must be non-negative\n   * @return the versions of each of the specials document returned when indexing it\n   */\n  protected List<Long> buildRandomIndex(Float initFloat, List<Integer> specialIds) throws Exception {\n    \n    int id = -1; // used for non special docs\n    final int numPreDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n    for (int i = 1; i <= numPreDocs; i++) {\n      addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n      id--;\n    }\n    final List<Long> versions = new ArrayList<>(specialIds.size());\n    for (int special : specialIds) {\n      if (null == initFloat) {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special));\n      } else {\n        versions.add(addDocAndGetVersion(\"id\", special, \"title_s\", \"title\" + special, \"id_i\", special,\n                                         \"inplace_updatable_float\", initFloat));\n      }\n      final int numPostDocs = rarely() ? TestUtil.nextInt(random(),0,9) : atLeast(10);\n      for (int i = 1; i <= numPostDocs; i++) {\n        addDocAndGetVersion(\"id\", id, \"title_s\", \"title\" + id, \"id_i\", id);\n        id--;\n      }\n    }\n    LEADER.commit();\n    \n    assert specialIds.size() == versions.size();\n    return versions;\n  }\n\n","bugFix":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"08807474e48bac766abf10459c3c25e4a5e4d7cc":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"02dfe884e3d07476d8a6a68ed8b3671d9258a4b0":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02dfe884e3d07476d8a6a68ed8b3671d9258a4b0"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","08807474e48bac766abf10459c3c25e4a5e4d7cc","02dfe884e3d07476d8a6a68ed8b3671d9258a4b0"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"08807474e48bac766abf10459c3c25e4a5e4d7cc":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"02dfe884e3d07476d8a6a68ed8b3671d9258a4b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","08807474e48bac766abf10459c3c25e4a5e4d7cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}