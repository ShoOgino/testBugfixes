{"path":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"/dev/null","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"/dev/null","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"/dev/null","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d425927013f8263511a6bacea2a0d81715310b","date":1302519406,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    public void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"11d425927013f8263511a6bacea2a0d81715310b":["56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","11d425927013f8263511a6bacea2a0d81715310b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","11d425927013f8263511a6bacea2a0d81715310b"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["11d425927013f8263511a6bacea2a0d81715310b"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","11d425927013f8263511a6bacea2a0d81715310b"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"11d425927013f8263511a6bacea2a0d81715310b":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","962d04139994fce5193143ef35615499a9a96d78"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","11d425927013f8263511a6bacea2a0d81715310b","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"962d04139994fce5193143ef35615499a9a96d78":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}