{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if these two auotomata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6adfdb3f33dbaf27203539f573faac3966cc55f","date":1318443641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** Returns true if these two auotomata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#sameLanguage(Automaton,Automaton).mjava","sourceNew":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** Returns true if these two automata accept exactly the\n   *  same language.  This is a costly computation!  Note\n   *  also that a1 and a2 will be determinized as a side\n   *  effect. */\n  public static boolean sameLanguage(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return true;\n    }\n    if (a1.isSingleton() && a2.isSingleton()) {\n      return a1.singleton.equals(a2.singleton);\n    } else if (a1.isSingleton()) {\n      // subsetOf is faster if the first automaton is a singleton\n      return subsetOf(a1, a2) && subsetOf(a2, a1);\n    } else {\n      return subsetOf(a2, a1) && subsetOf(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}