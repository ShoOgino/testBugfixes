{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      Path f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + Files.size(f));\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.toAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    currPathType = null;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        InputStream inputStream = StreamUtils.inputStream(f); // support either gzip, bzip2, or regular text file, by extension  \n        reader = new BufferedReader(new InputStreamReader(inputStream, encoding), StreamUtils.BUFFER_SIZE);\n        currPathType = TrecDocParser.pathType(f);\n        return;\n      } catch (Exception e) {\n        if (verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath()+\" due to \"+e.getMessage());\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}