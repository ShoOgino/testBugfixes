{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,Polygon).mjava","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, double holeMinX, double holeMaxX, double holeMinY, double holeMaxY) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getY(), next.getX(), holeMinY, holeMaxY, holeMinX, holeMaxX)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, Polygon hole) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getLat(), next.getLon(), hole.minLat, hole.maxLat, hole.minLon, hole.maxLon)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, double holeMinX, double holeMaxX, double holeMinY, double holeMaxY) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getY(), next.getX(), holeMinY, holeMaxY, holeMinX, holeMaxX)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex, true);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // compute if the bridge overlaps with a polygon edge.\n      boolean fromPolygon = isPointInLine(outerNode, outerNode.next, holeNode) || isPointInLine(holeNode, holeNode.next, outerNode);\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode, fromPolygon);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, double holeMinX, double holeMaxX, double holeMinY, double holeMaxY) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getY(), next.getX(), holeMinY, holeMaxY, holeMinX, holeMaxX)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#eliminateHole(Node,Node,double,double,double,double).mjava","sourceNew":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, double holeMinX, double holeMaxX, double holeMinY, double holeMaxY) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getY(), next.getX(), holeMinY, holeMaxY, holeMinX, holeMaxX)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex, true);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // compute if the bridge overlaps with a polygon edge.\n      boolean fromPolygon = isPointInLine(outerNode, outerNode.next, holeNode) || isPointInLine(holeNode, holeNode.next, outerNode);\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode, fromPolygon);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","sourceOld":"  /** Finds a bridge between vertices that connects a hole with an outer ring, and links it */\n  private static final void eliminateHole(final Node holeNode, Node outerNode, double holeMinX, double holeMaxX, double holeMinY, double holeMaxY) {\n    // Attempt to find a common point between the HoleNode and OuterNode.\n    Node next = outerNode;\n    do {\n      if (Rectangle.containsPoint(next.getY(), next.getX(), holeMinY, holeMaxY, holeMinX, holeMaxX)) {\n        Node sharedVertex = getSharedVertex(holeNode, next);\n        if (sharedVertex != null) {\n          // Split the resulting polygon.\n          Node node = splitPolygon(next, sharedVertex, true);\n          // Filter the split nodes.\n          filterPoints(node, node.next);\n          return;\n        }\n      }\n      next = next.next;\n    } while (next != outerNode);\n\n    // Attempt to find a logical bridge between the HoleNode and OuterNode.\n    outerNode = fetchHoleBridge(holeNode, outerNode);\n\n    // Determine whether a hole bridge could be fetched.\n    if(outerNode != null) {\n      // compute if the bridge overlaps with a polygon edge.\n      boolean fromPolygon = isPointInLine(outerNode, outerNode.next, holeNode) || isPointInLine(holeNode, holeNode.next, outerNode);\n      // Split the resulting polygon.\n      Node node = splitPolygon(outerNode, holeNode, fromPolygon);\n      // Filter the split nodes.\n      filterPoints(node, node.next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}