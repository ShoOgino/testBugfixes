{"path":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","commits":[{"id":"5e9c92541487f346938eae718677aac806afcdab","date":1165802618,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"/dev/null","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or desnse, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e5554d2be0131fc1ce32526016ce4dcc90650e4","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e5554d2be0131fc1ce32526016ce4dcc90650e4","date":1168279868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or desnse, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":["5e9c92541487f346938eae718677aac806afcdab"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e9c92541487f346938eae718677aac806afcdab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["5e9c92541487f346938eae718677aac806afcdab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e9c92541487f346938eae718677aac806afcdab"],"5e9c92541487f346938eae718677aac806afcdab":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}