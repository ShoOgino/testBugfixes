{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new KeywordTokenizer(\n        new StringReader(input)), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new KeywordTokenizer(\n        new StringReader(input)), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new KeywordTokenizer(\n        new StringReader(input)), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new KeywordTokenizer(\n        new StringReader(input)), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new KeywordTokenizer(\n        new StringReader(input)), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1acb945fb5751735f5c9482576c8760d97b6ab","date":1315370590,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS;\n    flags |= (stemPossessive == 1) ? STEM_ENGLISH_POSSESSIVE : 0;\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), flags, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), 1,1,0,0,0,1,0,1,stemPossessive, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#doSplitPossessive(int,String,String...).mjava","sourceNew":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS;\n    flags |= (stemPossessive == 1) ? STEM_ENGLISH_POSSESSIVE : 0;\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), flags, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","sourceOld":"  public void doSplitPossessive(int stemPossessive, final String input, final String... output) throws Exception {\n    int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS;\n    flags |= (stemPossessive == 1) ? STEM_ENGLISH_POSSESSIVE : 0;\n    WordDelimiterFilter wdf = new WordDelimiterFilter(new MockTokenizer(\n        new StringReader(input), MockTokenizer.KEYWORD, false), flags, null);\n\n    assertTokenStreamContents(wdf, output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","ec1acb945fb5751735f5c9482576c8760d97b6ab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}