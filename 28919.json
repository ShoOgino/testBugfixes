{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + docBase);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += docBase; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"/dev/null","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"/dev/null","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d868f38e751225153684493f6a89d784835297bd","date":1299017203,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, filter, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      assert slice.leaves.length == 1;\n      final TopFieldDocs docs = searcher.search (slice.leaves, weight, nDocs, sort, true);\n      lock.lock();\n      try {\n        final int base = slice.leaves[0].docBase;\n        hq.setNextReader(slice.leaves[0]);\n        hq.setScorer(fakeScorer);\n        for(ScoreDoc scoreDoc : docs.scoreDocs) {\n          fakeScorer.doc = scoreDoc.doc - base;\n          fakeScorer.score = scoreDoc.score;\n          hq.collect(scoreDoc.doc-base);\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["d868f38e751225153684493f6a89d784835297bd"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","d868f38e751225153684493f6a89d784835297bd"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","d868f38e751225153684493f6a89d784835297bd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30da203d7de68a87a16025523a483a96c24f4291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30da203d7de68a87a16025523a483a96c24f4291":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"d868f38e751225153684493f6a89d784835297bd":["30da203d7de68a87a16025523a483a96c24f4291"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30da203d7de68a87a16025523a483a96c24f4291":["29ef99d61cda9641b6250bf9567329a6e65f901d","d868f38e751225153684493f6a89d784835297bd","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d868f38e751225153684493f6a89d784835297bd":["6620df8541b174097b1133a4fc370adb2e570524","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}