{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2710a24a2b520d467bc01504a0d0b1f427fb970","date":1350965725,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3db2112612e0e0723af2415cfbdd18553f96b804","date":1378284810,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException If there is a low-level I/O error\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readByte();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readVInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.byteValueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b2710a24a2b520d467bc01504a0d0b1f427fb970","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["b2710a24a2b520d467bc01504a0d0b1f427fb970"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","b2710a24a2b520d467bc01504a0d0b1f427fb970"],"3db2112612e0e0723af2415cfbdd18553f96b804":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"b2710a24a2b520d467bc01504a0d0b1f427fb970":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["99eb4a732d1a908f4636ace52928876136bf1896","de522d9303bd67c8473a269a1319125d1f3700e0","0a570bec4aec8585a4eea44849bfb2bc264208c4","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","b2710a24a2b520d467bc01504a0d0b1f427fb970"],"0a570bec4aec8585a4eea44849bfb2bc264208c4":["3db2112612e0e0723af2415cfbdd18553f96b804"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"3db2112612e0e0723af2415cfbdd18553f96b804":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2710a24a2b520d467bc01504a0d0b1f427fb970":["de522d9303bd67c8473a269a1319125d1f3700e0","e29d4d91327929d477b701d3ef2f5b3457d26ec5","62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","62e52115b56781006682fd92c6938efaf174304d","3db2112612e0e0723af2415cfbdd18553f96b804","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}