{"path":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057119d0666f2a2674ad4bba71baca71cb200801","date":1287510147,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          // @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9077e792550279352dfaab22b394064dc6c62fc","date":1287510928,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          // @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","date":1292210954,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":["4750614f6dd69a084ba692ac13eac93df7e36b83","4750614f6dd69a084ba692ac13eac93df7e36b83","4750614f6dd69a084ba692ac13eac93df7e36b83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"189e978ae1c3cc165c6c7247cd6604c8c33037c7","date":1308355821,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    List<NamedList> allLists = (List<NamedList>)args.get(\"queries\");\n    if (allLists == null) return;\n    for (NamedList nlst : allLists) {\n      SolrQueryRequest req = null;\n\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      } finally {\n        if (req != null) req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["189e978ae1c3cc165c6c7247cd6604c8c33037c7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1da8d55113b689b06716246649de6f62430f15c0","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"a9077e792550279352dfaab22b394064dc6c62fc":["057119d0666f2a2674ad4bba71baca71cb200801"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["a9077e792550279352dfaab22b394064dc6c62fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"057119d0666f2a2674ad4bba71baca71cb200801":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"189e978ae1c3cc165c6c7247cd6604c8c33037c7":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","057119d0666f2a2674ad4bba71baca71cb200801"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a9077e792550279352dfaab22b394064dc6c62fc":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7edfc3f7caa7b49a18fe367692768b33b018e9db","189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"057119d0666f2a2674ad4bba71baca71cb200801":["a9077e792550279352dfaab22b394064dc6c62fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"189e978ae1c3cc165c6c7247cd6604c8c33037c7":["c26f00b574427b55127e869b935845554afde1fa","7edfc3f7caa7b49a18fe367692768b33b018e9db","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}