{"path":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#invalidSigRefreshJwk().mjava","commits":[{"id":"3f67fad1a752e06d753afa1c41bcc27141d258f5","date":1555055351,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#invalidSigRefreshJwk().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simulate a rotate of JWK key in IdP.\n   * Validating of JWK signature will fail since we still use old cached JWK set.\n   * Using a mock {@link HttpsJwks} we validate that plugin calls refresh() and then passes validation\n   */\n  @Test\n  public void invalidSigRefreshJwk() throws JoseException {\n    RsaJsonWebKey rsaJsonWebKey2 = RsaJwkGenerator.generateJwk(2048);\n    rsaJsonWebKey2.setKeyId(\"k2\");\n    HashMap<String, Object> testJwkWrong = new HashMap<>();\n    testJwkWrong.put(\"kty\", rsaJsonWebKey2.getKeyType());\n    testJwkWrong.put(\"e\", BigEndianBigInteger.toBase64Url(rsaJsonWebKey2.getRsaPublicKey().getPublicExponent()));\n    testJwkWrong.put(\"use\", rsaJsonWebKey2.getUse());\n    testJwkWrong.put(\"kid\", rsaJsonWebKey2.getKeyId());\n    testJwkWrong.put(\"alg\", rsaJsonWebKey2.getAlgorithm());\n    testJwkWrong.put(\"n\", BigEndianBigInteger.toBase64Url(rsaJsonWebKey2.getRsaPublicKey().getModulus()));\n    JsonWebKey wrongJwk = JsonWebKey.Factory.newJwk(testJwkWrong);\n\n    // Configure our mock plugin with URL as jwk source\n    JsonWebKey correctJwk = JsonWebKey.Factory.newJwk(testJwk);\n    plugin = new MockJwksUrlPlugin(wrongJwk, correctJwk);\n    HashMap<String, Object> pluginConfigJwkUrl = new HashMap<>();\n    pluginConfigJwkUrl.put(\"class\", \"org.apache.solr.security.JWTAuthPlugin\");\n    pluginConfigJwkUrl.put(\"jwkUrl\", \"dummy\");\n    plugin.init(pluginConfigJwkUrl);\n\n    // Validate that plugin will call refresh() on invalid signature, then the call succeeds\n    assertFalse(((MockJwksUrlPlugin)plugin).isRefreshCalled());\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n    assertTrue(((MockJwksUrlPlugin)plugin).isRefreshCalled());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":4,"author":"Jan Høydahl","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest#invalidSigRefreshJwk().mjava","sourceNew":null,"sourceOld":"  /**\n   * Simulate a rotate of JWK key in IdP.\n   * Validating of JWK signature will fail since we still use old cached JWK set.\n   * Using a mock {@link HttpsJwks} we validate that plugin calls refresh() and then passes validation\n   */\n  @Test\n  public void invalidSigRefreshJwk() throws JoseException {\n    RsaJsonWebKey rsaJsonWebKey2 = RsaJwkGenerator.generateJwk(2048);\n    rsaJsonWebKey2.setKeyId(\"k2\");\n    HashMap<String, Object> testJwkWrong = new HashMap<>();\n    testJwkWrong.put(\"kty\", rsaJsonWebKey2.getKeyType());\n    testJwkWrong.put(\"e\", BigEndianBigInteger.toBase64Url(rsaJsonWebKey2.getRsaPublicKey().getPublicExponent()));\n    testJwkWrong.put(\"use\", rsaJsonWebKey2.getUse());\n    testJwkWrong.put(\"kid\", rsaJsonWebKey2.getKeyId());\n    testJwkWrong.put(\"alg\", rsaJsonWebKey2.getAlgorithm());\n    testJwkWrong.put(\"n\", BigEndianBigInteger.toBase64Url(rsaJsonWebKey2.getRsaPublicKey().getModulus()));\n    JsonWebKey wrongJwk = JsonWebKey.Factory.newJwk(testJwkWrong);\n\n    // Configure our mock plugin with URL as jwk source\n    JsonWebKey correctJwk = JsonWebKey.Factory.newJwk(testJwk);\n    plugin = new MockJwksUrlPlugin(wrongJwk, correctJwk);\n    HashMap<String, Object> pluginConfigJwkUrl = new HashMap<>();\n    pluginConfigJwkUrl.put(\"class\", \"org.apache.solr.security.JWTAuthPlugin\");\n    pluginConfigJwkUrl.put(\"jwkUrl\", \"dummy\");\n    plugin.init(pluginConfigJwkUrl);\n\n    // Validate that plugin will call refresh() on invalid signature, then the call succeeds\n    assertFalse(((MockJwksUrlPlugin)plugin).isRefreshCalled());\n    JWTAuthPlugin.JWTAuthenticationResponse resp = plugin.authenticate(testHeader);\n    assertTrue(resp.isAuthenticated());\n    assertTrue(((MockJwksUrlPlugin)plugin).isRefreshCalled());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43b93409dee3306c3446b1f24bced7b660398bd3":["3f67fad1a752e06d753afa1c41bcc27141d258f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b93409dee3306c3446b1f24bced7b660398bd3"]},"commit2Childs":{"43b93409dee3306c3446b1f24bced7b660398bd3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f67fad1a752e06d753afa1c41bcc27141d258f5"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["43b93409dee3306c3446b1f24bced7b660398bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}