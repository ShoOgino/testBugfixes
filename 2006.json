{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6133e5d5a3f75167f8c5580d5c45c55876f15075","date":1312804503,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77d924c3b8deab5881ed0d996d597a4ea5bbc40a","date":1316977817,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.reusableTokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", q);\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", q);\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", new StringReader(q));\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    try (TokenStream ts = analyzer.tokenStream(\"\", q)) {\n      ts.reset();\n      // TODO: support custom attributes\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n      FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n      PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n      PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n      \n      while (ts.incrementToken()){\n        Token token = new Token();\n        token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        token.setType(typeAtt.type());\n        token.setFlags(flagsAtt.getFlags());\n        token.setPayload(payloadAtt.getPayload());\n        token.setPositionIncrement(posIncAtt.getPositionIncrement());\n        result.add(token);\n      }\n      ts.end();\n      return result;\n    }\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    TokenStream ts = analyzer.tokenStream(\"\", q);\n    ts.reset();\n    // TODO: support custom attributes\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n    FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    \n    while (ts.incrementToken()){\n      Token token = new Token();\n      token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n      token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n      token.setType(typeAtt.type());\n      token.setFlags(flagsAtt.getFlags());\n      token.setPayload(payloadAtt.getPayload());\n      token.setPositionIncrement(posIncAtt.getPositionIncrement());\n      result.add(token);\n    }\n    ts.end();\n    ts.close();\n    return result;\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574","77d924c3b8deab5881ed0d996d597a4ea5bbc40a","be29e0e2cef1fd569147732e48caf8538790339b","ef28ac95f5f85bbf872801277448c0924b0a6827","a7347509fad0711ac30cb15a746e9a3830a38ebd","d085fb336a7208eea2214e5ffcc803960819b60b","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<>();\n    assert analyzer != null;\n    try (TokenStream ts = analyzer.tokenStream(\"\", q)) {\n      ts.reset();\n      // TODO: support custom attributes\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n      FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n      PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n      PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n      \n      while (ts.incrementToken()){\n        Token token = new Token();\n        token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        token.setType(typeAtt.type());\n        token.setFlags(flagsAtt.getFlags());\n        token.setPayload(payloadAtt.getPayload());\n        token.setPositionIncrement(posIncAtt.getPositionIncrement());\n        result.add(token);\n      }\n      ts.end();\n      return result;\n    }\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<Token>();\n    assert analyzer != null;\n    try (TokenStream ts = analyzer.tokenStream(\"\", q)) {\n      ts.reset();\n      // TODO: support custom attributes\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n      FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n      PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n      PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n      \n      while (ts.incrementToken()){\n        Token token = new Token();\n        token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        token.setType(typeAtt.type());\n        token.setFlags(flagsAtt.getFlags());\n        token.setPayload(payloadAtt.getPayload());\n        token.setPositionIncrement(posIncAtt.getPositionIncrement());\n        result.add(token);\n      }\n      ts.end();\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getTokens(String,Analyzer).mjava","sourceNew":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<>();\n    assert analyzer != null;\n    try (TokenStream ts = analyzer.tokenStream(\"\", q)) {\n      ts.reset();\n      // TODO: support custom attributes\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n      FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n      PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n      PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n\n      while (ts.incrementToken()){\n        Token token = new Token();\n        token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        token.setType(typeAtt.type());\n        token.setFlags(flagsAtt.getFlags());\n        token.setPayload(payloadAtt.getPayload());\n        token.setPositionIncrement(posIncAtt.getPositionIncrement());\n        result.add(token);\n      }\n      ts.end();\n      return result;\n    }\n  }\n\n","sourceOld":"  private Collection<Token> getTokens(String q, Analyzer analyzer) throws IOException {\n    Collection<Token> result = new ArrayList<>();\n    assert analyzer != null;\n    try (TokenStream ts = analyzer.tokenStream(\"\", q)) {\n      ts.reset();\n      // TODO: support custom attributes\n      CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      TypeAttribute typeAtt = ts.addAttribute(TypeAttribute.class);\n      FlagsAttribute flagsAtt = ts.addAttribute(FlagsAttribute.class);\n      PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n      PositionIncrementAttribute posIncAtt = ts.addAttribute(PositionIncrementAttribute.class);\n      \n      while (ts.incrementToken()){\n        Token token = new Token();\n        token.copyBuffer(termAtt.buffer(), 0, termAtt.length());\n        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());\n        token.setType(typeAtt.type());\n        token.setFlags(flagsAtt.getFlags());\n        token.setPayload(payloadAtt.getPayload());\n        token.setPositionIncrement(posIncAtt.getPositionIncrement());\n        result.add(token);\n      }\n      ts.end();\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"6133e5d5a3f75167f8c5580d5c45c55876f15075":["c26f00b574427b55127e869b935845554afde1fa"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["69e043c521d4e8db770cc140c63f5ef51f03426a","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"77d924c3b8deab5881ed0d996d597a4ea5bbc40a":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"6133e5d5a3f75167f8c5580d5c45c55876f15075":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"77d924c3b8deab5881ed0d996d597a4ea5bbc40a":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}