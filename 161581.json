{"path":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testToString().mjava","commits":[{"id":"c76cf50e9120d497075f7635c7a7d828f33c9750","date":1450187451,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testToString().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testToString() {\n    for (Method m : SolrReturnFields.class.getMethods()) {\n      if (m.getName().equals(\"toString\")) {\n        assertTrue(m + \" is not overridden ! \", m.getDeclaringClass() == SolrReturnFields.class);\n        break;\n      }\n    }\n\n    final ReturnFields rf1 = new SolrReturnFields();\n    final String rf1ToString = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[]\"\n        +\",okFieldNames=[]\"\n        +\",reqFieldNames=null\"\n        +\",transformer=null,wantsScore=false,wantsAllFields=true)\";\n    assertEquals(rf1ToString, rf1.toString());\n\n    final ReturnFields rf2 = new SolrReturnFields(\n        req(\"fl\", \"id \"+SolrReturnFields.SCORE+\" test\"));\n    final String rf2ToString = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[score, test, id]\"\n        +\",okFieldNames=[null, score, test, id]\"\n        +\",reqFieldNames=[id, score, test]\"\n        +\",transformer=score,wantsScore=true,wantsAllFields=false)\";\n    assertEquals(rf2ToString, rf2.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aba6b017d5e327cec5c557bce771a348b27d980","date":1450213938,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testToString().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testToString().mjava","sourceNew":"  @Test\n  public void testToString() {\n    for (Method m : SolrReturnFields.class.getMethods()) {\n      if (m.getName().equals(\"toString\")) {\n        assertTrue(m + \" is not overridden ! \", m.getDeclaringClass() == SolrReturnFields.class);\n        break;\n      }\n    }\n\n    final ReturnFields rf1 = new SolrReturnFields();\n    final String rf1ToString = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[]\"\n        +\",okFieldNames=[]\"\n        +\",reqFieldNames=null\"\n        +\",transformer=null,wantsScore=false,wantsAllFields=true)\";\n    assertEquals(rf1ToString, rf1.toString());\n\n    final ReturnFields rf2 = new SolrReturnFields(\n        req(\"fl\", SolrReturnFields.SCORE));\n    final String rf2ToStringA = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[\"+SolrReturnFields.SCORE+\"]\"\n        +\",okFieldNames=[null, \"+SolrReturnFields.SCORE+\"]\"\n        +\",reqFieldNames=[\"+SolrReturnFields.SCORE+\"]\"\n        +\",transformer=score,wantsScore=true,wantsAllFields=false)\";\n    final String rf2ToStringB = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[\"+SolrReturnFields.SCORE+\"]\"\n        +\",okFieldNames=[\"+SolrReturnFields.SCORE+\", null]\"\n        +\",reqFieldNames=[\"+SolrReturnFields.SCORE+\"]\"\n        +\",transformer=score,wantsScore=true,wantsAllFields=false)\";\n    assertTrue(\n        rf2ToStringA.equals(rf2.toString()) ||\n        rf2ToStringB.equals(rf2.toString()));\n  }\n\n","sourceOld":"  @Test\n  public void testToString() {\n    for (Method m : SolrReturnFields.class.getMethods()) {\n      if (m.getName().equals(\"toString\")) {\n        assertTrue(m + \" is not overridden ! \", m.getDeclaringClass() == SolrReturnFields.class);\n        break;\n      }\n    }\n\n    final ReturnFields rf1 = new SolrReturnFields();\n    final String rf1ToString = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[]\"\n        +\",okFieldNames=[]\"\n        +\",reqFieldNames=null\"\n        +\",transformer=null,wantsScore=false,wantsAllFields=true)\";\n    assertEquals(rf1ToString, rf1.toString());\n\n    final ReturnFields rf2 = new SolrReturnFields(\n        req(\"fl\", \"id \"+SolrReturnFields.SCORE+\" test\"));\n    final String rf2ToString = \"SolrReturnFields=(globs=[]\"\n        +\",fields=[score, test, id]\"\n        +\",okFieldNames=[null, score, test, id]\"\n        +\",reqFieldNames=[id, score, test]\"\n        +\",transformer=score,wantsScore=true,wantsAllFields=false)\";\n    assertEquals(rf2ToString, rf2.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c76cf50e9120d497075f7635c7a7d828f33c9750":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aba6b017d5e327cec5c557bce771a348b27d980":["c76cf50e9120d497075f7635c7a7d828f33c9750"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2aba6b017d5e327cec5c557bce771a348b27d980"]},"commit2Childs":{"c76cf50e9120d497075f7635c7a7d828f33c9750":["2aba6b017d5e327cec5c557bce771a348b27d980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c76cf50e9120d497075f7635c7a7d828f33c9750"],"2aba6b017d5e327cec5c557bce771a348b27d980":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}