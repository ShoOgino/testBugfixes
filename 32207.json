{"path":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    IndexableField[] f = new IndexableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<StorableField>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<StorableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f.add(createField(field.getName(), storedVal, StoredField.TYPE, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f.add(createField(field.getName(), storedVal, StoredField.TYPE, 1f));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      FieldType customType = new FieldType();\n      customType.setStored(true);\n      f.add(createField(field.getName(), storedVal, customType, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i]));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f.add(createField(field.getName(), storedVal, StoredField.TYPE));\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = parseCommaSeparatedList(externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    List<IndexableField> f = new ArrayList<>(dimension+1);\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        SchemaField sf = subField(field, i, schema);\n        f.add(sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f));\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f.add(createField(field.getName(), storedVal, StoredField.TYPE, 1f));\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c26f00b574427b55127e869b935845554afde1fa"],"409324b31a1419d7c05a38211168cf317e39be77":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["e47768b261c28e7e6032060e8331475c81057953","3a3635dad24b0681f0088f2ef680456482cdb451"],"3a3635dad24b0681f0088f2ef680456482cdb451":["e47768b261c28e7e6032060e8331475c81057953"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"08970e5b8411182a29412c177eff67ec1110095b":["73bb5a57dc75b54a39494f99986599cae7dff417"],"1d028314cced5858683a1bb4741423d0f934257b":["3a3635dad24b0681f0088f2ef680456482cdb451","409324b31a1419d7c05a38211168cf317e39be77"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e47768b261c28e7e6032060e8331475c81057953","3a3635dad24b0681f0088f2ef680456482cdb451"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"e47768b261c28e7e6032060e8331475c81057953":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3a3635dad24b0681f0088f2ef680456482cdb451":["8fd5be977c105554c6a7b68afcdbc511439723ab","1d028314cced5858683a1bb4741423d0f934257b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["409324b31a1419d7c05a38211168cf317e39be77"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"e47768b261c28e7e6032060e8331475c81057953":["8fd5be977c105554c6a7b68afcdbc511439723ab","3a3635dad24b0681f0088f2ef680456482cdb451","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"73bb5a57dc75b54a39494f99986599cae7dff417":["08970e5b8411182a29412c177eff67ec1110095b","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}