{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","commits":[{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates]).mjava","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72332a99ce230f8edf8404d6043ac18a0e26dfeb","date":1542806419,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    ArrayList<FrozenBufferedUpdates> pendingPackets = new ArrayList<>();\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      if (packet.tryApply(writer) == false) {\n        // if somebody else is currently applying it - move on to the next one and force apply below\n        pendingPackets.add(packet);\n      }\n      totalDelCount += packet.totalDelCount;\n    }\n    for (FrozenBufferedUpdates packet : pendingPackets) {\n      // now block on all the packets that were concurrently applied to ensure they are due before we continue.\n      packet.forceApply(writer);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      packet.apply(writer);\n      totalDelCount += packet.totalDelCount;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f21f1920c232db2352489eed260fe5c1f39e5a0","date":1587748041,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApply(Set[FrozenBufferedUpdates],IndexWriter).mjava","sourceNew":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    ArrayList<FrozenBufferedUpdates> pendingPackets = new ArrayList<>();\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      if (writer.tryApply(packet) == false) {\n        // if somebody else is currently applying it - move on to the next one and force apply below\n        pendingPackets.add(packet);\n      }\n      totalDelCount += packet.totalDelCount;\n    }\n    for (FrozenBufferedUpdates packet : pendingPackets) {\n      // now block on all the packets that were concurrently applied to ensure they are due before we continue.\n      writer.forceApply(packet);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","sourceOld":"  private void waitApply(Set<FrozenBufferedUpdates> waitFor, IndexWriter writer) throws IOException {\n\n    long startNS = System.nanoTime();\n\n    int packetCount = waitFor.size();\n\n    if (waitFor.isEmpty()) {\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", \"waitApply: no deletes to apply\");\n      }\n      return;\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApply: \" + waitFor.size() + \" packets: \" + waitFor);\n    }\n\n    ArrayList<FrozenBufferedUpdates> pendingPackets = new ArrayList<>();\n    long totalDelCount = 0;\n    for (FrozenBufferedUpdates packet : waitFor) {\n      // Frozen packets are now resolved, concurrently, by the indexing threads that\n      // create them, by adding a DocumentsWriter.ResolveUpdatesEvent to the events queue,\n      // but if we get here and the packet is not yet resolved, we resolve it now ourselves:\n      if (packet.tryApply(writer) == false) {\n        // if somebody else is currently applying it - move on to the next one and force apply below\n        pendingPackets.add(packet);\n      }\n      totalDelCount += packet.totalDelCount;\n    }\n    for (FrozenBufferedUpdates packet : pendingPackets) {\n      // now block on all the packets that were concurrently applied to ensure they are due before we continue.\n      packet.forceApply(writer);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\",\n                         String.format(Locale.ROOT, \"waitApply: done %d packets; totalDelCount=%d; totBytesUsed=%d; took %.2f msec\",\n                                       packetCount,\n                                       totalDelCount,\n                                       bytesUsed.get(),\n                                       (System.nanoTime() - startNS) / 1000000.));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f21f1920c232db2352489eed260fe5c1f39e5a0"]},"commit2Childs":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["9f21f1920c232db2352489eed260fe5c1f39e5a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}