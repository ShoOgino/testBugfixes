{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicReader,String,Bits).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicReader,String,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicIndexReader,String,Bits).mjava","sourceNew":"  // null Bits means no docs matched\n  void setDocsWithField(AtomicReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","sourceOld":"  // null Bits means no docs matched\n  void setDocsWithField(AtomicIndexReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicReader,String,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(IndexReader,String,Bits).mjava","sourceNew":"  // null Bits means no docs matched\n  void setDocsWithField(AtomicReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","sourceOld":"  // null Bits means no docs matched\n  void setDocsWithField(IndexReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicReader,String,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#setDocsWithField(AtomicReader,String,Bits).mjava","sourceNew":"  // null Bits means no docs matched\n  void setDocsWithField(AtomicReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","sourceOld":"  // null Bits means no docs matched\n  void setDocsWithField(AtomicReader reader, String field, Bits docsWithField) {\n    final int maxDoc = reader.maxDoc();\n    final Bits bits;\n    if (docsWithField == null) {\n      bits = new Bits.MatchNoBits(maxDoc);\n    } else if (docsWithField instanceof FixedBitSet) {\n      final int numSet = ((FixedBitSet) docsWithField).cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        bits = new Bits.MatchAllBits(maxDoc);\n      } else {\n        bits = docsWithField;\n      }\n    } else {\n      bits = docsWithField;\n    }\n    caches.get(DocsWithFieldCache.class).put(reader, new Entry(field, null), bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}