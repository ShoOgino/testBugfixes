{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#setMaxChunkSize(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#setMaxChunkSize(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory#setMaxChunkSize(int).mjava","sourceNew":"  /**\n   * Sets the maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped.\n   * Using a lower chunk size makes the directory implementation a little\n   * bit slower (as the correct chunk may be resolved on lots of seeks)\n   * but the chance is higher that mmap does not fail. On 64 bit\n   * Java platforms, this parameter should always be {@code 1 << 30},\n   * as the address space is big enough.\n   * <b>Please note:</b> This method always rounds down the chunk size\n   * to a power of 2.\n   */\n  public final void setMaxChunkSize(final int maxChunkSize) {\n    if (maxChunkSize <= 0)\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    //System.out.println(\"Requested chunk size: \"+maxChunkSize);\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n    //System.out.println(\"Got chunk size: \"+getMaxChunkSize());\n  }\n\n","sourceOld":"  /**\n   * Sets the maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped.\n   * Using a lower chunk size makes the directory implementation a little\n   * bit slower (as the correct chunk may be resolved on lots of seeks)\n   * but the chance is higher that mmap does not fail. On 64 bit\n   * Java platforms, this parameter should always be {@code 1 << 30},\n   * as the address space is big enough.\n   * <b>Please note:</b> This method always rounds down the chunk size\n   * to a power of 2.\n   */\n  public final void setMaxChunkSize(final int maxChunkSize) {\n    if (maxChunkSize <= 0)\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    //System.out.println(\"Requested chunk size: \"+maxChunkSize);\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n    //System.out.println(\"Got chunk size: \"+getMaxChunkSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#setMaxChunkSize(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped.\n   * Using a lower chunk size makes the directory implementation a little\n   * bit slower (as the correct chunk may be resolved on lots of seeks)\n   * but the chance is higher that mmap does not fail. On 64 bit\n   * Java platforms, this parameter should always be {@code 1 << 30},\n   * as the address space is big enough.\n   * <b>Please note:</b> This method always rounds down the chunk size\n   * to a power of 2.\n   */\n  public final void setMaxChunkSize(final int maxChunkSize) {\n    if (maxChunkSize <= 0)\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    //System.out.println(\"Requested chunk size: \"+maxChunkSize);\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n    //System.out.println(\"Got chunk size: \"+getMaxChunkSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}