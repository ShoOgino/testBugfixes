{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":0,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doDistribDeleteByQuery(DeleteUpdateCommand cmd, List<SolrCmdDistributor.Node> replicas,\n                                        DocCollection coll) throws IOException {\n\n    boolean isReplayOrPeersync = (cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;\n    boolean leaderLogic = isLeader && !isReplayOrPeersync;\n\n    // forward to all replicas\n    ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n    params.set(CommonParams.VERSION_FIELD, Long.toString(cmd.getVersion()));\n    params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n    params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n        zkController.getBaseUrl(), req.getCore().getName()));\n\n    boolean someReplicas = false;\n    boolean subShardLeader = false;\n    try {\n      subShardLeader = amISubShardLeader(coll, null, null, null);\n      if (subShardLeader) {\n        String myShardId = cloudDesc.getShardId();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, myShardId);\n        // DBQ forwarded to NRT and TLOG replicas\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, myShardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        if (replicaProps != null) {\n          final List<SolrCmdDistributor.Node> myReplicas = new ArrayList<>(replicaProps.size());\n          for (ZkCoreNodeProps replicaProp : replicaProps) {\n            myReplicas.add(new SolrCmdDistributor.StdNode(replicaProp, collection, myShardId));\n          }\n          cmdDistrib.distribDelete(cmd, myReplicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n          someReplicas = true;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    if (leaderLogic) {\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), null, null);\n      if (subShardLeaders != null) {\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, null, null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {\n        params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      if (replicas != null) {\n        cmdDistrib.distribDelete(cmd, replicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n        someReplicas = true;\n      }\n    }\n\n    if (someReplicas) {\n      cmdDistrib.blockAndDoRetries();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","sourceNew":"  @Override\n  protected void doDistribDeleteByQuery(DeleteUpdateCommand cmd, List<SolrCmdDistributor.Node> replicas,\n                                        DocCollection coll) throws IOException {\n\n    boolean isReplayOrPeersync = (cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;\n    boolean leaderLogic = isLeader && !isReplayOrPeersync;\n\n    // forward to all replicas\n    ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n    params.set(CommonParams.VERSION_FIELD, Long.toString(cmd.getVersion()));\n    params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n    params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n        zkController.getBaseUrl(), req.getCore().getName()));\n\n    boolean someReplicas = false;\n    boolean subShardLeader = false;\n    try {\n      subShardLeader = amISubShardLeader(coll, null, null, null);\n      if (subShardLeader) {\n        String myShardId = cloudDesc.getShardId();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, myShardId);\n        // DBQ forwarded to NRT and TLOG replicas\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, myShardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        if (replicaProps != null) {\n          final List<SolrCmdDistributor.Node> myReplicas = new ArrayList<>(replicaProps.size());\n          for (ZkCoreNodeProps replicaProp : replicaProps) {\n            myReplicas.add(new SolrCmdDistributor.StdNode(replicaProp, collection, myShardId));\n          }\n          cmdDistrib.distribDelete(cmd, myReplicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n          someReplicas = true;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    if (leaderLogic) {\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), null, null);\n      if (subShardLeaders != null) {\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, null, null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {\n        params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      if (replicas != null) {\n        cmdDistrib.distribDelete(cmd, replicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n        someReplicas = true;\n      }\n    }\n\n    if (someReplicas) {\n      cmdDistrib.blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDistribDeleteByQuery(DeleteUpdateCommand cmd, List<SolrCmdDistributor.Node> replicas,\n                                        DocCollection coll) throws IOException {\n\n    boolean isReplayOrPeersync = (cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;\n    boolean leaderLogic = isLeader && !isReplayOrPeersync;\n\n    // forward to all replicas\n    ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n    params.set(CommonParams.VERSION_FIELD, Long.toString(cmd.getVersion()));\n    params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n    params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n        zkController.getBaseUrl(), req.getCore().getName()));\n\n    boolean someReplicas = false;\n    boolean subShardLeader = false;\n    try {\n      subShardLeader = amISubShardLeader(coll, null, null, null);\n      if (subShardLeader) {\n        String myShardId = cloudDesc.getShardId();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, myShardId);\n        // DBQ forwarded to NRT and TLOG replicas\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, myShardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        if (replicaProps != null) {\n          final List<SolrCmdDistributor.Node> myReplicas = new ArrayList<>(replicaProps.size());\n          for (ZkCoreNodeProps replicaProp : replicaProps) {\n            myReplicas.add(new SolrCmdDistributor.StdNode(replicaProp, collection, myShardId));\n          }\n          cmdDistrib.distribDelete(cmd, myReplicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n          someReplicas = true;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    if (leaderLogic) {\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), null, null);\n      if (subShardLeaders != null) {\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, null, null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {\n        params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      if (replicas != null) {\n        cmdDistrib.distribDelete(cmd, replicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n        someReplicas = true;\n      }\n    }\n\n    if (someReplicas) {\n      cmdDistrib.blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#doDistribDeleteByQuery(DeleteUpdateCommand,List[SolrCmdDistributor.Node],DocCollection).mjava","sourceNew":"  @Override\n  protected void doDistribDeleteByQuery(DeleteUpdateCommand cmd, List<SolrCmdDistributor.Node> replicas,\n                                        DocCollection coll) throws IOException {\n\n    boolean isReplayOrPeersync = (cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;\n    boolean leaderLogic = isLeader && !isReplayOrPeersync;\n\n    // forward to all replicas\n    ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n    params.set(CommonParams.VERSION_FIELD, Long.toString(cmd.getVersion()));\n    params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n    params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n        zkController.getBaseUrl(), req.getCore().getName()));\n\n    boolean someReplicas = false;\n    boolean subShardLeader = false;\n    try {\n      subShardLeader = amISubShardLeader(coll, null, null, null);\n      if (subShardLeader) {\n        String myShardId = cloudDesc.getShardId();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, myShardId);\n        // DBQ forwarded to NRT and TLOG replicas\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, myShardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        if (replicaProps != null) {\n          final List<SolrCmdDistributor.Node> myReplicas = new ArrayList<>(replicaProps.size());\n          for (ZkCoreNodeProps replicaProp : replicaProps) {\n            myReplicas.add(new SolrCmdDistributor.StdNode(replicaProp, collection, myShardId));\n          }\n          cmdDistrib.distribDelete(cmd, myReplicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n          someReplicas = true;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    if (leaderLogic) {\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), null, null);\n      if (subShardLeaders != null) {\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(clusterState, coll, null, null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {\n        params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      if (replicas != null) {\n        cmdDistrib.distribDelete(cmd, replicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n        someReplicas = true;\n      }\n    }\n\n    if (someReplicas) {\n      cmdDistrib.blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDistribDeleteByQuery(DeleteUpdateCommand cmd, List<SolrCmdDistributor.Node> replicas,\n                                        DocCollection coll) throws IOException {\n\n    boolean isReplayOrPeersync = (cmd.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;\n    boolean leaderLogic = isLeader && !isReplayOrPeersync;\n\n    // forward to all replicas\n    ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n    params.set(CommonParams.VERSION_FIELD, Long.toString(cmd.getVersion()));\n    params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n    params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n        zkController.getBaseUrl(), req.getCore().getName()));\n\n    boolean someReplicas = false;\n    boolean subShardLeader = false;\n    try {\n      subShardLeader = amISubShardLeader(coll, null, null, null);\n      if (subShardLeader) {\n        String myShardId = cloudDesc.getShardId();\n        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(\n            collection, myShardId);\n        // DBQ forwarded to NRT and TLOG replicas\n        List<ZkCoreNodeProps> replicaProps = zkController.getZkStateReader()\n            .getReplicaProps(collection, myShardId, leaderReplica.getName(), null, Replica.State.DOWN, EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));\n        if (replicaProps != null) {\n          final List<SolrCmdDistributor.Node> myReplicas = new ArrayList<>(replicaProps.size());\n          for (ZkCoreNodeProps replicaProp : replicaProps) {\n            myReplicas.add(new SolrCmdDistributor.StdNode(replicaProp, collection, myShardId));\n          }\n          cmdDistrib.distribDelete(cmd, myReplicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n          someReplicas = true;\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n    if (leaderLogic) {\n      List<SolrCmdDistributor.Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), null, null);\n      if (subShardLeaders != null) {\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      final List<SolrCmdDistributor.Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, null, null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty()) {\n        params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      }\n      if (replicas != null) {\n        cmdDistrib.distribDelete(cmd, replicas, params, false, rollupReplicationTracker, leaderReplicationTracker);\n        someReplicas = true;\n      }\n    }\n\n    if (someReplicas) {\n      cmdDistrib.blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}