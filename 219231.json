{"path":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b31c82c6df2339d0c31b592f919be77383dac10","date":1369815843,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean,FacetSearchParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/BaseSampleTestTopK#createSampler(int,boolean).mjava","sourceNew":"  private Sampler createSampler(int nTrial, boolean useRandomSampler, FacetSearchParams sParams) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    /*\n     * Set sampling to Exact fixing with TakmiSampleFixer as it is not easy to\n     * validate results with amortized results. \n     */\n    samplingParams.setSampleFixer(new TakmiSampleFixer(indexReader, taxoReader, sParams));\n        \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setOversampleFactor(5.0 * retryFactor); // Oversampling \n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","sourceOld":"  private Sampler createSampler(int nTrial, boolean useRandomSampler) {\n    SamplingParams samplingParams = new SamplingParams();\n    \n    final double retryFactor = Math.pow(1.01, nTrial);\n    samplingParams.setSampleRatio(0.8 * retryFactor);\n    samplingParams.setMinSampleSize((int) (100 * retryFactor));\n    samplingParams.setMaxSampleSize((int) (10000 * retryFactor));\n    samplingParams.setOversampleFactor(5.0 * retryFactor);\n    samplingParams.setSamplingThreshold(11000); //force sampling\n\n    Sampler sampler = useRandomSampler ? \n        new RandomSampler(samplingParams, new Random(random().nextLong())) :\n          new RepeatableSampler(samplingParams);\n    return sampler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b31c82c6df2339d0c31b592f919be77383dac10":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b31c82c6df2339d0c31b592f919be77383dac10"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["4b31c82c6df2339d0c31b592f919be77383dac10"],"4b31c82c6df2339d0c31b592f919be77383dac10":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}