{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","commits":[{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareDocToValue(int,Float).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Float valueObj) {\n      final float value = valueObj.floatValue();\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(docValue, value);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareDocToValue(int,Float).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareDocToValue(int doc, Float valueObj) {\n      final float value = valueObj.floatValue();\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(docValue, value);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = currentReaderValues.get(doc);\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n      return Float.compare(topValue, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n      return Float.compare(topValue, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":"    @Override\n    public int compareTop(int doc) throws IOException {\n      return Float.compare(topValue, getValueForDoc(doc));\n    }\n\n","sourceOld":"    @Override\n    public int compareTop(int doc) {\n      float docValue = Float.intBitsToFloat((int)currentReaderValues.get(doc));\n      // Test for docValue == 0 to save Bits.get method call for\n      // the common case (doc has value and value is non-zero):\n      if (docsWithField != null && docValue == 0 && !docsWithField.get(doc)) {\n        docValue = missingValue;\n      }\n      return Float.compare(topValue, docValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.FloatComparator#compareTop(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareTop(int doc) throws IOException {\n      return Float.compare(topValue, getValueForDoc(doc));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7615b855702e008d91a95a2578bf05d27372f599"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["27ab7b234eab0cbc020836989b96ed430e1065bb","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["93dd449115a9247533e44bab47e8429e5dccbc6d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"7615b855702e008d91a95a2578bf05d27372f599":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"56572ec06f1407c066d6b7399413178b33176cd8":["27ab7b234eab0cbc020836989b96ed430e1065bb","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}