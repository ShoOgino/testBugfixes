{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","commits":[{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25ac2f9979f7ec55452db533f9abf5c603cb1996"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      ScoreAndDoc scorer = new ScoreAndDoc();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      FakeScorer scorer = new FakeScorer();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25ac2f9979f7ec55452db533f9abf5c603cb1996","date":1550225366,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      ScoreAndDoc scorer = new ScoreAndDoc();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          // ValueSource will return values even if exists() is false, generally a default\n          // of some kind.  To preserve this behaviour with the iterator, we need to always\n          // return 'true' here.\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      ScoreAndDoc scorer = new ScoreAndDoc();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          return fv.exists(doc);\n        }\n      };\n    }\n\n","bugFix":["41ea72350b903b90cb4fda2a5adbce31aa00c074"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.WrappedDoubleValuesSource#getValues(LeafReaderContext,DoubleValues).mjava","sourceNew":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map<Object, Object> context = new HashMap<>();\n      ScoreAndDoc scorer = new ScoreAndDoc();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          // ValueSource will return values even if exists() is false, generally a default\n          // of some kind.  To preserve this behaviour with the iterator, we need to always\n          // return 'true' here.\n          return true;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n      Map context = new HashMap<>();\n      ScoreAndDoc scorer = new ScoreAndDoc();\n      context.put(\"scorer\", scorer);\n      context.put(\"searcher\", searcher);\n      FunctionValues fv = in.getValues(context, ctx);\n      return new DoubleValues() {\n\n        @Override\n        public double doubleValue() throws IOException {\n          return fv.doubleVal(scorer.current);\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          scorer.current = doc;\n          if (scores != null && scores.advanceExact(doc)) {\n            scorer.score = (float) scores.doubleValue();\n          }\n          else\n            scorer.score = 0;\n          // ValueSource will return values even if exists() is false, generally a default\n          // of some kind.  To preserve this behaviour with the iterator, we need to always\n          // return 'true' here.\n          return true;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["a38488a55cc52553c9792da5044dd31b15128cd8"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["25ac2f9979f7ec55452db533f9abf5c603cb1996"],"a38488a55cc52553c9792da5044dd31b15128cd8":["28288370235ed02234a64753cdbf0c6ec096304a"],"25ac2f9979f7ec55452db533f9abf5c603cb1996":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41ea72350b903b90cb4fda2a5adbce31aa00c074","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["25ac2f9979f7ec55452db533f9abf5c603cb1996"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a38488a55cc52553c9792da5044dd31b15128cd8":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"25ac2f9979f7ec55452db533f9abf5c603cb1996":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a38488a55cc52553c9792da5044dd31b15128cd8"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}