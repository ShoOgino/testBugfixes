{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    if (needsOffsets) {\n      // TODO: once we index offsets into postings fix this!\n      return null;\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    if (needsOffsets && !hasOffsets) {\n      return null; // not available\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    if (needsOffsets) {\n      // TODO: once we index offsets into postings fix this!\n      return null;\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    if (needsOffsets && !hasOffsets) {\n      return null; // not available\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    if (needsOffsets) {\n      // TODO: once we index offsets into postings fix this!\n      return null;\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    if (needsOffsets && !hasOffsets) {\n      return null; // not available\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    if (needsOffsets) {\n      // TODO: once we index offsets into postings fix this!\n      return null;\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    if (needsOffsets && !hasOffsets) {\n      return null; // not available\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, boolean needsOffsets)\n    throws IOException {\n\n    boolean hasOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    if (needsOffsets && !hasOffsets) {\n      return null; // not available\n    }\n\n    // TODO: refactor\n    if (fieldInfo.storePayloads || hasOffsets) {\n      SegmentFullPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentFullPositionsEnum)) {\n        docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentFullPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentFullPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["31f025ae60076ae95274433f3fe8e6ace2857a87","a44b232879361a7ace3520b5b313094a9a35e044"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["31f025ae60076ae95274433f3fe8e6ace2857a87","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}