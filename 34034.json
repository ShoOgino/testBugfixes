{"path":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   */\n  public void doInit(SolrQueryRequest solrRequest, SolrQueryResponse solrResponse) {\n    try {\n      this.solrRequest = solrRequest;\n      this.solrResponse = solrResponse;\n      solrCore = solrRequest.getCore();\n      schema = solrRequest.getSchema();\n      String responseWriterName = solrRequest.getParams().get(CommonParams.WT, JSON);\n      responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n      contentType = responseWriter.getContentType(solrRequest, solrResponse);\n      final String path = solrRequest.getPath();\n      if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n        // don't set webapp property on the request when context and core/collection are excluded\n        final int cutoffPoint = path.indexOf(\"/\", 1);\n        final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n        solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n      }\n\n      // client application can set a timeout for update requests\n      String updateTimeoutSecsParam = solrRequest.getParams().get(UPDATE_TIMEOUT_SECS);\n      if (updateTimeoutSecsParam != null)\n        updateTimeoutSecs = Integer.parseInt(updateTimeoutSecsParam);\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}