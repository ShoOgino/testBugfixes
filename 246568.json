{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/AsciiMatchRangeHighlighter#apply(Document,Map[String,List[OffsetRange]]).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/AsciiMatchRangeHighlighter#apply(Document,Map[String,List[OffsetRange]]).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, List<String>> apply(Document document, Map<String, List<OffsetRange>> fieldHighlights) {\n    ArrayList<OffsetRange> valueRanges = new ArrayList<>();\n    Map<String, List<String>> fieldSnippets = new LinkedHashMap<>();\n\n    fieldHighlights.forEach(\n        (field, matchRanges) -> {\n          int offsetGap = analyzer.getOffsetGap(field);\n\n          String[] values = document.getValues(field);\n          String value;\n          if (values.length == 1) {\n            value = values[0];\n          } else {\n            // This can be inefficient if offset gap is large but recomputing\n            // offsets in a smart way doesn't make sense for tests.\n            String fieldGapPadding = \" \".repeat(offsetGap);\n            value = String.join(fieldGapPadding, values);\n          }\n\n          // Create permitted range windows for passages so that they don't cross\n          // multi-value boundary.\n          valueRanges.clear();\n          int offset = 0;\n          for (CharSequence v : values) {\n            valueRanges.add(new OffsetRange(offset, offset + v.length()));\n            offset += v.length();\n            offset += offsetGap;\n          }\n\n          List<Passage> passages =\n              selector.pickBest(value, matchRanges, maxPassageWindow, maxPassages, valueRanges);\n\n          fieldSnippets.put(field, passageFormatter.format(value, passages, valueRanges));\n        });\n\n    return fieldSnippets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}