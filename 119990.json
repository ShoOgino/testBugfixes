{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (!p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["065a346f4fa5753b5f30aa6604c804696389d793"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (!p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065a346f4fa5753b5f30aa6604c804696389d793","date":1348531407,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (!p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":["c2635332d49f7c5a0b484950462a01775512628e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n      final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n      final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n      if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Cannot parse range query \" + part1 + \" to \" + part2 +\n                          \": range queries only supported when upper and lower bound have same currency.\");\n      }\n\n      return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["065a346f4fa5753b5f30aa6604c804696389d793","f107636c2cc82350a2607d774c092da5b73152e5"],"065a346f4fa5753b5f30aa6604c804696389d793":["c2635332d49f7c5a0b484950462a01775512628e"],"28288370235ed02234a64753cdbf0c6ec096304a":["065a346f4fa5753b5f30aa6604c804696389d793","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["065a346f4fa5753b5f30aa6604c804696389d793"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","065a346f4fa5753b5f30aa6604c804696389d793"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"065a346f4fa5753b5f30aa6604c804696389d793":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}