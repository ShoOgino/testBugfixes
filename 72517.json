{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#Lucene40PostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput freqIn = null;\n    IndexInput proxIn = null;\n    try {\n      freqIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION),\n                           ioContext);\n      CodecUtil.checkHeader(freqIn, FRQ_CODEC, VERSION_START, VERSION_CURRENT);\n      // TODO: hasProx should (somehow!) become codec private,\n      // but it's tricky because 1) FIS.hasProx is global (it\n      // could be all fields that have prox are written by a\n      // different codec), 2) the field may have had prox in\n      // the past but all docs w/ that field were deleted.\n      // Really we'd need to init prxOut lazily on write, and\n      // then somewhere record that we actually wrote it so we\n      // know whether to open on read:\n      if (fieldInfos.hasProx()) {\n        proxIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION),\n                             ioContext);\n        CodecUtil.checkHeader(proxIn, PRX_CODEC, VERSION_START, VERSION_CURRENT);\n      } else {\n        proxIn = null;\n      }\n      this.freqIn = freqIn;\n      this.proxIn = proxIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqIn, proxIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}