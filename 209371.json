{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseFloatRoundTrip().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseFloatRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseFloatRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"float1_f\")); // should match dynamic field \"*_f\"\n    assertNotNull(schema.getFieldOrNull(\"float2_f\")); // should match dynamic field \"*_f\"\n    float value = 10898.83491f;\n    String floatString1 = \"10898.83491\";\n    String floatString2 = \"10,898.83491\";\n    SolrInputDocument d = processAdd(\"parse-float\",\n        doc(f(\"id\", \"128\"), f(\"float1_f\", floatString1), f(\"float2_f\", floatString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"float1_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float1_f\"), EPSILON);\n    assertTrue(d.getFieldValue(\"float2_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float2_f\"), EPSILON);\n\n    assertU(commit());\n    assertQ(req(\"id:128\")\n        ,\"//float[@name='float1_f'][.='\" + value + \"']\"\n        ,\"//float[@name='float2_f'][.='\" + value + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseFloatRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseFloatRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"float1_f\")); // should match dynamic field \"*_f\"\n    assertNotNull(schema.getFieldOrNull(\"float2_f\")); // should match dynamic field \"*_f\"\n    float value = 10898.83491f;\n    String floatString1 = \"10898.83491\";\n    String floatString2 = \"10,898.83491\";\n    SolrInputDocument d = processAdd(\"parse-float\",\n        doc(f(\"id\", \"128\"), f(\"float1_f\", floatString1), f(\"float2_f\", floatString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"float1_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float1_f\"), EPSILON);\n    assertTrue(d.getFieldValue(\"float2_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float2_f\"), EPSILON);\n\n    assertU(commit());\n    assertQ(req(\"id:128\")\n        ,\"//float[@name='float1_f'][.='\" + value + \"']\"\n        ,\"//float[@name='float2_f'][.='\" + value + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseFloatRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseFloatRoundTrip().mjava","sourceNew":"  public void testParseFloatRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"float1_f\")); // should match dynamic field \"*_f\"\n    assertNotNull(schema.getFieldOrNull(\"float2_f\")); // should match dynamic field \"*_f\"\n    float value = 10898.83491f;\n    String floatString1 = \"10898.83491\";\n    String floatString2 = \"10,898.83491\";\n    SolrInputDocument d = processAdd(\"parse-float\",\n        doc(f(\"id\", \"128\"), f(\"float1_f\", floatString1), f(\"float2_f\", floatString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"float1_f\"), IS_FLOAT);\n    assertEquals(value, (Float)d.getFieldValue(\"float1_f\"), EPSILON);\n    assertThat(d.getFieldValue(\"float2_f\"), IS_FLOAT);\n    assertEquals(value, (Float)d.getFieldValue(\"float2_f\"), EPSILON);\n\n    assertU(commit());\n    assertQ(req(\"id:128\")\n        ,\"//float[@name='float1_f'][.='\" + value + \"']\"\n        ,\"//float[@name='float2_f'][.='\" + value + \"']\");\n  }\n\n","sourceOld":"  public void testParseFloatRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"float1_f\")); // should match dynamic field \"*_f\"\n    assertNotNull(schema.getFieldOrNull(\"float2_f\")); // should match dynamic field \"*_f\"\n    float value = 10898.83491f;\n    String floatString1 = \"10898.83491\";\n    String floatString2 = \"10,898.83491\";\n    SolrInputDocument d = processAdd(\"parse-float\",\n        doc(f(\"id\", \"128\"), f(\"float1_f\", floatString1), f(\"float2_f\", floatString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"float1_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float1_f\"), EPSILON);\n    assertTrue(d.getFieldValue(\"float2_f\") instanceof Float);\n    assertEquals(value, (Float)d.getFieldValue(\"float2_f\"), EPSILON);\n\n    assertU(commit());\n    assertQ(req(\"id:128\")\n        ,\"//float[@name='float1_f'][.='\" + value + \"']\"\n        ,\"//float[@name='float2_f'][.='\" + value + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}