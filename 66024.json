{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","pathOld":"/dev/null","sourceNew":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : \" + url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8));\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","pathOld":"/dev/null","sourceNew":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : \" + url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8));\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","sourceNew":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        if (log.isErrorEnabled()) {\n          log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n        }\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : \" + url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8));\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","sourceNew":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","sourceOld":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        if (log.isErrorEnabled()) {\n          log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n        }\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#[T]_executeGET(HttpClient,String,InputStreamConsumer[T]).mjava","sourceNew":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    return executeHttpMethod(client, url, consumer, new HttpGet(url));\n  }\n\n","sourceOld":"  public static <T> T executeGET(HttpClient client, String url, InputStreamConsumer<T> consumer) throws SolrException {\n    T result = null;\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse rsp = null;\n    try {\n      rsp = client.execute(httpGet);\n    } catch (IOException e) {\n      log.error(\"Error in request to url : {}\", url, e);\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"error sending request\");\n    }\n    int statusCode = rsp.getStatusLine().getStatusCode();\n    if (statusCode != 200) {\n      try {\n        log.error(\"Failed a request to: {}, status: {}, body: {}\", url, rsp.getStatusLine(), EntityUtils.toString(rsp.getEntity(), StandardCharsets.UTF_8)); // logOk\n      } catch (IOException e) {\n        log.error(\"could not print error\", e);\n      }\n      throw new SolrException(SolrException.ErrorCode.getErrorCode(statusCode), \"Unknown error\");\n    }\n    HttpEntity entity = rsp.getEntity();\n    try {\n      InputStream is = entity.getContent();\n      if (consumer != null) {\n\n        result = consumer.accept(is);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.UNKNOWN, e);\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["8476949555f799dff381770c01cfad051a264487"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"8476949555f799dff381770c01cfad051a264487":["6dc613ed6f75d1988140301ee8de8fdb056fa337","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}