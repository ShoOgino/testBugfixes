{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","commits":[{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanNots() throws Throwable{\n     assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", \"s2\", 0, 0), 0);\n     assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", \"s2\", 10, 10), 0);\n     \n     //focus on behind\n     assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", \"s1\", 6, 0));\n     assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", \"s1\", 5, 0));\n     assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", \"s1\", 3, 0));\n     assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", \"s1\", 2, 0));\n     assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", \"s1\", 0, 0));\n     \n     //focus on both\n     assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", \"s1\", 3, 1));\n     assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", \"s1\", 2, 1));\n     assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", \"s1\", 1, 1));\n     assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", \"s1\", 10, 10));\n     \n     //focus on ahead\n     assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", \"s2\", 10, 10));  \n     assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", \"s2\", 0, 1));  \n     assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", \"s2\", 0, 2));  \n     assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", \"s2\", 0, 3));  \n     assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", \"s2\", 0, 4));\n     assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", \"s2\", 0, 8));\n     \n     //exclude doesn't exist\n     assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", \"s3\", 8, 8));\n\n     //include doesn't exist\n     assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", \"s1\", 8, 8));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanNots() throws Throwable{\n     assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", \"s2\", 0, 0), 0);\n     assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", \"s2\", 10, 10), 0);\n     \n     //focus on behind\n     assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", \"s1\", 6, 0));\n     assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", \"s1\", 5, 0));\n     assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", \"s1\", 3, 0));\n     assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", \"s1\", 2, 0));\n     assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", \"s1\", 0, 0));\n     \n     //focus on both\n     assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", \"s1\", 3, 1));\n     assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", \"s1\", 2, 1));\n     assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", \"s1\", 1, 1));\n     assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", \"s1\", 10, 10));\n     \n     //focus on ahead\n     assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", \"s2\", 10, 10));  \n     assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", \"s2\", 0, 1));  \n     assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", \"s2\", 0, 2));  \n     assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", \"s2\", 0, 3));  \n     assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", \"s2\", 0, 4));\n     assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", \"s2\", 0, 8));\n     \n     //exclude doesn't exist\n     assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", \"s3\", 8, 8));\n\n     //include doesn't exist\n     assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", \"s1\", 8, 8));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","sourceNew":"  public void testSpanNots() throws Throwable {\n\n    assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", 0, \"s2\", 0, 0), 0);\n    assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", 0, \"s2\", 10, 10), 0);\n\n    //focus on behind\n    assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", 0, \"s1\", 6, 0));\n    assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", 0, \"s1\", 5, 0));\n    assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", 0, \"s1\", 3, 0));\n    assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", 0, \"s1\", 2, 0));\n    assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", 0, \"s1\", 0, 0));\n\n    //focus on both\n    assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", 0, \"s1\", 3, 1));\n    assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", 0, \"s1\", 2, 1));\n    assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", 0, \"s1\", 1, 1));\n    assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", 0, \"s1\", 10, 10));\n\n    //focus on ahead\n    assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", 0, \"s2\", 10, 10));\n    assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", 0, \"s2\", 0, 1));\n    assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", 0, \"s2\", 0, 2));\n    assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", 0, \"s2\", 0, 3));\n    assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", 0, \"s2\", 0, 4));\n    assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", 0, \"s2\", 0, 8));\n\n    //exclude doesn't exist\n    assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", 0, \"s3\", 8, 8));\n\n    //include doesn't exist\n    assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", 0, \"s1\", 8, 8));\n\n    // Negative values\n    assertEquals(\"SpanNotS2S1NotXXNeg_0_0\", 1, spanCount(\"s2 s1\", 10, \"xx\", 0, 0));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_1\", 1, spanCount(\"s2 s1\", 10, \"xx\", -1, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_0_2\", 2, spanCount(\"s2 s1\", 10, \"xx\",  0, -2));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_2\", 2, spanCount(\"s2 s1\", 10, \"xx\", -1, -2));\n    assertEquals(\"SpanNotS2S1NotXXNeg_2_1\", 2, spanCount(\"s2 s1\", 10, \"xx\", -2, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_3_1\", 2, spanCount(\"s2 s1\", 10, \"xx\", -3, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_3\", 2, spanCount(\"s2 s1\", 10, \"xx\", -1, -3));\n    assertEquals(\"SpanNotS2S1NotXXNeg_2_2\", 3, spanCount(\"s2 s1\", 10, \"xx\", -2, -2));\n  }\n\n","sourceOld":"  public void testSpanNots() throws Throwable{\n     assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", \"s2\", 0, 0), 0);\n     assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", \"s2\", 10, 10), 0);\n     \n     //focus on behind\n     assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", \"s1\", 6, 0));\n     assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", \"s1\", 5, 0));\n     assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", \"s1\", 3, 0));\n     assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", \"s1\", 2, 0));\n     assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", \"s1\", 0, 0));\n     \n     //focus on both\n     assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", \"s1\", 3, 1));\n     assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", \"s1\", 2, 1));\n     assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", \"s1\", 1, 1));\n     assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", \"s1\", 10, 10));\n     \n     //focus on ahead\n     assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", \"s2\", 10, 10));  \n     assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", \"s2\", 0, 1));  \n     assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", \"s2\", 0, 2));  \n     assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", \"s2\", 0, 3));  \n     assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", \"s2\", 0, 4));\n     assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", \"s2\", 0, 8));\n     \n     //exclude doesn't exist\n     assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", \"s3\", 8, 8));\n\n     //include doesn't exist\n     assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", \"s1\", 8, 8));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNots().mjava","sourceNew":"  public void testSpanNots() throws Throwable {\n\n    assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", 0, \"s2\", 0, 0), 0);\n    assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", 0, \"s2\", 10, 10), 0);\n\n    //focus on behind\n    assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", 0, \"s1\", 6, 0));\n    assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", 0, \"s1\", 5, 0));\n    assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", 0, \"s1\", 3, 0));\n    assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", 0, \"s1\", 2, 0));\n    assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", 0, \"s1\", 0, 0));\n\n    //focus on both\n    assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", 0, \"s1\", 3, 1));\n    assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", 0, \"s1\", 2, 1));\n    assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", 0, \"s1\", 1, 1));\n    assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", 0, \"s1\", 10, 10));\n\n    //focus on ahead\n    assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", 0, \"s2\", 10, 10));\n    assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", 0, \"s2\", 0, 1));\n    assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", 0, \"s2\", 0, 2));\n    assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", 0, \"s2\", 0, 3));\n    assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", 0, \"s2\", 0, 4));\n    assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", 0, \"s2\", 0, 8));\n\n    //exclude doesn't exist\n    assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", 0, \"s3\", 8, 8));\n\n    //include doesn't exist\n    assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", 0, \"s1\", 8, 8));\n\n    // Negative values\n    assertEquals(\"SpanNotS2S1NotXXNeg_0_0\", 1, spanCount(\"s2 s1\", 10, \"xx\", 0, 0));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_1\", 1, spanCount(\"s2 s1\", 10, \"xx\", -1, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_0_2\", 2, spanCount(\"s2 s1\", 10, \"xx\",  0, -2));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_2\", 2, spanCount(\"s2 s1\", 10, \"xx\", -1, -2));\n    assertEquals(\"SpanNotS2S1NotXXNeg_2_1\", 2, spanCount(\"s2 s1\", 10, \"xx\", -2, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_3_1\", 2, spanCount(\"s2 s1\", 10, \"xx\", -3, -1));\n    assertEquals(\"SpanNotS2S1NotXXNeg_1_3\", 2, spanCount(\"s2 s1\", 10, \"xx\", -1, -3));\n    assertEquals(\"SpanNotS2S1NotXXNeg_2_2\", 3, spanCount(\"s2 s1\", 10, \"xx\", -2, -2));\n  }\n\n","sourceOld":"  public void testSpanNots() throws Throwable{\n     assertEquals(\"SpanNotIncludeExcludeSame1\", 0, spanCount(\"s2\", \"s2\", 0, 0), 0);\n     assertEquals(\"SpanNotIncludeExcludeSame2\", 0, spanCount(\"s2\", \"s2\", 10, 10), 0);\n     \n     //focus on behind\n     assertEquals(\"SpanNotS2NotS1_6_0\", 1, spanCount(\"s2\", \"s1\", 6, 0));\n     assertEquals(\"SpanNotS2NotS1_5_0\", 2, spanCount(\"s2\", \"s1\", 5, 0));\n     assertEquals(\"SpanNotS2NotS1_3_0\", 3, spanCount(\"s2\", \"s1\", 3, 0));\n     assertEquals(\"SpanNotS2NotS1_2_0\", 4, spanCount(\"s2\", \"s1\", 2, 0));\n     assertEquals(\"SpanNotS2NotS1_0_0\", 4, spanCount(\"s2\", \"s1\", 0, 0));\n     \n     //focus on both\n     assertEquals(\"SpanNotS2NotS1_3_1\", 2, spanCount(\"s2\", \"s1\", 3, 1));\n     assertEquals(\"SpanNotS2NotS1_2_1\", 3, spanCount(\"s2\", \"s1\", 2, 1));\n     assertEquals(\"SpanNotS2NotS1_1_1\", 3, spanCount(\"s2\", \"s1\", 1, 1));\n     assertEquals(\"SpanNotS2NotS1_10_10\", 0, spanCount(\"s2\", \"s1\", 10, 10));\n     \n     //focus on ahead\n     assertEquals(\"SpanNotS1NotS2_10_10\", 0, spanCount(\"s1\", \"s2\", 10, 10));  \n     assertEquals(\"SpanNotS1NotS2_0_1\", 3, spanCount(\"s1\", \"s2\", 0, 1));  \n     assertEquals(\"SpanNotS1NotS2_0_2\", 3, spanCount(\"s1\", \"s2\", 0, 2));  \n     assertEquals(\"SpanNotS1NotS2_0_3\", 2, spanCount(\"s1\", \"s2\", 0, 3));  \n     assertEquals(\"SpanNotS1NotS2_0_4\", 1, spanCount(\"s1\", \"s2\", 0, 4));\n     assertEquals(\"SpanNotS1NotS2_0_8\", 0, spanCount(\"s1\", \"s2\", 0, 8));\n     \n     //exclude doesn't exist\n     assertEquals(\"SpanNotS1NotS3_8_8\", 3, spanCount(\"s1\", \"s3\", 8, 8));\n\n     //include doesn't exist\n     assertEquals(\"SpanNotS3NotS1_8_8\", 0, spanCount(\"s3\", \"s1\", 8, 8));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["2102da8a037e2ce5cb9f72256c58c8722b9cd706","7d57d8425f061bbc789486399b498a35f960765e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d57d8425f061bbc789486399b498a35f960765e"],"7d57d8425f061bbc789486399b498a35f960765e":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["199dfa410f1fdbfd3294106b04096cce5ed34b21","7d57d8425f061bbc789486399b498a35f960765e"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7d57d8425f061bbc789486399b498a35f960765e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}