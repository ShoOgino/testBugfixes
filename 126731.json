{"path":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","sourceNew":"    @Override\n    public IntsRef read(final int count) throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        blockReader.readBlock();\n        upto = 0;\n      }\n      bulkResult.offset = upto;\n      if (upto + count < blockSize) {\n        bulkResult.length = count;\n        upto += count;\n      } else {\n        bulkResult.length = blockSize - upto;\n        upto = blockSize;\n      }\n\n      return bulkResult;\n    }\n\n","sourceOld":"    @Override\n    public IntsRef read(final int count) throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        blockReader.readBlock();\n        upto = 0;\n      }\n      bulkResult.offset = upto;\n      if (upto + count < blockSize) {\n        bulkResult.length = count;\n        upto += count;\n      } else {\n        bulkResult.length = blockSize - upto;\n        upto = blockSize;\n      }\n\n      return bulkResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3709aba98c471f43fda04e753fb434f5ed2a4a49","date":1341361999,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntsRef read(final int count) throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        blockReader.readBlock();\n        upto = 0;\n      }\n      bulkResult.offset = upto;\n      if (upto + count < blockSize) {\n        bulkResult.length = count;\n        upto += count;\n      } else {\n        bulkResult.length = blockSize - upto;\n        upto = blockSize;\n      }\n\n      return bulkResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntsRef read(final int count) throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        blockReader.readBlock();\n        upto = 0;\n      }\n      bulkResult.offset = upto;\n      if (upto + count < blockSize) {\n        bulkResult.length = count;\n        upto += count;\n      } else {\n        bulkResult.length = blockSize - upto;\n        upto = blockSize;\n      }\n\n      return bulkResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#read(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntsRef read(final int count) throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        blockReader.readBlock();\n        upto = 0;\n      }\n      bulkResult.offset = upto;\n      if (upto + count < blockSize) {\n        bulkResult.length = count;\n        upto += count;\n      } else {\n        bulkResult.length = blockSize - upto;\n        upto = blockSize;\n      }\n\n      return bulkResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3709aba98c471f43fda04e753fb434f5ed2a4a49":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3709aba98c471f43fda04e753fb434f5ed2a4a49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3709aba98c471f43fda04e753fb434f5ed2a4a49":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","3709aba98c471f43fda04e753fb434f5ed2a4a49","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}