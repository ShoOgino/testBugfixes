{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","commits":[{"id":"da6895c8fcaff91a5fcb72c54627339e3df1bb86","date":1435065290,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"/dev/null","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n\n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n\n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n    \n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n    \n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testToChildBlockJoinQueryExplain().mjava","sourceNew":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n\n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue().doubleValue(), 0f);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testToChildBlockJoinQueryExplain() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.deleteDocuments(new Term(\"skill\", \"java\")); // delete the first child of every parent\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    Query parentQuery = new PrefixQuery(new Term(\"country\", \"United\"));\n\n    ToChildBlockJoinQuery toChildQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n\n    TopDocs hits = s.search(toChildQuery, 10);\n    assertEquals(hits.scoreDocs.length, 2);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      assertEquals(hits.scoreDocs[i].score, s.explain(toChildQuery, hits.scoreDocs[i].doc).getValue(), 0.01);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["0e7bc21595222ae4f75509300fbb7726691f387f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["4b3915945926c0bf7def01b0c504977709d3aed3"],"da6895c8fcaff91a5fcb72c54627339e3df1bb86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b3915945926c0bf7def01b0c504977709d3aed3":["da6895c8fcaff91a5fcb72c54627339e3df1bb86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6895c8fcaff91a5fcb72c54627339e3df1bb86"],"0e7bc21595222ae4f75509300fbb7726691f387f":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"da6895c8fcaff91a5fcb72c54627339e3df1bb86":["4b3915945926c0bf7def01b0c504977709d3aed3"],"4b3915945926c0bf7def01b0c504977709d3aed3":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}