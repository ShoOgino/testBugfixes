{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), scoreMode, twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c07805e651f52dced5adbc59ff3aefeb7d171ca","date":1598242075,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionMatchQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return matchCost; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), scoreMode, twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    DoubleValuesSource vs = source.rewrite(searcher);\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        DoubleValues values = vs.getValues(context, null);\n        DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            return values.advanceExact(approximation.docID()) && filter.test(values.doubleValue());\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO maybe DoubleValuesSource should have a matchCost?\n          }\n        };\n        return new ConstantScoreScorer(this, score(), scoreMode, twoPhase);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return source.isCacheable(ctx);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c07805e651f52dced5adbc59ff3aefeb7d171ca":["9c226b0eeb8b028f572020f459851a663a2c064e"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c07805e651f52dced5adbc59ff3aefeb7d171ca"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"1c07805e651f52dced5adbc59ff3aefeb7d171ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c226b0eeb8b028f572020f459851a663a2c064e":["1c07805e651f52dced5adbc59ff3aefeb7d171ca"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}