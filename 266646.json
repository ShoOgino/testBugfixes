{"path":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      applyUpdates(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      });\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","sourceNew":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","sourceOld":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      applyUpdates(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      });\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","sourceNew":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","sourceOld":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      applyUpdates(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      });\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49575fe0d33c4904ac42b0526411d1dee7549e9b","date":1523529874,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","sourceNew":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      assert dvGeneration != -2 : \"docValues generation is still uninitialized\";\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","sourceOld":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43","date":1523531370,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","sourceNew":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      assert dvGeneration != -2 : \"docValues generation is still uninitialized\";\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","sourceOld":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(String,DocValuesFieldUpdates.Iterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onDocValuesUpdate(FieldInfo,List[DocValuesFieldUpdates]).mjava","sourceNew":"  @Override\n  void onDocValuesUpdate(String field, DocValuesFieldUpdates.Iterator iterator) throws IOException {\n    if (this.field.equals(field)) {\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n    }\n  }\n\n","sourceOld":"  @Override\n  void onDocValuesUpdate(FieldInfo info, List<DocValuesFieldUpdates> updatesToApply) throws IOException {\n    if (field.equals(info.name)) {\n      assert dvGeneration < info.getDocValuesGen() : \"we have seen this generation update already: \" + dvGeneration + \" vs. \" + info.getDocValuesGen();\n      assert dvGeneration != -2 : \"docValues generation is still uninitialized\";\n      DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n      for(int i=0; i<subs.length; i++) {\n        subs[i] = updatesToApply.get(i).iterator();\n      }\n      DocValuesFieldUpdates.Iterator iterator = DocValuesFieldUpdates.mergedIterator(subs);\n      pendingDeleteCount += applySoftDeletes(new DocIdSetIterator() {\n        int docID = -1;\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          return docID = iterator.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long cost() {\n          throw new UnsupportedOperationException();\n        }\n      }, getMutableBits());\n      dvGeneration = info.getDocValuesGen();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5ee0394b8176abd7c90a4be8c05465be1879db79","cb0130363fa13c53e4e78317c35b3b45a3089276"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"36d13f271b6649357e07f71f7e46559479f69b5b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["d58e44159788900f4a2113b84463dc3fbbf80f20","49575fe0d33c4904ac42b0526411d1dee7549e9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d13f271b6649357e07f71f7e46559479f69b5b"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["49575fe0d33c4904ac42b0526411d1dee7549e9b","5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"36d13f271b6649357e07f71f7e46559479f69b5b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}