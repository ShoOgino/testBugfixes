{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","commits":[{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, boolean longOrds) throws IOException {\n    in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (longOrds) {\n      bytesPerDoc += Long.BYTES;\n    } else {\n      bytesPerDoc += Integer.BYTES;\n    }\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    this.countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, boolean longOrds) throws IOException {\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (longOrds) {\n      bytesPerDoc += Long.BYTES;\n    } else {\n      bytesPerDoc += Integer.BYTES;\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, boolean longOrds) throws IOException {\n    in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (longOrds) {\n      bytesPerDoc += Long.BYTES;\n    } else {\n      bytesPerDoc += Integer.BYTES;\n    }\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    this.countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, boolean longOrds) throws IOException {\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (longOrds) {\n      bytesPerDoc += Long.BYTES;\n    } else {\n      bytesPerDoc += Integer.BYTES;\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["416f9e28900210be57b69bc12e2954fb98ed7ebe"]},"commit2Childs":{"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["950b7a6881d14da782b60444c11295e3ec50d41a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"950b7a6881d14da782b60444c11295e3ec50d41a":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}