{"path":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10d2f7af0975ac83900a2c970a62fe4c8667176b","date":1282358169,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b967739c936b1616f0a7ed24fe5f046dfa7559ca","date":1285734295,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","date":1290540872,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DoubleValues vals = cache.getDoubles(readerContext.reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DoubleValues vals = cache.getDoubles(reader, field, creator);\n    final double[] arr = vals.values;\n\tfinal Bits valid = vals.valid;\n    \n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n            @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final double[] doubleArr = arr;\n          private final MutableValueDouble mval = new MutableValueDouble();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = doubleArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10d2f7af0975ac83900a2c970a62fe4c8667176b":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b967739c936b1616f0a7ed24fe5f046dfa7559ca","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"10d2f7af0975ac83900a2c970a62fe4c8667176b":["b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["1a1f2fd9c5ec6d68e6c57de139a66673b613e13b","3bb13258feba31ab676502787ab2e1779f129b7a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["10d2f7af0975ac83900a2c970a62fe4c8667176b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a1f2fd9c5ec6d68e6c57de139a66673b613e13b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","3bb13258feba31ab676502787ab2e1779f129b7a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}