{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    this.httpClient = httpClient;\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"205aef5699265d604dfe3d79dac03c0cfe5bdcdf","date":1355255369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91fff4401b95144ad1b9863473e65208c1fbff7a","date":1386964026,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl) {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl) {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl)\n          throws MalformedURLException {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":"  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl) {\n    super(httpClient, parser, solrServerUrl);\n  }\n\n","sourceOld":"  /** The provided httpClient should use a multi-threaded connection manager */  \n  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl) {\n    clientIsInternal = (httpClient == null);\n    this.parser = parser;\n    if (httpClient == null) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_USE_RETRY, false);\n      this.httpClient = HttpClientUtil.createClient(params);\n    } else {\n      this.httpClient = httpClient;\n    }\n    for (String s : solrServerUrl) {\n      ServerWrapper wrapper = new ServerWrapper(makeServer(s));\n      aliveServers.put(wrapper.getKey(), wrapper);\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0080a8fdc299a09124dea014ed206981c1b8c54","date":1420037360,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#LBHttpSolrServer(HttpClient,ResponseParser,String...).mjava","sourceNew":null,"sourceOld":"  public LBHttpSolrServer(HttpClient httpClient, ResponseParser parser, String... solrServerUrl) {\n    super(httpClient, parser, solrServerUrl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["eb99886ff640d94edb43e0d36112a2b7023379ba","205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91fff4401b95144ad1b9863473e65208c1fbff7a":["205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["205aef5699265d604dfe3d79dac03c0cfe5bdcdf","91fff4401b95144ad1b9863473e65208c1fbff7a"],"bafca15d8e408346a67f4282ad1143b88023893b":["91fff4401b95144ad1b9863473e65208c1fbff7a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"205aef5699265d604dfe3d79dac03c0cfe5bdcdf":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"c0080a8fdc299a09124dea014ed206981c1b8c54":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"91fff4401b95144ad1b9863473e65208c1fbff7a":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"c26f00b574427b55127e869b935845554afde1fa":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["c0080a8fdc299a09124dea014ed206981c1b8c54"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"205aef5699265d604dfe3d79dac03c0cfe5bdcdf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","91fff4401b95144ad1b9863473e65208c1fbff7a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0080a8fdc299a09124dea014ed206981c1b8c54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}