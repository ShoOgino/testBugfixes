{"path":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","commits":[{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    return val==null ? null : Integer.parseInt(val);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f396c786865615804018225fa7142e8e1202c20","date":1174770619,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","pathOld":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","sourceNew":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    try {\n      return val==null ? null : Integer.valueOf(val);\n    }\n    catch( Exception ex ) {\n      throw new SolrException( 400, ex.getMessage(), ex );\n    }\n  }\n\n","sourceOld":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    return val==null ? null : Integer.parseInt(val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","pathOld":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","sourceNew":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    try {\n      return val==null ? null : Integer.valueOf(val);\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, ex.getMessage(), ex );\n    }\n  }\n\n","sourceOld":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    try {\n      return val==null ? null : Integer.valueOf(val);\n    }\n    catch( Exception ex ) {\n      throw new SolrException( 400, ex.getMessage(), ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/params/SolrParams#getInt(String).mjava","pathOld":"src/java/org/apache/solr/request/SolrParams#getInt(String).mjava","sourceNew":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    try {\n      return val==null ? null : Integer.valueOf(val);\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, ex.getMessage(), ex );\n    }\n  }\n\n","sourceOld":"  /** Returns the Integer value of the param, or null if not set */\n  public Integer getInt(String param) {\n    String val = get(param);\n    try {\n      return val==null ? null : Integer.valueOf(val);\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, ex.getMessage(), ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44f497c313977be641ddf24aab74b30e6de834d8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"1f396c786865615804018225fa7142e8e1202c20":["44f497c313977be641ddf24aab74b30e6de834d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["1f396c786865615804018225fa7142e8e1202c20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44f497c313977be641ddf24aab74b30e6de834d8":["1f396c786865615804018225fa7142e8e1202c20"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":[],"1f396c786865615804018225fa7142e8e1202c20":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["44f497c313977be641ddf24aab74b30e6de834d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}