{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double).mjava","commits":[{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /* \n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a35a7d0e36dd6f5b4f8053ac085490326734d5e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double).mjava","sourceNew":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /*\n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns true if the point is contained within this polygon */\n  public boolean contains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    /* \n     * simple even-odd point in polygon computation\n     *    1.  Determine if point is contained in the longitudinal range\n     *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n     *        between the end-point of a parallel vector (originating at the point) and the\n     *        y-component of the edge sink\n     *\n     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n     */\n    boolean inPoly = false;\n    /*\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n    for (int i = 1; i < polyLats.length; i++) {\n      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {\n        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    if (inPoly) {\n      for (Polygon hole : holes) {\n        if (hole.contains(latitude, longitude)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["a35a7d0e36dd6f5b4f8053ac085490326734d5e4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}