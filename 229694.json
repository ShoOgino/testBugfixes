{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","commits":[{"id":"91a5e37a1dee5ad8d3fe6d55228839d5d0412999","date":1412798723,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","sourceNew":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","sourceOld":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","sourceNew":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","sourceOld":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/email/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestUAX29URLEmailTokenizer#testWikiURLs().mjava","sourceNew":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","sourceOld":"  public void testWikiURLs() throws Exception {\n    Reader reader = null;\n    String luceneResourcesWikiPage;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"LuceneResourcesWikiPage.html\"), StandardCharsets.UTF_8);\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      luceneResourcesWikiPage = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != luceneResourcesWikiPage \n               && luceneResourcesWikiPage.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"LuceneResourcesWikiPageURLs.txt\"), StandardCharsets.UTF_8));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, luceneResourcesWikiPage, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"91a5e37a1dee5ad8d3fe6d55228839d5d0412999":["55980207f1977bd1463465de1659b821347e2fa8","313c36388b6cae6118f75a1860ad0ba0af7e1344"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","91a5e37a1dee5ad8d3fe6d55228839d5d0412999"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}