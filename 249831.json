{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","sourceNew":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n\t */\n\tpublic String highlightTerm(String originalText, TokenGroup tokenGroup) {\n\t  if (tokenGroup.getTotalScore() <= 0) {\n\t    return originalText;\n\t  }\n\t  \n\t  // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n\t  StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n\t  returnBuffer.append(preTag);\n\t  returnBuffer.append(originalText);\n\t  returnBuffer.append(postTag);\n\t  return returnBuffer.toString();\n\t}\n\n","sourceOld":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n\t */\n\tpublic String highlightTerm(String originalText, TokenGroup tokenGroup) {\n\t  if (tokenGroup.getTotalScore() <= 0) {\n\t    return originalText;\n\t  }\n\t  \n\t  // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n\t  StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n\t  returnBuffer.append(preTag);\n\t  returnBuffer.append(originalText);\n\t  returnBuffer.append(postTag);\n\t  return returnBuffer.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n   */\n  public String highlightTerm(String originalText, TokenGroup tokenGroup) {\n    if (tokenGroup.getTotalScore() <= 0) {\n      return originalText;\n    }\n\n    // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n    StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n    returnBuffer.append(preTag);\n    returnBuffer.append(originalText);\n    returnBuffer.append(postTag);\n    return returnBuffer.toString();\n  }\n\n","sourceOld":"\t/* (non-Javadoc)\n\t * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n\t */\n\tpublic String highlightTerm(String originalText, TokenGroup tokenGroup) {\n\t  if (tokenGroup.getTotalScore() <= 0) {\n\t    return originalText;\n\t  }\n\t  \n\t  // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n\t  StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n\t  returnBuffer.append(preTag);\n\t  returnBuffer.append(originalText);\n\t  returnBuffer.append(postTag);\n\t  return returnBuffer.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n   */\n  @Override\n  public String highlightTerm(String originalText, TokenGroup tokenGroup) {\n    if (tokenGroup.getTotalScore() <= 0) {\n      return originalText;\n    }\n\n    // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n    StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n    returnBuffer.append(preTag);\n    returnBuffer.append(originalText);\n    returnBuffer.append(postTag);\n    return returnBuffer.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n   */\n  public String highlightTerm(String originalText, TokenGroup tokenGroup) {\n    if (tokenGroup.getTotalScore() <= 0) {\n      return originalText;\n    }\n\n    // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n    StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n    returnBuffer.append(preTag);\n    returnBuffer.append(originalText);\n    returnBuffer.append(postTag);\n    return returnBuffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter#highlightTerm(String,TokenGroup).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n   */\n  @Override\n  public String highlightTerm(String originalText, TokenGroup tokenGroup) {\n    if (tokenGroup.getTotalScore() <= 0) {\n      return originalText;\n    }\n\n    // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n    StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n    returnBuffer.append(preTag);\n    returnBuffer.append(originalText);\n    returnBuffer.append(postTag);\n    return returnBuffer.toString();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Formatter#highlightTerm(java.lang.String, org.apache.lucene.search.highlight.TokenGroup)\n   */\n  public String highlightTerm(String originalText, TokenGroup tokenGroup) {\n    if (tokenGroup.getTotalScore() <= 0) {\n      return originalText;\n    }\n\n    // Allocate StringBuilder with the right number of characters from the\n    // beginning, to avoid char[] allocations in the middle of appends.\n    StringBuilder returnBuffer = new StringBuilder(preTag.length() + originalText.length() + postTag.length());\n    returnBuffer.append(preTag);\n    returnBuffer.append(originalText);\n    returnBuffer.append(postTag);\n    return returnBuffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}