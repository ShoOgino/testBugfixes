{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","commits":[{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[][],byte[][]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[][] min, byte[][] max) {\n    return new PointRangeQuery(field, min, max) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005","date":1461676641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new LatLonPointBoxQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new LatLonPointBoxQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50ff3ac7f4f69138711952170497ecb401ce2396","date":1465514544,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new LatLonPointBoxQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new LatLonPointBoxQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newBoxInternal(String,byte[],byte[]).mjava","sourceNew":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Query newBoxInternal(String field, byte[] min, byte[] max) {\n    return new PointRangeQuery(field, min, max, 2) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        if (dimension == 0) {\n          return Double.toString(decodeLatitude(value, 0));\n        } else if (dimension == 1) {\n          return Double.toString(decodeLongitude(value, 0));\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50ff3ac7f4f69138711952170497ecb401ce2396":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005":["606ea169579957651185909e7264798e99e714f9"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["50ff3ac7f4f69138711952170497ecb401ce2396"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["606ea169579957651185909e7264798e99e714f9","a61b5b0e4cf8ab04d7674f9ae117ddc60be22005"],"606ea169579957651185909e7264798e99e714f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","50ff3ac7f4f69138711952170497ecb401ce2396"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"50ff3ac7f4f69138711952170497ecb401ce2396":["88b0212386fe531136816706dc37dc49b9dbf7dc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a61b5b0e4cf8ab04d7674f9ae117ddc60be22005":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["50ff3ac7f4f69138711952170497ecb401ce2396","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["606ea169579957651185909e7264798e99e714f9"],"606ea169579957651185909e7264798e99e714f9":["a61b5b0e4cf8ab04d7674f9ae117ddc60be22005","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}