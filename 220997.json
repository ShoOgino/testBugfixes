{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","commits":[{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3660ef111aa270bdbc5d665a05dfb9b13edb268","date":1500221107,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    // limit\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    // buckets\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    // bucketSorts\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["d470c8182e92b264680e34081b75e70a9f2b3c89","c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5287d62ad5da27d35a88ada646ae7d9adfb76826","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"5a209db4770770843a101e5dfe46086a63507fd3":["011d43366b2da54d1652d93e7ec6412848eeb009"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5287d62ad5da27d35a88ada646ae7d9adfb76826","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a209db4770770843a101e5dfe46086a63507fd3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5287d62ad5da27d35a88ada646ae7d9adfb76826","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"5287d62ad5da27d35a88ada646ae7d9adfb76826":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["aaf90fc29510e72665ac7934f34c3d1c25efad64","011d43366b2da54d1652d93e7ec6412848eeb009"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"011d43366b2da54d1652d93e7ec6412848eeb009":["5a209db4770770843a101e5dfe46086a63507fd3"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"5a209db4770770843a101e5dfe46086a63507fd3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["aaf90fc29510e72665ac7934f34c3d1c25efad64","c3660ef111aa270bdbc5d665a05dfb9b13edb268","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}