{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","commits":[{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n      System.out.println(termState.docStartFP);\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n    //System.out.println(\"PR: state=\" + termState);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","sourceNew":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n      System.out.println(termState.docStartFP);\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n    //System.out.println(\"PR: state=\" + termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","sourceNew":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#_decodeTerm(DataInput,FieldInfo,IntBlockTermState).mjava","sourceNew":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  private void _decodeTerm(DataInput in, FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n      termState.docStartFP += in.readVLong();\n    }\n    if (fieldHasPositions) {\n      termState.posStartFP += in.readVLong();\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n      if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n        termState.payStartFP += in.readVLong();\n      }\n    }\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["e3263230f04a1aa8d431d722fdfce583a9542c18","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2f948dd442d23baa6cbb28daf77c8db78b351329","99eb4a732d1a908f4636ace52928876136bf1896"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","2f948dd442d23baa6cbb28daf77c8db78b351329","e3263230f04a1aa8d431d722fdfce583a9542c18"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}