{"path":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","commits":[{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n\n    TotalHitCountCollector hitCountCollector = new TotalHitCountCollector();\n    if (includeHitCount) {\n      collector = MultiCollector.wrap(collector, hitCountCollector);\n    }\n\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n\n    if (includeHitCount) {\n      totalHitCount = hitCountCollector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,ProcessedFilter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, \n                                     final ProcessedFilter filter, \n                                     Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n\n    TotalHitCountCollector hitCountCollector = new TotalHitCountCollector();\n    if (includeHitCount) {\n      collector = MultiCollector.wrap(collector, hitCountCollector);\n    }\n\n    Filter luceneFilter = filter.filter;\n    if (filter.postFilter != null) {\n      filter.postFilter.setLastDelegate(collector);\n      collector = filter.postFilter;\n    }\n\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n\n    if (includeHitCount) {\n      totalHitCount = hitCountCollector.getTotalHits();\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n\n    TotalHitCountCollector hitCountCollector = new TotalHitCountCollector();\n    if (includeHitCount) {\n      collector = MultiCollector.wrap(collector, hitCountCollector);\n    }\n\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n\n    if (includeHitCount) {\n      totalHitCount = hitCountCollector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#searchWithTimeLimiter(Query,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified then wrap the collector in the TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Query query, final Filter luceneFilter, Collector collector) throws IOException {\n    if (queryCommand.getTimeAllowed() > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), queryCommand.getTimeAllowed());\n    }\n\n    TotalHitCountCollector hitCountCollector = new TotalHitCountCollector();\n    if (includeHitCount) {\n      collector = MultiCollector.wrap(collector, hitCountCollector);\n    }\n\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      partialResults = true;\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n    }\n\n    if (includeHitCount) {\n      totalHitCount = hitCountCollector.getTotalHits();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["612521de57bdf68711c68b6d8565e4a80ca0d7f6","2f8247163846f78e14d325499507cc0a7d5821e2"],"2f8247163846f78e14d325499507cc0a7d5821e2":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f8247163846f78e14d325499507cc0a7d5821e2"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"2f8247163846f78e14d325499507cc0a7d5821e2":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}