{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","commits":[{"id":"67bcec391f8e94564afde5a0f0e6538d07a96255","date":1393593793,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"/dev/null","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67c440a48459a7991e838f63cba2fadb1791cd9f","date":1455531460,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (mayMerge.get() == false) {\n          MergePolicy.OneMerge merge = writer.getNextMerge();\n          if (merge != null) {\n            System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n            throw new AssertionError();\n          }\n        }\n\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n\n    MergePolicy mp = mergePolicy();\n    assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n    mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setMergePolicy(mp);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n      }\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (!mayMerge.get() && writer.getNextMerge() != null) {\n          throw new AssertionError();\n        }\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergeScheduler(mergeScheduler).setMergePolicy(mergePolicy()));\n    writer.getConfig().getMergePolicy().setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40242154796704330f4e4506cb0302aa60bb92bf","date":1455579847,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    try (Directory dir = newDirectory()) {\n      final AtomicBoolean mayMerge = new AtomicBoolean(true);\n      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n          @Override\n          synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n            if (mayMerge.get() == false) {\n              MergePolicy.OneMerge merge = writer.getNextMerge();\n              if (merge != null) {\n                System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n                throw new AssertionError();\n              }\n            }\n\n            super.merge(writer, trigger, newMergesFound);\n          }\n        };\n\n      MergePolicy mp = mergePolicy();\n      assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMergeScheduler(mergeScheduler);\n      iwc.setMergePolicy(mp);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      final int numSegments = TestUtil.nextInt(random(), 2, 20);\n      for (int i = 0; i < numSegments; ++i) {\n        final int numDocs = TestUtil.nextInt(random(), 1, 5);\n        for (int j = 0; j < numDocs; ++j) {\n          writer.addDocument(new Document());\n        }\n        writer.getReader().close();\n      }\n      for (int i = 5; i >= 0; --i) {\n        final int segmentCount = writer.getSegmentCount();\n        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n        mayMerge.set(segmentCount > maxNumSegments);\n        if (VERBOSE) {\n          System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n        }\n        writer.forceMerge(maxNumSegments);\n      }\n      writer.close();\n    }\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    final AtomicBoolean mayMerge = new AtomicBoolean(true);\n    final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n      @Override\n      synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n        if (mayMerge.get() == false) {\n          MergePolicy.OneMerge merge = writer.getNextMerge();\n          if (merge != null) {\n            System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n            throw new AssertionError();\n          }\n        }\n\n        super.merge(writer, trigger, newMergesFound);\n      }\n    };\n\n    MergePolicy mp = mergePolicy();\n    assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n    mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(mergeScheduler);\n    iwc.setMergePolicy(mp);\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    final int numSegments = TestUtil.nextInt(random(), 2, 20);\n    for (int i = 0; i < numSegments; ++i) {\n      final int numDocs = TestUtil.nextInt(random(), 1, 5);\n      for (int j = 0; j < numDocs; ++j) {\n        writer.addDocument(new Document());\n      }\n      writer.getReader().close();\n    }\n    for (int i = 5; i >= 0; --i) {\n      final int segmentCount = writer.getSegmentCount();\n      final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n      mayMerge.set(segmentCount > maxNumSegments);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n      }\n      writer.forceMerge(maxNumSegments);\n    }\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    try (Directory dir = newDirectory()) {\n      final AtomicBoolean mayMerge = new AtomicBoolean(true);\n      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n          @Override\n          synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n            if (mayMerge.get() == false) {\n              MergePolicy.OneMerge merge = writer.getNextMerge();\n              if (merge != null) {\n                System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n                throw new AssertionError();\n              }\n            }\n\n            super.merge(writer, trigger);\n          }\n        };\n\n      MergePolicy mp = mergePolicy();\n      assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMergeScheduler(mergeScheduler);\n      iwc.setMergePolicy(mp);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      final int numSegments = TestUtil.nextInt(random(), 2, 20);\n      for (int i = 0; i < numSegments; ++i) {\n        final int numDocs = TestUtil.nextInt(random(), 1, 5);\n        for (int j = 0; j < numDocs; ++j) {\n          writer.addDocument(new Document());\n        }\n        writer.getReader().close();\n      }\n      for (int i = 5; i >= 0; --i) {\n        final int segmentCount = writer.getSegmentCount();\n        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n        mayMerge.set(segmentCount > maxNumSegments);\n        if (VERBOSE) {\n          System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n        }\n        writer.forceMerge(maxNumSegments);\n      }\n      writer.close();\n    }\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    try (Directory dir = newDirectory()) {\n      final AtomicBoolean mayMerge = new AtomicBoolean(true);\n      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n          @Override\n          synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n            if (mayMerge.get() == false) {\n              MergePolicy.OneMerge merge = writer.getNextMerge();\n              if (merge != null) {\n                System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n                throw new AssertionError();\n              }\n            }\n\n            super.merge(writer, trigger, newMergesFound);\n          }\n        };\n\n      MergePolicy mp = mergePolicy();\n      assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMergeScheduler(mergeScheduler);\n      iwc.setMergePolicy(mp);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      final int numSegments = TestUtil.nextInt(random(), 2, 20);\n      for (int i = 0; i < numSegments; ++i) {\n        final int numDocs = TestUtil.nextInt(random(), 1, 5);\n        for (int j = 0; j < numDocs; ++j) {\n          writer.addDocument(new Document());\n        }\n        writer.getReader().close();\n      }\n      for (int i = 5; i >= 0; --i) {\n        final int segmentCount = writer.getSegmentCount();\n        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n        mayMerge.set(segmentCount > maxNumSegments);\n        if (VERBOSE) {\n          System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n        }\n        writer.forceMerge(maxNumSegments);\n      }\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#testForceMergeNotNeeded().mjava","sourceNew":"  public void testForceMergeNotNeeded() throws IOException {\n    try (Directory dir = newDirectory()) {\n      final AtomicBoolean mayMerge = new AtomicBoolean(true);\n      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n          @Override\n          synchronized public void merge(MergeSource mergeSource, MergeTrigger trigger) throws IOException {\n            if (mayMerge.get() == false) {\n              MergePolicy.OneMerge merge = mergeSource.getNextMerge();\n              if (merge != null) {\n                System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n                throw new AssertionError();\n              }\n            }\n\n            super.merge(mergeSource, trigger);\n          }\n        };\n\n      MergePolicy mp = mergePolicy();\n      assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMergeScheduler(mergeScheduler);\n      iwc.setMergePolicy(mp);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      final int numSegments = TestUtil.nextInt(random(), 2, 20);\n      for (int i = 0; i < numSegments; ++i) {\n        final int numDocs = TestUtil.nextInt(random(), 1, 5);\n        for (int j = 0; j < numDocs; ++j) {\n          writer.addDocument(new Document());\n        }\n        writer.getReader().close();\n      }\n      for (int i = 5; i >= 0; --i) {\n        final int segmentCount = writer.getSegmentCount();\n        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n        mayMerge.set(segmentCount > maxNumSegments);\n        if (VERBOSE) {\n          System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n        }\n        writer.forceMerge(maxNumSegments);\n      }\n      writer.close();\n    }\n  }\n\n","sourceOld":"  public void testForceMergeNotNeeded() throws IOException {\n    try (Directory dir = newDirectory()) {\n      final AtomicBoolean mayMerge = new AtomicBoolean(true);\n      final MergeScheduler mergeScheduler = new SerialMergeScheduler() {\n          @Override\n          synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n            if (mayMerge.get() == false) {\n              MergePolicy.OneMerge merge = writer.getNextMerge();\n              if (merge != null) {\n                System.out.println(\"TEST: we should not need any merging, yet merge policy returned merge \" + merge);\n                throw new AssertionError();\n              }\n            }\n\n            super.merge(writer, trigger);\n          }\n        };\n\n      MergePolicy mp = mergePolicy();\n      assumeFalse(\"this test cannot tolerate random forceMerges\", mp.toString().contains(\"MockRandomMergePolicy\"));\n      mp.setNoCFSRatio(random().nextBoolean() ? 0 : 1);\n\n      IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n      iwc.setMergeScheduler(mergeScheduler);\n      iwc.setMergePolicy(mp);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      final int numSegments = TestUtil.nextInt(random(), 2, 20);\n      for (int i = 0; i < numSegments; ++i) {\n        final int numDocs = TestUtil.nextInt(random(), 1, 5);\n        for (int j = 0; j < numDocs; ++j) {\n          writer.addDocument(new Document());\n        }\n        writer.getReader().close();\n      }\n      for (int i = 5; i >= 0; --i) {\n        final int segmentCount = writer.getSegmentCount();\n        final int maxNumSegments = i == 0 ? 1 : TestUtil.nextInt(random(), 1, 10);\n        mayMerge.set(segmentCount > maxNumSegments);\n        if (VERBOSE) {\n          System.out.println(\"TEST: now forceMerge(maxNumSegments=\" + maxNumSegments + \") vs segmentCount=\" + segmentCount);\n        }\n        writer.forceMerge(maxNumSegments);\n      }\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["40242154796704330f4e4506cb0302aa60bb92bf"],"4853751884e55469b8cc1abab8fa0788eab240c9":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"67c440a48459a7991e838f63cba2fadb1791cd9f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4853751884e55469b8cc1abab8fa0788eab240c9"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"40242154796704330f4e4506cb0302aa60bb92bf":["67c440a48459a7991e838f63cba2fadb1791cd9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["89697e7abc9807639c384eecf5a2a6eef1080426"],"4853751884e55469b8cc1abab8fa0788eab240c9":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"67c440a48459a7991e838f63cba2fadb1791cd9f":["40242154796704330f4e4506cb0302aa60bb92bf"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["67c440a48459a7991e838f63cba2fadb1791cd9f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["4853751884e55469b8cc1abab8fa0788eab240c9"],"40242154796704330f4e4506cb0302aa60bb92bf":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}