{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","commits":[{"id":"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4","date":1394446722,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val, 1.0f);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val, 1.0f);\n\n    assertTrue(sif1.equals(sif2));\n\n    sif1.setBoost(2.1f);\n    sif2.setBoost(2.1f);\n    assertTrue(sif1.equals(sif2));\n\n    sif2.setBoost(2.0f);\n    assertFalse(sif1.equals(sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(sif1.equals(sif2));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val, 1.0f);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val, 1.0f);\n\n    assertTrue(sif1.equals(sif2));\n\n    sif1.setBoost(2.1f);\n    sif2.setBoost(2.1f);\n    assertTrue(sif1.equals(sif2));\n\n    sif2.setBoost(2.0f);\n    assertFalse(sif1.equals(sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(sif1.equals(sif2));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6071e662e00f61ccd046fe73a31ac6e57aaca116","date":1394797480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val, 1.0f);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val, 1.0f);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif1.setBoost(2.1f);\n    sif2.setBoost(2.1f);\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setBoost(2.0f);\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n\n  }\n\n","sourceOld":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val, 1.0f);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val, 1.0f);\n\n    assertTrue(sif1.equals(sif2));\n\n    sif1.setBoost(2.1f);\n    sif2.setBoost(2.1f);\n    assertTrue(sif1.equals(sif2));\n\n    sif2.setBoost(2.0f);\n    assertFalse(sif1.equals(sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(sif1.equals(sif2));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n\n  }\n\n","sourceOld":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val, 1.0f);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val, 1.0f);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif1.setBoost(2.1f);\n    sif2.setBoost(2.1f);\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setBoost(2.0f);\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24686226124dab7a26bcb1ed0653aa7fa4a18c9e","date":1489713728,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n  }\n\n","sourceOld":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4359f613ec1bd44a86b91e052b90aadb3804b51","date":1490280010,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testSolrInputFieldEquality().mjava","sourceNew":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n  }\n\n","sourceOld":"  public void testSolrInputFieldEquality() {\n    String randomString = TestUtil.randomSimpleString(random(), 10, 20);\n\n    int val = random().nextInt();\n    SolrInputField sif1 = new SolrInputField(randomString);\n    sif1.setValue(val);\n    SolrInputField sif2 = new SolrInputField(randomString);\n    sif2.setValue(val);\n\n    assertTrue(assertSolrInputFieldEquals(sif1, sif2));\n\n    sif2.setName(\"foo\");\n    assertFalse(assertSolrInputFieldEquals(sif1, sif2));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4359f613ec1bd44a86b91e052b90aadb3804b51":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["6071e662e00f61ccd046fe73a31ac6e57aaca116"],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24686226124dab7a26bcb1ed0653aa7fa4a18c9e"],"24686226124dab7a26bcb1ed0653aa7fa4a18c9e":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"6071e662e00f61ccd046fe73a31ac6e57aaca116":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4"],"c4359f613ec1bd44a86b91e052b90aadb3804b51":[],"2aab39e9a8941dd8a50d0f9ee4d90b8ca29135d4":["6071e662e00f61ccd046fe73a31ac6e57aaca116","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"acd9883560fd89e6448b2b447302fe543040cd4f":["c4359f613ec1bd44a86b91e052b90aadb3804b51","24686226124dab7a26bcb1ed0653aa7fa4a18c9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"24686226124dab7a26bcb1ed0653aa7fa4a18c9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","c4359f613ec1bd44a86b91e052b90aadb3804b51","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}