{"path":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random(), sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random, null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random, sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy(sdp.getSnapshots())));\n    sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    new IndexWriter(dir, getConfig(random(), sdp)).close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit ic = sdp.snapshot(\"s1\");\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(ic.getSegmentsFileName()));\n    \n    // Now reinit SDP from the commits in the index - the snapshot id should not\n    // exist anymore.\n    writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy(sdp.getSnapshots())));\n    sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.close();\n    \n    try {\n      sdp.getSnapshot(\"s1\");\n      fail(\"snapshot s1 should not exist\");\n    } catch (IllegalStateException e) {\n      // expected.\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", dir.fileExists(s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).shutdown();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.shutdown();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).shutdown();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we rely upon existence of files\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we rely upon existence of files\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we rely upon existence of files\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we rely upon existence of files\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testMissingCommits().mjava","sourceNew":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMissingCommits() throws Exception {\n    // Tests the behavior of SDP when commits that are given at ctor are missing\n    // on onInit().\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we rely upon existence of files\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexCommit s1 = sdp.snapshot();\n\n    // create another commit, not snapshotted.\n    writer.addDocument(new Document());\n    writer.close();\n\n    // open a new writer w/ KeepOnlyLastCommit policy, so it will delete \"s1\"\n    // commit.\n    new IndexWriter(dir, getConfig(random(), null)).close();\n    \n    assertFalse(\"snapshotted commit should not exist\", slowFileExists(dir, s1.getSegmentsFileName()));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8a207624ce3e468bca1819861084438d936e3b1c":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}