{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.TopLevelReplicaListTransformer#transform(List[#]).mjava","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.preferenceRules.toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              SolrException.ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray())); // logOK\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\", Arrays.toString(choices.toArray())); // logOK\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\", Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray())); // logOK\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\", Arrays.toString(choices.toArray())); // logOK\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05f1f8f12f326d0a80078dd762c9e2ec8698a0f1","date":1589517095,"type":3,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size()];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n        boundaries[boundaryCount++] = idx;\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\", Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\", Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["833432c363468a5df50f87446a68015404b1fbcf"],"05f1f8f12f326d0a80078dd762c9e2ec8698a0f1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05f1f8f12f326d0a80078dd762c9e2ec8698a0f1"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"05f1f8f12f326d0a80078dd762c9e2ec8698a0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["05f1f8f12f326d0a80078dd762c9e2ec8698a0f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}