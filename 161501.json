{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","commits":[{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f9fddef147e9702c85a51239935df11e5338bfbf","f9fddef147e9702c85a51239935df11e5338bfbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"017c035439201490351b0f5f3d33a393c6c24551","date":1305551986,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#cluster(Query,SolrDocumentList,Map[SolrDocument,Integer],SolrQueryRequest).mjava","sourceNew":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object cluster(Query query, SolrDocumentList solrDocList,\n      Map<SolrDocument, Integer> docIds, SolrQueryRequest sreq) {\n    try {\n      // Prepare attributes for Carrot2 clustering call\n      Map<String, Object> attributes = new HashMap<String, Object>();\n      List<Document> documents = getDocuments(solrDocList, docIds, query, sreq);\n      attributes.put(AttributeNames.DOCUMENTS, documents);\n      attributes.put(AttributeNames.QUERY, query.toString());\n\n      // Pass the fields on which clustering runs to the\n      // SolrStopwordsCarrot2LexicalDataFactory\n      attributes.put(\"solrFieldNames\", getFieldsForClustering(sreq));\n\n      // Pass extra overriding attributes from the request, if any\n      extractCarrotAttributes(sreq.getParams(), attributes);\n\n      // Perform clustering and convert to named list\n      return clustersToNamedList(controller.process(attributes,\n              clusteringAlgorithmClass).getClusters(), sreq.getParams());\n    } catch (Exception e) {\n      log.error(\"Carrot2 clustering failed\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Carrot2 clustering failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"017c035439201490351b0f5f3d33a393c6c24551":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"c26f00b574427b55127e869b935845554afde1fa":["017c035439201490351b0f5f3d33a393c6c24551","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","017c035439201490351b0f5f3d33a393c6c24551"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","017c035439201490351b0f5f3d33a393c6c24551"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","017c035439201490351b0f5f3d33a393c6c24551"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"017c035439201490351b0f5f3d33a393c6c24551":["c26f00b574427b55127e869b935845554afde1fa","c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["017c035439201490351b0f5f3d33a393c6c24551","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","a5684446f7742dfb07c42296decc5e4d6515a0fe","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}