{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"TE.next()\");\n      }\n      if (skipNext) {\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  skipNext=true\");\n        }\n        skipNext = false;\n        if (termEnum.term() == null) {\n          return null;\n        // PreFlex codec interns field names:\n        } else if (termEnum.term().field() != internedFieldName) {\n          return null;\n        } else {\n          return current = termEnum.term().bytes();\n        }\n      }\n\n      // TODO: can we use STE's prevBuffer here?\n      prevTerm.copyBytes(termEnum.term().bytes());\n\n      if (termEnum.next() && termEnum.term().field() == internedFieldName) {\n        newSuffixStart = termEnum.newSuffixStart;\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  newSuffixStart=\" + newSuffixStart);\n        }\n        surrogateDance();\n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          current = null;\n        } else {\n          current = t.bytes();\n        }\n        return current;\n      } else {\n        // This field is exhausted, but we have to give\n        // surrogateDance a chance to seek back:\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  force cont\");\n        }\n        //newSuffixStart = prevTerm.length;\n        newSuffixStart = 0;\n        surrogateDance();\n        \n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          return null;\n        } else {\n          current = t.bytes();\n          return current;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"TE.next()\");\n      }\n      if (skipNext) {\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  skipNext=true\");\n        }\n        skipNext = false;\n        if (termEnum.term() == null) {\n          return null;\n        // PreFlex codec interns field names:\n        } else if (termEnum.term().field() != internedFieldName) {\n          return null;\n        } else {\n          return current = termEnum.term().bytes();\n        }\n      }\n\n      // TODO: can we use STE's prevBuffer here?\n      prevTerm.copyBytes(termEnum.term().bytes());\n\n      if (termEnum.next() && termEnum.term().field() == internedFieldName) {\n        newSuffixStart = termEnum.newSuffixStart;\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  newSuffixStart=\" + newSuffixStart);\n        }\n        surrogateDance();\n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          current = null;\n        } else {\n          current = t.bytes();\n        }\n        return current;\n      } else {\n        // This field is exhausted, but we have to give\n        // surrogateDance a chance to seek back:\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  force cont\");\n        }\n        //newSuffixStart = prevTerm.length;\n        newSuffixStart = 0;\n        surrogateDance();\n        \n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          return null;\n        } else {\n          current = t.bytes();\n          return current;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFields.PreTermsEnum#next().mjava","sourceNew":null,"sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"TE.next()\");\n      }\n      if (skipNext) {\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  skipNext=true\");\n        }\n        skipNext = false;\n        if (termEnum.term() == null) {\n          return null;\n        // PreFlex codec interns field names:\n        } else if (termEnum.term().field() != internedFieldName) {\n          return null;\n        } else {\n          return current = termEnum.term().bytes();\n        }\n      }\n\n      // TODO: can we use STE's prevBuffer here?\n      prevTerm.copyBytes(termEnum.term().bytes());\n\n      if (termEnum.next() && termEnum.term().field() == internedFieldName) {\n        newSuffixStart = termEnum.newSuffixStart;\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  newSuffixStart=\" + newSuffixStart);\n        }\n        surrogateDance();\n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          current = null;\n        } else {\n          current = t.bytes();\n        }\n        return current;\n      } else {\n        // This field is exhausted, but we have to give\n        // surrogateDance a chance to seek back:\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"  force cont\");\n        }\n        //newSuffixStart = prevTerm.length;\n        newSuffixStart = 0;\n        surrogateDance();\n        \n        final Term t = termEnum.term();\n        if (t == null || t.field() != internedFieldName) {\n          // PreFlex codec interns field names; verify:\n          assert t == null || !t.field().equals(internedFieldName);\n          return null;\n        } else {\n          current = t.bytes();\n          return current;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}