{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","commits":[{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#lookupShardLeadersOfCollections().mjava","sourceNew":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","sourceNew":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(getAliasName());\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeadersOfCollections().mjava","sourceNew":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(getAliasName());\n    if (collections == null) {\n      throw RoutedAlias.newAliasMustExistException(getAliasName());\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","sourceOld":"  private List<SolrCmdDistributor.Node> lookupShardLeadersOfCollections() {\n    final Aliases aliases = zkController.getZkStateReader().getAliases();\n    List<String> collections = aliases.getCollectionAliasListMap().get(getAliasName());\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    return collections.stream().map(this::lookupShardLeaderOfCollection).collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["5613a70439d5d429f0689c2c5a21615e58deff97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"5613a70439d5d429f0689c2c5a21615e58deff97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5613a70439d5d429f0689c2c5a21615e58deff97"],"5613a70439d5d429f0689c2c5a21615e58deff97":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}