{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#merge(char[],char[]).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#merge(char[],char[]).mjava","pathOld":"/dev/null","sourceNew":"  static char[] merge(char[] flags1, char[] flags2) {\n    char merged[] = new char[flags1.length + flags2.length];\n    int i1 = 0, i2 = 0;\n    int last = -1;\n    int upto = 0;\n    \n    while (i1 < flags1.length && i2 < flags2.length) {\n      final char next;\n      if (flags1[i1] <= flags2[i2]) {\n        next = flags1[i1++];\n      } else {\n        next = flags2[i2++];\n      }\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i1 < flags1.length) {\n      char next = flags1[i1++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i2 < flags2.length) {\n      char next = flags2[i2++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    if (merged.length != upto) {\n      merged = Arrays.copyOf(merged, upto);\n    }\n    \n    return merged;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#merge(char[],char[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#merge(char[],char[]).mjava","sourceNew":"  static char[] merge(char[] flags1, char[] flags2) {\n    char merged[] = new char[flags1.length + flags2.length];\n    int i1 = 0, i2 = 0;\n    int last = -1;\n    int upto = 0;\n    \n    while (i1 < flags1.length && i2 < flags2.length) {\n      final char next;\n      if (flags1[i1] <= flags2[i2]) {\n        next = flags1[i1++];\n      } else {\n        next = flags2[i2++];\n      }\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i1 < flags1.length) {\n      char next = flags1[i1++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i2 < flags2.length) {\n      char next = flags2[i2++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    if (merged.length != upto) {\n      merged = Arrays.copyOf(merged, upto);\n    }\n    \n    return merged;\n  }\n\n","sourceOld":"  static char[] merge(char[] flags1, char[] flags2) {\n    char merged[] = new char[flags1.length + flags2.length];\n    int i1 = 0, i2 = 0;\n    int last = -1;\n    int upto = 0;\n    \n    while (i1 < flags1.length && i2 < flags2.length) {\n      final char next;\n      if (flags1[i1] <= flags2[i2]) {\n        next = flags1[i1++];\n      } else {\n        next = flags2[i2++];\n      }\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i1 < flags1.length) {\n      char next = flags1[i1++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    while (i2 < flags2.length) {\n      char next = flags2[i2++];\n      if (next != last) {\n        merged[upto++] = next;\n        last = next;\n      }\n    }\n    \n    if (merged.length != upto) {\n      merged = Arrays.copyOf(merged, upto);\n    }\n    \n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}