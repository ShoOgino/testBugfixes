{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Moves to the next term line and reads it, it may be in the next block.\n   * The term details are not read yet. They will be read only when needed\n   * with {@link #readTermStateIfNotRead()}.\n   *\n   * @return The read term bytes; or null if there is no more term for the field.\n   */\n  protected BytesRef nextTerm() throws IOException {\n    if (blockHeader == null) {\n      // Read the first block for the field.\n      initializeHeader(null, fieldMetadata.getFirstBlockStartFP());\n      assert blockHeader != null;\n    }\n    if (readLineInBlock() == null) {\n      // No more line in the current block.\n      // Read the next block starting at the current file pointer in the block file.\n      initializeHeader(null, blockInput.getFilePointer());\n      if (blockHeader == null) {\n        // No more block for the field.\n        return null;\n      }\n      readLineInBlock();\n    }\n    return term();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","sourceNew":"  /**\n   * Moves to the next term line and reads it, it may be in the next block.\n   * The term details are not read yet. They will be read only when needed\n   * with {@link #readTermStateIfNotRead()}.\n   *\n   * @return The read term bytes; or null if there is no more term for the field.\n   */\n  protected BytesRef nextTerm() throws IOException {\n    if (blockHeader == null) {\n      // Read the first block for the field.\n      initializeHeader(null, fieldMetadata.getFirstBlockStartFP());\n      if (blockHeader == null) {\n        throw newCorruptIndexException(\"Illegal absence of first block\", fieldMetadata.getFirstBlockStartFP());\n      }\n    }\n    if (readLineInBlock() == null) {\n      // No more line in the current block.\n      // Read the next block starting at the current file pointer in the block file.\n      initializeHeader(null, blockInput.getFilePointer());\n      if (blockHeader == null) {\n        // No more block for the field.\n        return null;\n      }\n      readLineInBlock();\n    }\n    return term();\n  }\n\n","sourceOld":"  /**\n   * Moves to the next term line and reads it, it may be in the next block.\n   * The term details are not read yet. They will be read only when needed\n   * with {@link #readTermStateIfNotRead()}.\n   *\n   * @return The read term bytes; or null if there is no more term for the field.\n   */\n  protected BytesRef nextTerm() throws IOException {\n    if (blockHeader == null) {\n      // Read the first block for the field.\n      initializeHeader(null, fieldMetadata.getFirstBlockStartFP());\n      assert blockHeader != null;\n    }\n    if (readLineInBlock() == null) {\n      // No more line in the current block.\n      // Read the next block starting at the current file pointer in the block file.\n      initializeHeader(null, blockInput.getFilePointer());\n      if (blockHeader == null) {\n        // No more block for the field.\n        return null;\n      }\n      readLineInBlock();\n    }\n    return term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockReader#nextTerm().mjava","sourceNew":"  /**\n   * Moves to the next term line and reads it, it may be in the next block.\n   * The term details are not read yet. They will be read only when needed\n   * with {@link #readTermStateIfNotRead()}.\n   *\n   * @return The read term bytes; or null if there is no more term for the field.\n   */\n  protected BytesRef nextTerm() throws IOException {\n    if (blockHeader == null) {\n      // Read the first block for the field.\n      initializeHeader(null, fieldMetadata.getFirstBlockStartFP());\n      if (blockHeader == null) {\n        throw newCorruptIndexException(\"Illegal absence of first block\", fieldMetadata.getFirstBlockStartFP());\n      }\n    }\n    if (readLineInBlock() == null) {\n      // No more line in the current block.\n      // Read the next block starting at the current file pointer in the block file.\n      initializeHeader(null, blockInput.getFilePointer());\n      if (blockHeader == null) {\n        // No more block for the field.\n        return null;\n      }\n      readLineInBlock();\n    }\n    return term();\n  }\n\n","sourceOld":"  /**\n   * Moves to the next term line and reads it, it may be in the next block.\n   * The term details are not read yet. They will be read only when needed\n   * with {@link #readTermStateIfNotRead()}.\n   *\n   * @return The read term bytes; or null if there is no more term for the field.\n   */\n  protected BytesRef nextTerm() throws IOException {\n    if (blockHeader == null) {\n      // Read the first block for the field.\n      initializeHeader(null, fieldMetadata.getFirstBlockStartFP());\n      assert blockHeader != null;\n    }\n    if (readLineInBlock() == null) {\n      // No more line in the current block.\n      // Read the next block starting at the current file pointer in the block file.\n      initializeHeader(null, blockInput.getFilePointer());\n      if (blockHeader == null) {\n        // No more block for the field.\n        return null;\n      }\n      readLineInBlock();\n    }\n    return term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}