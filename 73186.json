{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","commits":[{"id":"68423be363a30c5a005b0eb6830c749d93b2b8db","date":1454893700,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForDocCount(long expectedNumFound, long waitMillis, String failureMessage)\n      throws SolrServerException, IOException, InterruptedException {\n    RTimer timer = new RTimer();\n    long timeout = (long)timer.getTime() + waitMillis;\n    while (cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound() != expectedNumFound) {\n      if (timeout <= (long)timer.getTime()) {\n        fail(failureMessage);\n      }\n      Thread.sleep(100);\n    }\n\n    for (SolrClient client : clients) {\n      assertEquals(failureMessage, expectedNumFound, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bbe19aa0bae57e25d17544f8e883d688601a5d38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbe19aa0bae57e25d17544f8e883d688601a5d38","date":1454989105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","sourceNew":"  // Insure that total docs found is the expected number.\n  private void waitForDocCount(long expectedNumFound, long waitMillis, String failureMessage)\n      throws Exception {\n    RTimer timer = new RTimer();\n    long timeout = (long)timer.getTime() + waitMillis;\n    \n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    DocCollection dColl = clusterState.getCollection(DEFAULT_COLLECTION);\n    long docTotal = -1; // Could use this for 0 hits too!\n    \n    while (docTotal != expectedNumFound && timeout > (long) timer.getTime()) {\n      docTotal = checkSlicesSameCounts(dColl);\n      if (docTotal != expectedNumFound) {\n        Thread.sleep(100);\n      }\n    }\n    // We could fail here if we broke out of the above because we exceeded the time allowed.\n    assertEquals(failureMessage, expectedNumFound, docTotal);\n\n    // This should be redundant, but it caught a test error after all.\n    for (SolrClient client : clients) {\n      assertEquals(failureMessage, expectedNumFound, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void waitForDocCount(long expectedNumFound, long waitMillis, String failureMessage)\n      throws SolrServerException, IOException, InterruptedException {\n    RTimer timer = new RTimer();\n    long timeout = (long)timer.getTime() + waitMillis;\n    while (cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound() != expectedNumFound) {\n      if (timeout <= (long)timer.getTime()) {\n        fail(failureMessage);\n      }\n      Thread.sleep(100);\n    }\n\n    for (SolrClient client : clients) {\n      assertEquals(failureMessage, expectedNumFound, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":["68423be363a30c5a005b0eb6830c749d93b2b8db"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForDocCount(long,long,String).mjava","sourceNew":"  // Ensure that total docs found is the expected number.\n  private void waitForDocCount(long expectedNumFound, long waitMillis, String failureMessage)\n      throws Exception {\n    AtomicLong total = new AtomicLong(-1);\n    try {\n      getCommonCloudSolrClient().getZkStateReader().waitForState(DEFAULT_COLLECTION, waitMillis, TimeUnit.MILLISECONDS, (n, c) -> {\n        long docTotal;\n        try {\n          docTotal = checkSlicesSameCounts(c);\n        } catch (SolrServerException | IOException e) {\n          throw new RuntimeException(e);\n        }\n        total.set(docTotal);\n        if (docTotal == expectedNumFound) {\n          return true;\n        }\n        return false;\n      });\n    } catch (TimeoutException | InterruptedException e) {\n     \n    }\n    // We could fail here if we broke out of the above because we exceeded the time allowed.\n    assertEquals(failureMessage, expectedNumFound, total.get());\n\n    // This should be redundant, but it caught a test error after all.\n    for (SolrClient client : clients) {\n      assertEquals(failureMessage, expectedNumFound, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  // Insure that total docs found is the expected number.\n  private void waitForDocCount(long expectedNumFound, long waitMillis, String failureMessage)\n      throws Exception {\n    RTimer timer = new RTimer();\n    long timeout = (long)timer.getTime() + waitMillis;\n    \n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    DocCollection dColl = clusterState.getCollection(DEFAULT_COLLECTION);\n    long docTotal = -1; // Could use this for 0 hits too!\n    \n    while (docTotal != expectedNumFound && timeout > (long) timer.getTime()) {\n      docTotal = checkSlicesSameCounts(dColl);\n      if (docTotal != expectedNumFound) {\n        Thread.sleep(100);\n      }\n    }\n    // We could fail here if we broke out of the above because we exceeded the time allowed.\n    assertEquals(failureMessage, expectedNumFound, docTotal);\n\n    // This should be redundant, but it caught a test error after all.\n    for (SolrClient client : clients) {\n      assertEquals(failureMessage, expectedNumFound, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n  }\n\n","bugFix":["bbe19aa0bae57e25d17544f8e883d688601a5d38","68423be363a30c5a005b0eb6830c749d93b2b8db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68423be363a30c5a005b0eb6830c749d93b2b8db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bbe19aa0bae57e25d17544f8e883d688601a5d38"],"bbe19aa0bae57e25d17544f8e883d688601a5d38":["68423be363a30c5a005b0eb6830c749d93b2b8db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"68423be363a30c5a005b0eb6830c749d93b2b8db":["bbe19aa0bae57e25d17544f8e883d688601a5d38"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe19aa0bae57e25d17544f8e883d688601a5d38":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68423be363a30c5a005b0eb6830c749d93b2b8db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}