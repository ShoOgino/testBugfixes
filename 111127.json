{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"/dev/null","sourceNew":"  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d1475fdbacd73c160adc96a10aadc123d489b583"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45c3e698a8e53992ec65256740810a101c52247d","date":1140729061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    SolrInfoRegistry.getRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    SolrInfoRegistry.getRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    SolrInfoRegistry.getRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    core.getInfoRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    SolrInfoRegistry.getRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    // unregister first, so no management actions are tried on a closing searcher.\n    core.getInfoRegistry().remove(name);\n\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.fine(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ceb8ef10f044820fbd058f02d5a8e26539d255c","date":1242149378,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      super.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"029ffe7502a7a8ff1f425020bc204311ade99687","date":1243301392,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      super.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      super.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      searcher.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d1475fdbacd73c160adc96a10aadc123d489b583"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1475fdbacd73c160adc96a10aadc123d489b583","date":1246052926,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n    try {\n      super.close();\n    }\n    finally {\n      if(closeReader) reader.close();\n      for (SolrCache cache : cacheList) {\n        cache.close();\n      }\n    }\n  }\n\n","bugFix":["ac3e6437547a34cce2b5405ce0cf9e3af578401e","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["029ffe7502a7a8ff1f425020bc204311ade99687"],"6d6338c87060be5f66757a94945975f3bbd377a9":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"45c3e698a8e53992ec65256740810a101c52247d":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"029ffe7502a7a8ff1f425020bc204311ade99687":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"d1475fdbacd73c160adc96a10aadc123d489b583":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["45c3e698a8e53992ec65256740810a101c52247d"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"ad94625fb8d088209f46650c8097196fec67f00c":["d1475fdbacd73c160adc96a10aadc123d489b583"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["d1475fdbacd73c160adc96a10aadc123d489b583"],"6d6338c87060be5f66757a94945975f3bbd377a9":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"45c3e698a8e53992ec65256740810a101c52247d":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"029ffe7502a7a8ff1f425020bc204311ade99687":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"79c686ad76bb74d110ec3c727914fb5693a7da23":["6d6338c87060be5f66757a94945975f3bbd377a9"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["029ffe7502a7a8ff1f425020bc204311ade99687"],"d1475fdbacd73c160adc96a10aadc123d489b583":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["45c3e698a8e53992ec65256740810a101c52247d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}