{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","commits":[{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","sourceNew":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","sourceNew":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.setMaxShardsPerNode(1);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ExecutePlanActionTest#testTaskFail().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTaskFail() throws Exception  {\n    TestInjection.failInExecutePlanAction = true;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String triggerName = \"node_lost_trigger3\";\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : '\" + triggerName + \"',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'start', 'class' : '\" + StartAction.class.getName() + \"'},\" +\n        \"{'name':'compute_plan','class':'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'finish','class':'\" + FinishAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String collectionName = \"testTaskFail\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        collectionName, clusterShape(1, 2));\n\n    // don't stop the jetty that runs our SolrCloudManager\n    JettySolrRunner runner = cluster.stopJettySolrRunner(1);\n    cluster.waitForJettyToStop(runner);\n\n    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not start processing event in time\", await);\n    await = finishedProcessing.await(2, TimeUnit.SECONDS);\n    assertFalse(\"finished processing event but should fail\", await);\n\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + triggerName + \"/execute_plan\";\n    assertTrue(path + \" does not exist\", zkClient().exists(path, true));\n    List<String> requests = zkClient().getChildren(path, null, true);\n    assertTrue(\"there should be no requests pending but got \" + requests, requests.isEmpty());\n\n    // the task never completed - we actually lost a replica\n    try {\n      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, 2));\n      fail(\"completed a task that should have failed\");\n    } catch (TimeoutException te) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"39561034e67ea008831f095a2f7be7fcdbd37f53":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}