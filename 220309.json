{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","commits":[{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                           0, 0, true, false, Integer.MAX_VALUE,\n                                                           outputs, false,\n                                                           PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(FST<BytesRef> subIndex : block.subIndices) {\n            append(indexBuilder, subIndex, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                           0, 0, true, false, Integer.MAX_VALUE,\n                                                           outputs, false,\n                                                           PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(FST<BytesRef> subIndex : block.subIndices) {\n            append(indexBuilder, subIndex, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                           0, 0, true, false, Integer.MAX_VALUE,\n                                                           outputs, false,\n                                                           PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(FST<BytesRef> subIndex : block.subIndices) {\n            append(indexBuilder, subIndex, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRefBuilder).mjava","sourceNew":null,"sourceOld":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRefBuilder scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                           0, 0, true, false, Integer.MAX_VALUE,\n                                                           outputs, false,\n                                                           PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(FST<BytesRef> subIndex : block.subIndices) {\n            append(indexBuilder, subIndex, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}