{"path":"lucene/src/test/org/apache/lucene/search/TestWildcard#testDeprecatedTermEnum().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testDeprecatedTermEnum().mjava","pathOld":"/dev/null","sourceNew":"  @Deprecated\n  public void testDeprecatedTermEnum() throws Exception {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new OldWildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new OldWildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new OldWildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new OldWildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new OldWildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testDeprecatedTermEnum().mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public void testDeprecatedTermEnum() throws Exception {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new OldWildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new OldWildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new OldWildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new OldWildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new OldWildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testDeprecatedTermEnum().mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public void testDeprecatedTermEnum() throws Exception {\n    RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\"});\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    Query query1 = new TermQuery(new Term(\"body\", \"metal\"));\n    Query query2 = new OldWildcardQuery(new Term(\"body\", \"metal*\"));\n    Query query3 = new OldWildcardQuery(new Term(\"body\", \"m*tal\"));\n    Query query4 = new OldWildcardQuery(new Term(\"body\", \"m*tal*\"));\n    Query query5 = new OldWildcardQuery(new Term(\"body\", \"m*tals\"));\n\n    BooleanQuery query6 = new BooleanQuery();\n    query6.add(query5, BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query7 = new BooleanQuery();\n    query7.add(query3, BooleanClause.Occur.SHOULD);\n    query7.add(query5, BooleanClause.Occur.SHOULD);\n\n    // Queries do not automatically lower-case search terms:\n    Query query8 = new OldWildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n    assertMatches(searcher, query1, 1);\n    assertMatches(searcher, query2, 2);\n    assertMatches(searcher, query3, 1);\n    assertMatches(searcher, query4, 2);\n    assertMatches(searcher, query5, 1);\n    assertMatches(searcher, query6, 1);\n    assertMatches(searcher, query7, 2);\n    assertMatches(searcher, query8, 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tall\")), 0);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal\")), 1);\n    assertMatches(searcher, new OldWildcardQuery(new Term(\"body\", \"*tal*\")), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}