{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testOlsRegress().mjava","commits":[{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testOlsRegress().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOlsRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                       \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                       \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                       \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n                       \"e=transpose(matrix(a, b, c)),\" +\n                       \"f=olsRegress(e, d),\" +\n                       \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map regression = (Map)tuples.get(0).get(\"f\");\n\n    Number rsquared = (Number)regression.get(\"RSquared\");\n\n    assertEquals(rsquared.doubleValue(), 0.9667887860584002, .000001);\n\n    List<Number> regressionParameters = (List<Number>)regression.get(\"regressionParameters\");\n\n    assertEquals(regressionParameters.get(0).doubleValue(), 7.676028542255028, .0001);\n    assertEquals(regressionParameters.get(1).doubleValue(), 3.661604009261836, .0001);\n    assertEquals(regressionParameters.get(2).doubleValue(), 7.621051256504592, .0001);\n    assertEquals(regressionParameters.get(3).doubleValue(), 0.8284680662898674, .0001);\n\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n\n    assertEquals(predictions.get(0).doubleValue(), 81.56082305847914, .0001);\n    assertEquals(predictions.get(1).doubleValue(), 106.40333675525883, .0001);\n    assertEquals(predictions.get(2).doubleValue(), 55.23044372150484, .0001);\n    assertEquals(predictions.get(3).doubleValue(), 120.97932137751451, .0001);\n    assertEquals(predictions.get(4).doubleValue(), 49.90981180846799, .0001);\n    assertEquals(predictions.get(5).doubleValue(), 32.53654268030196, .0001);\n    assertEquals(predictions.get(6).doubleValue(), 77.59681482774931, .0001);\n    assertEquals(predictions.get(7).doubleValue(), 103.43841512086125, .0001);\n    assertEquals(predictions.get(8).doubleValue(), 138.88047884217636, .0001);\n    assertEquals(predictions.get(9).doubleValue(), 85.86401719768607, .0001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testOlsRegress().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testOlsRegress().mjava","sourceNew":"  @Test\n  public void testOlsRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                       \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                       \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                       \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n                       \"e=transpose(matrix(a, b, c)),\" +\n                       \"f=olsRegress(e, d),\" +\n                       \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map regression = (Map)tuples.get(0).get(\"f\");\n\n    Number rsquared = (Number)regression.get(\"RSquared\");\n\n    assertEquals(rsquared.doubleValue(), 0.9667887860584002, .000001);\n\n    List<Number> regressionParameters = (List<Number>)regression.get(\"regressionParameters\");\n\n    assertEquals(regressionParameters.get(0).doubleValue(), 7.676028542255028, .0001);\n    assertEquals(regressionParameters.get(1).doubleValue(), 3.661604009261836, .0001);\n    assertEquals(regressionParameters.get(2).doubleValue(), 7.621051256504592, .0001);\n    assertEquals(regressionParameters.get(3).doubleValue(), 0.8284680662898674, .0001);\n\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n\n    assertEquals(predictions.get(0).doubleValue(), 81.56082305847914, .0001);\n    assertEquals(predictions.get(1).doubleValue(), 106.40333675525883, .0001);\n    assertEquals(predictions.get(2).doubleValue(), 55.23044372150484, .0001);\n    assertEquals(predictions.get(3).doubleValue(), 120.97932137751451, .0001);\n    assertEquals(predictions.get(4).doubleValue(), 49.90981180846799, .0001);\n    assertEquals(predictions.get(5).doubleValue(), 32.53654268030196, .0001);\n    assertEquals(predictions.get(6).doubleValue(), 77.59681482774931, .0001);\n    assertEquals(predictions.get(7).doubleValue(), 103.43841512086125, .0001);\n    assertEquals(predictions.get(8).doubleValue(), 138.88047884217636, .0001);\n    assertEquals(predictions.get(9).doubleValue(), 85.86401719768607, .0001);\n  }\n\n","sourceOld":"  @Test\n  public void testOlsRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                       \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                       \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                       \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n                       \"e=transpose(matrix(a, b, c)),\" +\n                       \"f=olsRegress(e, d),\" +\n                       \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map regression = (Map)tuples.get(0).get(\"f\");\n\n    Number rsquared = (Number)regression.get(\"RSquared\");\n\n    assertEquals(rsquared.doubleValue(), 0.9667887860584002, .000001);\n\n    List<Number> regressionParameters = (List<Number>)regression.get(\"regressionParameters\");\n\n    assertEquals(regressionParameters.get(0).doubleValue(), 7.676028542255028, .0001);\n    assertEquals(regressionParameters.get(1).doubleValue(), 3.661604009261836, .0001);\n    assertEquals(regressionParameters.get(2).doubleValue(), 7.621051256504592, .0001);\n    assertEquals(regressionParameters.get(3).doubleValue(), 0.8284680662898674, .0001);\n\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n\n    assertEquals(predictions.get(0).doubleValue(), 81.56082305847914, .0001);\n    assertEquals(predictions.get(1).doubleValue(), 106.40333675525883, .0001);\n    assertEquals(predictions.get(2).doubleValue(), 55.23044372150484, .0001);\n    assertEquals(predictions.get(3).doubleValue(), 120.97932137751451, .0001);\n    assertEquals(predictions.get(4).doubleValue(), 49.90981180846799, .0001);\n    assertEquals(predictions.get(5).doubleValue(), 32.53654268030196, .0001);\n    assertEquals(predictions.get(6).doubleValue(), 77.59681482774931, .0001);\n    assertEquals(predictions.get(7).doubleValue(), 103.43841512086125, .0001);\n    assertEquals(predictions.get(8).doubleValue(), 138.88047884217636, .0001);\n    assertEquals(predictions.get(9).doubleValue(), 85.86401719768607, .0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"]},"commit2Childs":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}