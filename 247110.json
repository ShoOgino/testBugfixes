{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new int [] { Integer.parseInt(s) };\n    }\n    \n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new int [] { Integer.parseInt(s) };\n    }\n    \n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","date":1269463784,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new int [] { Integer.parseInt(s) };\n    }\n    \n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToIntArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"10:100:5\" return int[]{10,100,5}. \n  private int[] propToIntArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new int[]{Integer.parseInt(s)};\n    }\n\n    ArrayList<Integer> a = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Integer.valueOf(t));\n    }\n    int res[] = new int[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).intValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}