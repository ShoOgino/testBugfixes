{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","pathOld":"/dev/null","sourceNew":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.getDirectory(indexDir, true));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a3fa9f5fdf883c9a8a03f09d44f2200a4638254","date":1175552804,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","sourceNew":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.getDirectory(indexDir));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","sourceOld":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.getDirectory(indexDir, true));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","sourceNew":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.open(indexDir));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","sourceOld":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.getDirectory(indexDir));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f55f56ccbdfcad354e67291558fdec36be2341c8","date":1244730392,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#benchmark(File,BenchmarkOptions).mjava","sourceNew":null,"sourceOld":"    public TestData [] benchmark(File workingDir, BenchmarkOptions opts) throws Exception\n    {\n        StandardOptions options = (StandardOptions) opts;\n        workingDir.mkdirs();\n        File sourceDir = getSourceDirectory(workingDir);\n\n        sourceDir.mkdirs();\n        File indexDir = new File(workingDir, INDEX_DIR);\n        indexDir.mkdirs();\n        Analyzer a = new StandardAnalyzer();\n        List queryList = new ArrayList(20);\n        queryList.addAll(Arrays.asList(ReutersQueries.STANDARD_QUERIES));\n        queryList.addAll(Arrays.asList(ReutersQueries.getPrebuiltQueries(\"body\")));\n        Query[] qs = createQueries(queryList, a);\n        // Here you can limit the set of query benchmarks\n        QueryData[] qds = QueryData.getAll(qs);\n        // Here you can narrow down the set of test parameters\n        TestData[] params = TestData.getTestDataMinMaxMergeAndMaxBuffered(new File[]{sourceDir/*, jumboDir*/}, new Analyzer[]{a});//TestData.getAll(new File[]{sourceDir, jumboDir}, new Analyzer[]{a});\n        System.out.println(\"Testing \" + params.length + \" different permutations.\");\n        for (int i = 0; i < params.length; i++)\n        {\n            try\n            {\n                reset(indexDir);\n                params[i].setDirectory(FSDirectory.open(indexDir));\n                params[i].setQueries(qds);\n                System.out.println(params[i]);\n                runBenchmark(params[i], options);\n                // Here you can collect and output the runData for further processing.\n                System.out.println(params[i].showRunData(params[i].getId()));\n                //bench.runSearchBenchmark(queries, dir);\n                params[i].getDirectory().close();\n                System.runFinalization();\n                System.gc();\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n                System.out.println(\"EXCEPTION: \" + e.getMessage());\n                //break;\n            }\n        }\n        return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f55f56ccbdfcad354e67291558fdec36be2341c8":["ba712167ee848727018d8b77aa0c273839fbe15c"],"0a3fa9f5fdf883c9a8a03f09d44f2200a4638254":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"ba712167ee848727018d8b77aa0c273839fbe15c":["0a3fa9f5fdf883c9a8a03f09d44f2200a4638254"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["0a3fa9f5fdf883c9a8a03f09d44f2200a4638254"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"f55f56ccbdfcad354e67291558fdec36be2341c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a3fa9f5fdf883c9a8a03f09d44f2200a4638254":["ba712167ee848727018d8b77aa0c273839fbe15c"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}