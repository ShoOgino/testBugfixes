{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","sourceNew":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testMultipleDifferentSpanQueries() throws IOException {\n    \n    final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery1, BooleanClause.Occur.MUST);\n    query.add(spanQuery2, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"D\", \"A\"};\n    // these values were pre LUCENE-413\n    // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n    final float[] expectedScores = new float[] {1.0191123f, 0.93163157f};\n    assertHits(searcher2, query, \"multiple different span queries\",\n        expectedIds, expectedScores);\n  }\n\n","sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testMultipleDifferentSpanQueries() throws IOException {\n    \n    final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery1, BooleanClause.Occur.MUST);\n    query.add(spanQuery2, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"D\", \"A\"};\n    // these values were pre LUCENE-413\n    // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n    final float[] expectedScores = new float[] {1.0191123f, 0.93163157f};\n    assertHits(searcher2, query, \"multiple different span queries\",\n        expectedIds, expectedScores);\n  }\n\n","sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testMultipleDifferentSpanQueries() throws IOException {\n\n        final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery1, BooleanClause.Occur.MUST);\n        query.add(spanQuery2, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"D\", \"A\" };\n        // these values were pre LUCENE-413\n        // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n        final float[] expectedScores = new float[] { 1.0191123f, 0.93163157f };\n        assertHits(searcher2, query, \"multiple different span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testMultipleDifferentSpanQueries().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testMultipleDifferentSpanQueries() throws IOException {\n    \n    final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery1, BooleanClause.Occur.MUST);\n    query.add(spanQuery2, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"D\", \"A\"};\n    // these values were pre LUCENE-413\n    // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n    final float[] expectedScores = new float[] {1.0191123f, 0.93163157f};\n    assertHits(searcher2, query, \"multiple different span queries\",\n        expectedIds, expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testMultipleDifferentSpanQueries() throws IOException {\n    \n    final Query spanQuery1 = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final Query spanQuery2 = new SpanTermQuery(new Term(FIELD_TEXT, \"we\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery1, BooleanClause.Occur.MUST);\n    query.add(spanQuery2, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"D\", \"A\"};\n    // these values were pre LUCENE-413\n    // final float[] expectedScores = new float[] { 0.93163157f, 0.20698164f };\n    final float[] expectedScores = new float[] {1.0191123f, 0.93163157f};\n    assertHits(searcher2, query, \"multiple different span queries\",\n        expectedIds, expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c084e47df29de3330311d69dabf515ceaa989512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}