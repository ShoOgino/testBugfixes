{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","commits":[{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtraFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtrasFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","sourceOld":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtraFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtrasFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","sourceOld":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtraFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtrasFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","sourceOld":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtraFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtrasFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","sourceOld":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtraFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCreateTempOutput().mjava","sourceNew":"  public void testCreateTempOutput() throws Throwable {\n    try (Directory dir = getDirectory(createTempDir())) {\n      List<String> names = new ArrayList<>();\n      int iters = atLeast(50);\n      for (int iter = 0; iter < iters; iter++) {\n        IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n        names.add(out.getName());\n        out.writeVInt(iter);\n        out.close();\n      }\n      for (int iter = 0; iter < iters; iter++) {\n        IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n        assertEquals(iter, in.readVInt());\n        in.close();\n      }\n\n      Set<String> files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file)) // remove any ExtrasFS stuff.\n          .collect(Collectors.toSet());\n\n      assertEquals(new HashSet<String>(names), files);\n    }\n  }\n\n","sourceOld":"  public void testCreateTempOutput() throws Throwable {\n    Directory dir = getDirectory(createTempDir());\n    List<String> names = new ArrayList<>();\n    int iters = atLeast(50);\n    for(int iter=0;iter<iters;iter++) {\n      IndexOutput out = dir.createTempOutput(\"foo\", \"bar\", newIOContext(random()));\n      names.add(out.getName());\n      out.writeVInt(iter);\n      out.close();\n    }\n    for(int iter=0;iter<iters;iter++) {\n      IndexInput in = dir.openInput(names.get(iter), newIOContext(random()));\n      assertEquals(iter, in.readVInt());\n      in.close();\n    }\n    Set<String> files = new HashSet<String>(Arrays.asList(dir.listAll()));\n    // In case ExtrasFS struck:\n    files.remove(\"extra0\");\n    assertEquals(new HashSet<String>(names), files);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["5a207d19eac354d649c3f0e2cce070017c78125e"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}