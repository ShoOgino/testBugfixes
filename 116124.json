{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  protected static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33","date":1459795888,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","sourceNew":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  protected static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","sourceOld":"  protected static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  protected static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5864f13b0b1ae08430bed46d2fcbc5f5c7005195","date":1460068279,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","sourceNew":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  private static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","sourceOld":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  protected static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b7a8973b4a2628b97962e152e513b0d3af02c8","date":1460145192,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#computeAngle(GeoPoint,double,double,double,double).mjava","sourceNew":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  private static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // And we rotate in the negative direction.\n    // So:\n    // x1 = x0 cos az + y0 sin az\n    // y1 = - x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al + z1 sin al\n    // y2 = y1\n    // z2 = - x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude + point.y * sinLongitude;\n    final double y1 = - point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n      \n    // final double x2 = x1 * cosLatitude + z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = - x1 * sinLatitude + z1 * cosLatitude;\n    \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","sourceOld":"  /** Compute the angle for a point given rotation information.\n    * @param point is the point to assess\n    * @param sinLatitude the sine of the latitude\n    * @param cosLatitude the cosine of the latitude\n    * @param sinLongitude the sine of the longitude\n    * @param cosLongitude the cosine of the longitude\n    * @return the angle of rotation, or null if not computable\n    */\n  private static Double computeAngle(final GeoPoint point,\n    final double sinLatitude,\n    final double cosLatitude,\n    final double sinLongitude,\n    final double cosLongitude) {\n    // Coordinate rotation formula:\n    // x1 = x0 cos T - y0 sin T\n    // y1 = x0 sin T + y0 cos T\n    // We need to rotate the point in question into the coordinate frame specified by\n    // the lat and lon trig functions.\n    // To do this we need to do two rotations on it.  First rotation is in x/y.  Second rotation is in x/z.\n    // So:\n    // x1 = x0 cos az - y0 sin az\n    // y1 = x0 sin az + y0 cos az\n    // z1 = z0\n    // x2 = x1 cos al - z1 sin al\n    // y2 = y1\n    // z2 = x1 sin al + z1 cos al\n      \n    final double x1 = point.x * cosLongitude - point.y * sinLongitude;\n    final double y1 = point.x * sinLongitude + point.y * cosLongitude;\n    final double z1 = point.z;\n    //final double x2 = x1 * cosLatitude - z1 * sinLatitude;\n    final double y2 = y1;\n    final double z2 = x1 * sinLatitude + z1 * cosLatitude;\n      \n    // Now we should be looking down the X axis; the original point has rotated coordinates (N, 0, 0).\n    // So we can just compute the angle using y2 and z2.  (If Math.sqrt(y2*y2 + z2 * z2) is 0.0, then the point is on the pole and we need another one).\n    if (Math.sqrt(y2*y2 + z2*z2) < Vector.MINIMUM_RESOLUTION) {\n      return null;\n    }\n    \n    return Math.atan2(z2, y2);\n  }\n\n","bugFix":["40aa98241c87d86a0077beb8023713d93a0becfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5864f13b0b1ae08430bed46d2fcbc5f5c7005195":["a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33"],"a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33":["40aa98241c87d86a0077beb8023713d93a0becfe"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["5864f13b0b1ae08430bed46d2fcbc5f5c7005195"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"]},"commit2Childs":{"5864f13b0b1ae08430bed46d2fcbc5f5c7005195":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33":["5864f13b0b1ae08430bed46d2fcbc5f5c7005195","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"40aa98241c87d86a0077beb8023713d93a0becfe":["a5b730899c2f41b39e27dfaebc0bf9ec1dec9f33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}