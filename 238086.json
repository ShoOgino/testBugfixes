{"path":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#dynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  private void dynamicLoading() throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63e47b9375302c261334d5181cae6d68d08ed1a3","date":1423988473,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSysColl(new HttpSolrClient(baseURL,randomClient.getHttpClient()));\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aa5940fed2557a584bfda309190e4296caaa6d2","date":1425838165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    setupHarnesses();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'lib':'test','version':'1'}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"lib\"),\n        \"test\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\".system collection not available\", map.get(\"msg\"));\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"no such blob or version available: test/1\", map.get(\"msg\"));\n    ByteBuffer jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandler.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,1);\n\n    boolean success= false;\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandler.class.getName().equals(map.get(\"class\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(new String( ZkStateReader.toJSON(map) , StandardCharsets.UTF_8), success );\n\n    jar = generateZip( TestDynamicLoading.class,BlobStoreTestRequestHandlerV2.class);\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, jar,2);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandlerV2' , 'lib':'test','version':2}\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"version\"),\n        2l,10);\n\n    success= false;\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(BlobStoreTestRequestHandlerV2.class.getName().equals(map.get(\"class\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(\"New version of class is not loaded \" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    for(int i=0;i<50;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val changed\".equals(map.get(\"x\"))){\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"listener did not get triggered\" + new String(ZkStateReader.toJSON(map), StandardCharsets.UTF_8), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(new HttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertEquals(TestBlobHandler.getAsString(map), \".system collection not available\", map.get(\"msg\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertEquals(\"full output \" + TestBlobHandler.getAsString(map), \"no such blob or version available: colltest/1\" , map.get(\"msg\"));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' , 'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1?wt=json\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay?wt=json\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params?wt=json\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(TestBlobHandler.getAsString(map), map = (Map) map.get(\"error\"));\n    assertTrue(TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + TestBlobHandler.getAsString(map), map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such resource available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d","date":1563898669,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such resource available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such resource available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such resource available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such resource available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicLoading#testDynamicLoading().mjava","sourceNew":null,"sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  //17-Aug-2018 commented @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Jul-2018\n  public void testDynamicLoading() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    setupRestTestHarnesses();\n\n    String blobName = \"colltest\";\n    boolean success = false;\n\n\n    HttpSolrClient randomClient = (HttpSolrClient) clients.get(random().nextInt(clients.size()));\n    String baseURL = randomClient.getBaseURL();\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf('/'));\n    String payload = \"{\\n\" +\n        \"'add-runtimelib' : { 'name' : 'colltest' ,'version':1}\\n\" +\n        \"}\";\n    RestTestHarness client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        1l, 10);\n\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/test1', 'class': 'org.apache.solr.core.BlobStoreTestRequestHandler' ,registerPath: '/solr,/v2',  'runtimeLib' : true }\\n\" +\n        \"}\";\n\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client,\"/config\",payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/test1\", \"class\"),\n        \"org.apache.solr.core.BlobStoreTestRequestHandler\",10);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n    assertNotNull(map.toString(), map = (Map) map.get(\"error\"));\n    assertTrue(map.toString(), map.get(\"msg\").toString().contains(\".system collection not available\"));\n\n\n    TestBlobHandler.createSystemCollection(getHttpSolrClient(baseURL, randomClient.getHttpClient()));\n    waitForRecoveriesToFinish(\".system\", true);\n\n    map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n\n\n    assertNotNull(map = (Map) map.get(\"error\"));\n    assertTrue(\"full output \" + map, map.get(\"msg\").toString().contains(\"no such blob or version available: colltest/1\" ));\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n\n\n\n\n    for(int i=0;i<100;i++) {\n      map = TestSolrConfigHandler.getRespMap(\"/test1\", client);\n      if(\"X val\".equals(map.get(\"x\"))){\n         success = true;\n         break;\n      }\n      Thread.sleep(100);\n    }\n    ByteBuffer jar = null;\n\n//     jar = persistZip(\"/tmp/runtimelibs.jar.bin\", TestDynamicLoading.class, RuntimeLibReqHandler.class, RuntimeLibResponseWriter.class, RuntimeLibSearchComponent.class);\n//    if(true) return;\n\n    jar = getFileContent(\"runtimecode/runtimelibs.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 1);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'runtimeLib':true },\" +\n        \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'runtimeLib':true },\" +\n        \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'runtimeLib':true }\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/runtime\", \"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, \"org.apache.solr.core.RuntimeLibResponseWriter\", asList(\"overlay\", \"queryResponseWriter\", \"json1\", \"class\"));\n    compareValues(result, \"org.apache.solr.core.RuntimeLibSearchComponent\", asList(\"overlay\", \"searchComponent\", \"get\", \"class\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime\",\n        null,\n        Arrays.asList(\"class\"),\n        \"org.apache.solr.core.RuntimeLibReqHandler\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/runtime?wt=json1\",\n        null,\n        Arrays.asList(\"wt\"),\n        \"org.apache.solr.core.RuntimeLibResponseWriter\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"get\"),\n        \"org.apache.solr.core.RuntimeLibSearchComponent\", 10);\n    compareValues(result, MemClassLoader.class.getName(), asList( \"loader\"));\n\n    jar = getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    TestBlobHandler.postAndCheck(cloudClient, baseURL, blobName, jar, 2);\n    payload = \"{\\n\" +\n        \"'update-runtimelib' : { 'name' : 'colltest' ,'version':2}\\n\" +\n        \"}\";\n    client = randomRestTestHarness();\n    TestSolrConfigHandler.runConfigCommand(client, \"/config\", payload);\n    TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/config/overlay\",\n        null,\n        Arrays.asList(\"overlay\", \"runtimeLib\", blobName, \"version\"),\n        2l, 10);\n\n    result = TestSolrConfigHandler.testForResponseElement(client,\n        null,\n        \"/get?abc=xyz\",\n        null,\n        Arrays.asList(\"Version\"),\n        \"2\", 10);\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/config/params\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"watched\", \"x\"),\n        \"X val\",\n        10);\n   result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'watched': {\" +\n        \"                    'x':'X val changed',\\n\" +\n        \"                    'y': 'Y val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n    TestSolrConfigHandler.runConfigCommand(client,\"/config/params\",payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        client,\n        null,\n        \"/test1\",\n        cloudClient,\n        Arrays.asList(\"x\"),\n        \"X val changed\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["0853c291617e0f9d0474b720bf609eb350e9225c"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7aa5940fed2557a584bfda309190e4296caaa6d2"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["713122036535651642e6d4fe57ce12b449e18473","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"c44cc06c26e456fe9c215072b79fce30babe3975":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"e98520789adb1d5ad05afb4956eca0944a929688":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["63e47b9375302c261334d5181cae6d68d08ed1a3","7aa5940fed2557a584bfda309190e4296caaa6d2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"713122036535651642e6d4fe57ce12b449e18473":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["e98520789adb1d5ad05afb4956eca0944a929688"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["713122036535651642e6d4fe57ce12b449e18473"],"7aa5940fed2557a584bfda309190e4296caaa6d2":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["abb23fcc2461782ab204e61213240feb77d355aa"],"a52341299179de5479672f7cf518bf4b173f34b3":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7aa5940fed2557a584bfda309190e4296caaa6d2","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"b0b597c65628ca9e73913a07e81691f8229bae35":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"abb23fcc2461782ab204e61213240feb77d355aa":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0853c291617e0f9d0474b720bf609eb350e9225c":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"713122036535651642e6d4fe57ce12b449e18473":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["7aa5940fed2557a584bfda309190e4296caaa6d2"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"7aa5940fed2557a584bfda309190e4296caaa6d2":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["ac1e7fa558287a811ea07634d815ee7b1c541284","936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}