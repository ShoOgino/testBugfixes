{"path":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.term()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopAnalyzer#testDefaults().mjava","sourceNew":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","sourceOld":"  public void testDefaults() throws IOException {\n    assertTrue(stop != null);\n    StringReader reader = new StringReader(\"This is a test of the english stop analyzer\");\n    TokenStream stream = stop.tokenStream(\"test\", reader);\n    assertTrue(stream != null);\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    \n    while (stream.incrementToken()) {\n      assertFalse(inValidTokens.contains(termAtt.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}