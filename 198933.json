{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClassSolrTestCase().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() throws Exception {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSolrTestCase() throws Exception {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() throws Exception {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() throws Exception {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db8c3036d7a71259ececaf30a59e9543ddba4131","date":1348441120,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec","date":1363621241,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea7b027695d1003f32a2b5587762e9d51d0d60e8","date":1370029251,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"enable.update.log\", \"true\"); // :nocommit:\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":["42d831088a676304af7fed98e4f7cfdbe6861c5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42d831088a676304af7fed98e4f7cfdbe6861c5f","date":1370043771,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"enable.update.log\", \"true\"); // :nocommit:\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":["ea7b027695d1003f32a2b5587762e9d51d0d60e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4","date":1375726719,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116ea8c885812b95ad3d7d232f1069ab3180d27","date":1376050559,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    \n    System.setProperty(\"useCompoundFile\", Boolean.toString(random().nextBoolean()));\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    sslConfig = getSSLConfig();\n    \n    \n    if(sslConfig != null && sslConfig.useSsl) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n      \n      // Turn off two-way SSL since it isn't configured below...\n      sslConfig.clientAuth = false;\n      HttpClientUtil.setConfigurer(new HttpClientConfigurer(){\n        @SuppressWarnings(\"deprecation\")\n        protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n          super.configure(httpClient, config);\n          SchemeRegistry registry = httpClient.getConnectionManager().getSchemeRegistry();\n          // Make sure no tests cheat by using HTTP\n          registry.unregister(\"http\");\n          try {\n            // Don't complain that we are using self-signed certs during the test\n            registry.register(new Scheme(\"https\", 443, new SSLSocketFactory(new TrustSelfSignedStrategy())));\n          } catch (KeyManagementException | UnrecoverableKeyException\n              | NoSuchAlgorithmException | KeyStoreException ex) {\n            throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", ex);\n          }\n        }\n      });\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9dee311b2816356910363a8d15fc076caf6367eb","date":1392012517,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    sslConfig = getSSLConfig();\n    \n    \n    if(sslConfig != null && sslConfig.useSsl) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n      \n      // Turn off two-way SSL since it isn't configured below...\n      sslConfig.clientAuth = false;\n      HttpClientUtil.setConfigurer(new HttpClientConfigurer(){\n        @SuppressWarnings(\"deprecation\")\n        protected void configure(DefaultHttpClient httpClient, SolrParams config) {\n          super.configure(httpClient, config);\n          SchemeRegistry registry = httpClient.getConnectionManager().getSchemeRegistry();\n          // Make sure no tests cheat by using HTTP\n          registry.unregister(\"http\");\n          try {\n            // Don't complain that we are using self-signed certs during the test\n            registry.register(new Scheme(\"https\", 443, new SSLSocketFactory(new TrustSelfSignedStrategy())));\n          } catch (KeyManagementException | UnrecoverableKeyException\n              | NoSuchAlgorithmException | KeyStoreException ex) {\n            throw new IllegalStateException(\"Unable to setup https scheme for HTTPClient to test SSL.\", ex);\n          }\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    dataDir = new File(TEMP_DIR,\n            \"solrtest-\" + cname + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.err.println(\"Creating dataDir: \" + dataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    \n    LEAVE_TEST_TMP_DIR_ANNOTATION = RandomizedContext.current().getTargetClass()\n        .isAnnotationPresent(SuppressTempDirCleanUp.class);\n    \n    boolean ensureClosed = !(LEAVE_TEST_TMP_DIR || LEAVE_TEST_TMP_DIR_ANNOTATION);\n    rootTmpDir = TestUtil.createTempDir(\"solrtest-\" + cname, null, ensureClosed);\n    initCoreDataDir = TestUtil.createTempDir(\"solrtest-\" + cname, rootTmpDir);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ce753c4d247e4c228cd4be8d287d16abf8c5091","date":1396025724,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    \n    LEAVE_TEST_TMP_DIR_ANNOTATION = RandomizedContext.current().getTargetClass()\n        .isAnnotationPresent(SuppressTempDirCleanUp.class);\n    \n    boolean ensureClosed = !(LEAVE_TEST_TMP_DIR || LEAVE_TEST_TMP_DIR_ANNOTATION);\n    rootTmpDir = TestUtil.createTempDir(\"solrtest-\" + cname, null, ensureClosed);\n    initCoreDataDir = TestUtil.createTempDir(\"solrtest-\" + cname, rootTmpDir, ensureClosed);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    \n    LEAVE_TEST_TMP_DIR_ANNOTATION = RandomizedContext.current().getTargetClass()\n        .isAnnotationPresent(SuppressTempDirCleanUp.class);\n    \n    boolean ensureClosed = !(LEAVE_TEST_TMP_DIR || LEAVE_TEST_TMP_DIR_ANNOTATION);\n    rootTmpDir = TestUtil.createTempDir(\"solrtest-\" + cname, null, ensureClosed);\n    initCoreDataDir = TestUtil.createTempDir(\"solrtest-\" + cname, rootTmpDir);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    // Create the root parent folder for all other temporary solr files. \n    rootTmpDir = TestUtil.createTempDir();\n\n    initCoreDataDir = TestUtil.createTempDir(\"init-core-data\", rootTmpDir);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    \n    LEAVE_TEST_TMP_DIR_ANNOTATION = RandomizedContext.current().getTargetClass()\n        .isAnnotationPresent(SuppressTempDirCleanUp.class);\n    \n    boolean ensureClosed = !(LEAVE_TEST_TMP_DIR || LEAVE_TEST_TMP_DIR_ANNOTATION);\n    rootTmpDir = TestUtil.createTempDir(\"solrtest-\" + cname, null, ensureClosed);\n    initCoreDataDir = TestUtil.createTempDir(\"solrtest-\" + cname, rootTmpDir, ensureClosed);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\");\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    // Create the root parent folder for all other temporary solr files. \n    rootTmpDir = TestUtil.createTempDir();\n\n    initCoreDataDir = TestUtil.createTempDir(\"init-core-data\", rootTmpDir);\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\");\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    String cname = getSimpleClassName();\n    dataDir = new File(TEMP_DIR,\n            \"solrtest-\" + cname + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.err.println(\"Creating dataDir: \" + dataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a9bd08fa75ea56615262bc147a18b8837cd7f11","date":1404759706,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\");\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\");\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n    \n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\");\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    startTrackingZkClients();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    setupLogging();\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    //will use ssl specific or default depending on sslConfig\n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ef99614729c6d6fb7f8a9055a7a442efa87cf8","date":1464951274,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#setupTestCases().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupTestCases() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#beforeClass().mjava","sourceNew":null,"sourceOld":"  @BeforeClass \n  @SuppressWarnings(\"unused\")\n  private static void beforeClass() {\n    initCoreDataDir = createTempDir(\"init-core-data\").toFile();\n\n    System.err.println(\"Creating dataDir: \" + initCoreDataDir.getAbsolutePath());\n\n    System.setProperty(\"zookeeper.forceSync\", \"no\");\n    System.setProperty(\"jetty.testMode\", \"true\");\n    System.setProperty(\"enable.update.log\", usually() ? \"true\" : \"false\");\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.clustering.enabled\", \"false\");\n    startTrackingSearchers();\n    ignoreException(\"ignore_exception\");\n    newRandomConfig();\n    \n    sslConfig = buildSSLConfig();\n    // based on randomized SSL config, set SchemaRegistryProvider appropriately\n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    if(isSSLMode()) {\n      // SolrCloud tests should usually clear this\n      System.setProperty(\"urlScheme\", \"https\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["42d831088a676304af7fed98e4f7cfdbe6861c5f","f33ef255480d446ae7aa03506be85d0356a9850f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f33ef255480d446ae7aa03506be85d0356a9850f"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["859081acf00749f5dd462772c571d611d4a4d2db","e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"f33ef255480d446ae7aa03506be85d0356a9850f":["42d831088a676304af7fed98e4f7cfdbe6861c5f"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9dee311b2816356910363a8d15fc076caf6367eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ce753c4d247e4c228cd4be8d287d16abf8c5091":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"42d831088a676304af7fed98e4f7cfdbe6861c5f":["ea7b027695d1003f32a2b5587762e9d51d0d60e8"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"0a9bd08fa75ea56615262bc147a18b8837cd7f11":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["f4abec28b874149a7223e32cc7a01704c27790de"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7116ea8c885812b95ad3d7d232f1069ab3180d27"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["9dee311b2816356910363a8d15fc076caf6367eb"],"7116ea8c885812b95ad3d7d232f1069ab3180d27":["a3de8723cbb1ec54b48bde9aff2c38e3372db3b4"],"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"9dee311b2816356910363a8d15fc076caf6367eb":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"db8c3036d7a71259ececaf30a59e9543ddba4131":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f4abec28b874149a7223e32cc7a01704c27790de":["0a9bd08fa75ea56615262bc147a18b8837cd7f11"],"ea7b027695d1003f32a2b5587762e9d51d0d60e8":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["1ce753c4d247e4c228cd4be8d287d16abf8c5091"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["db8c3036d7a71259ececaf30a59e9543ddba4131"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","80ef99614729c6d6fb7f8a9055a7a442efa87cf8"],"859081acf00749f5dd462772c571d611d4a4d2db":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["7116ea8c885812b95ad3d7d232f1069ab3180d27"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5da0b42730b6b99b31389ef94cb97384e83b9ede","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["859081acf00749f5dd462772c571d611d4a4d2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ef99614729c6d6fb7f8a9055a7a442efa87cf8"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["0a9bd08fa75ea56615262bc147a18b8837cd7f11"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a3de8723cbb1ec54b48bde9aff2c38e3372db3b4"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["859081acf00749f5dd462772c571d611d4a4d2db"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"1ce753c4d247e4c228cd4be8d287d16abf8c5091":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"42d831088a676304af7fed98e4f7cfdbe6861c5f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f33ef255480d446ae7aa03506be85d0356a9850f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["db8c3036d7a71259ececaf30a59e9543ddba4131","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0a9bd08fa75ea56615262bc147a18b8837cd7f11":["f4abec28b874149a7223e32cc7a01704c27790de"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"80ef99614729c6d6fb7f8a9055a7a442efa87cf8":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1ce753c4d247e4c228cd4be8d287d16abf8c5091"],"7116ea8c885812b95ad3d7d232f1069ab3180d27":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4":["7116ea8c885812b95ad3d7d232f1069ab3180d27"],"9dee311b2816356910363a8d15fc076caf6367eb":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"db8c3036d7a71259ececaf30a59e9543ddba4131":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"f4abec28b874149a7223e32cc7a01704c27790de":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"ea7b027695d1003f32a2b5587762e9d51d0d60e8":["42d831088a676304af7fed98e4f7cfdbe6861c5f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["ea7b027695d1003f32a2b5587762e9d51d0d60e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"859081acf00749f5dd462772c571d611d4a4d2db":["55b50463286869f584cf849d1587a0fcd54d1dfa","e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["9dee311b2816356910363a8d15fc076caf6367eb"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["55b50463286869f584cf849d1587a0fcd54d1dfa","80ef99614729c6d6fb7f8a9055a7a442efa87cf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}