{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DateEvaluator#evaluate(LocalDateTime).mjava","sourceNew":"  /**\n   * Evaluate the date based on the specified function\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b70b3ba150f93fa94768c7b0f2098a039ab59c5","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","sourceNew":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2adf666c5966009065f122b1f8bbb8f777db9fd1","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","sourceNew":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) throws IOException {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n      case epoch:\n        return date.atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function %s called on LocalDateTime %s\", function, date.toString()));\n  }\n\n","sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33835f41305f4d46c2a650da7c564ac99f485ab1","date":1492023606,"type":4,"author":"Gethin James","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(LocalDateTime).mjava","sourceNew":null,"sourceOld":"  /**\n   * Evaluate the date based on the specified function\n   *\n   * @param date\n   * @return the evaluated value\n   */\n  private Number evaluate(LocalDateTime date) throws IOException {\n    switch (function) {\n      case year:\n        return date.getYear();\n      case month:\n        return date.getMonthValue();\n      case day:\n        return date.getDayOfMonth();\n      case dayofyear:\n        return date.getDayOfYear();\n      case hour:\n        return date.getHour();\n      case minute:\n        return date.getMinute();\n      case second:\n        return date.getSecond();\n      case dayofquarter:\n        return date.get(IsoFields.DAY_OF_QUARTER);\n      case quarter:\n        return date.get(IsoFields.QUARTER_OF_YEAR);\n      case week:\n        return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n      case epoch:\n        return date.atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n    }\n    throw new IOException(String.format(Locale.ROOT, \"Unsupported function %s called on LocalDateTime %s\", function, date.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33835f41305f4d46c2a650da7c564ac99f485ab1":["2adf666c5966009065f122b1f8bbb8f777db9fd1"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["40b789607c421011dabf36a935528a74fb8b2032"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2adf666c5966009065f122b1f8bbb8f777db9fd1":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33835f41305f4d46c2a650da7c564ac99f485ab1"]},"commit2Childs":{"33835f41305f4d46c2a650da7c564ac99f485ab1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["2adf666c5966009065f122b1f8bbb8f777db9fd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"2adf666c5966009065f122b1f8bbb8f777db9fd1":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"40b789607c421011dabf36a935528a74fb8b2032":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}