{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n    Analyzer synAnalyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, synAnalyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    synAnalyzer.close();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n    Analyzer synAnalyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, synAnalyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    synAnalyzer.close();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["85f3a2d749715373feb8529516e92d3538103525"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"85f3a2d749715373feb8529516e92d3538103525":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["85f3a2d749715373feb8529516e92d3538103525"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85f3a2d749715373feb8529516e92d3538103525":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}