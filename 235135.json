{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","commits":[{"id":"f3517d617f8b4502b5cca1a57e228d54bda3dd0f","date":1307019502,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * this routine deals with -ly endings. The -ally ending is always converted\n   * to -al Sometimes this will temporarily leave us with a non-word (e.g.,\n   * heuristically maps to heuristical), but then the -al is removed in the next\n   * step.\n   */\n  private void lyEndings() {\n    int old_k = k;\n    \n    if (endsIn('l', 'y')) {\n      \n      word.setCharAt(j + 2, 'e'); /* try converting -ly to -le */\n      \n      if (lookup()) return;\n      word.setCharAt(j + 2, 'y');\n      \n      word.setLength(j + 1); /* try just removing the -ly */\n      k = j;\n      \n      if (lookup()) return;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'l')) /*\n                                                                              * always\n                                                                              * convert\n                                                                              * -\n                                                                              * ally\n                                                                              * to\n                                                                              * -\n                                                                              * al\n                                                                              */\n      return;\n      word.append(\"ly\");\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'b')) { /*\n                                                                                * always\n                                                                                * convert\n                                                                                * -\n                                                                                * ably\n                                                                                * to\n                                                                                * -\n                                                                                * able\n                                                                                */\n        word.setCharAt(j + 2, 'e');\n        k = j + 2;\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* e.g., militarily -> military */\n        word.setLength(j);\n        word.unsafeWrite('y');\n        k = j;\n        if (lookup()) return;\n        word.setLength(j);\n        word.append(\"ily\");\n        k = old_k;\n      }\n      \n      word.setLength(j + 1); /* the default is to remove -ly */\n      \n      k = j;\n      // nolookup()... we already tried removing the \"ly\" variant\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * this routine deals with -ly endings. The -ally ending is always converted\n   * to -al Sometimes this will temporarily leave us with a non-word (e.g.,\n   * heuristically maps to heuristical), but then the -al is removed in the next\n   * step.\n   */\n  private void lyEndings() {\n    int old_k = k;\n    \n    if (endsIn('l', 'y')) {\n      \n      word.setCharAt(j + 2, 'e'); /* try converting -ly to -le */\n      \n      if (lookup()) return;\n      word.setCharAt(j + 2, 'y');\n      \n      word.setLength(j + 1); /* try just removing the -ly */\n      k = j;\n      \n      if (lookup()) return;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'l')) /*\n                                                                              * always\n                                                                              * convert\n                                                                              * -\n                                                                              * ally\n                                                                              * to\n                                                                              * -\n                                                                              * al\n                                                                              */\n      return;\n      word.append(\"ly\");\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'b')) { /*\n                                                                                * always\n                                                                                * convert\n                                                                                * -\n                                                                                * ably\n                                                                                * to\n                                                                                * -\n                                                                                * able\n                                                                                */\n        word.setCharAt(j + 2, 'e');\n        k = j + 2;\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* e.g., militarily -> military */\n        word.setLength(j);\n        word.unsafeWrite('y');\n        k = j;\n        if (lookup()) return;\n        word.setLength(j);\n        word.append(\"ily\");\n        k = old_k;\n      }\n      \n      word.setLength(j + 1); /* the default is to remove -ly */\n      \n      k = j;\n      // nolookup()... we already tried removing the \"ly\" variant\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * this routine deals with -ly endings. The -ally ending is always converted\n   * to -al Sometimes this will temporarily leave us with a non-word (e.g.,\n   * heuristically maps to heuristical), but then the -al is removed in the next\n   * step.\n   */\n  private void lyEndings() {\n    int old_k = k;\n    \n    if (endsIn('l', 'y')) {\n      \n      word.setCharAt(j + 2, 'e'); /* try converting -ly to -le */\n      \n      if (lookup()) return;\n      word.setCharAt(j + 2, 'y');\n      \n      word.setLength(j + 1); /* try just removing the -ly */\n      k = j;\n      \n      if (lookup()) return;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'l')) /*\n                                                                              * always\n                                                                              * convert\n                                                                              * -\n                                                                              * ally\n                                                                              * to\n                                                                              * -\n                                                                              * al\n                                                                              */\n      return;\n      word.append(\"ly\");\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'b')) { /*\n                                                                                * always\n                                                                                * convert\n                                                                                * -\n                                                                                * ably\n                                                                                * to\n                                                                                * -\n                                                                                * able\n                                                                                */\n        word.setCharAt(j + 2, 'e');\n        k = j + 2;\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* e.g., militarily -> military */\n        word.setLength(j);\n        word.unsafeWrite('y');\n        k = j;\n        if (lookup()) return;\n        word.setLength(j);\n        word.append(\"ily\");\n        k = old_k;\n      }\n      \n      word.setLength(j + 1); /* the default is to remove -ly */\n      \n      k = j;\n      // nolookup()... we already tried removing the \"ly\" variant\n    }\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#lyEndings().mjava","sourceNew":"  /*\n   * this routine deals with -ly endings. The -ally ending is always converted\n   * to -al Sometimes this will temporarily leave us with a non-word (e.g.,\n   * heuristically maps to heuristical), but then the -al is removed in the next\n   * step.\n   */\n  private void lyEndings() {\n    int old_k = k;\n    \n    if (endsIn('l', 'y')) {\n      \n      word.setCharAt(j + 2, 'e'); /* try converting -ly to -le */\n      \n      if (lookup()) return;\n      word.setCharAt(j + 2, 'y');\n      \n      word.setLength(j + 1); /* try just removing the -ly */\n      k = j;\n      \n      if (lookup()) return;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'l')) /*\n                                                                              * always\n                                                                              * convert\n                                                                              * -\n                                                                              * ally\n                                                                              * to\n                                                                              * -\n                                                                              * al\n                                                                              */\n      return;\n      word.append(\"ly\");\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'b')) { /*\n                                                                                * always\n                                                                                * convert\n                                                                                * -\n                                                                                * ably\n                                                                                * to\n                                                                                * -\n                                                                                * able\n                                                                                */\n        word.setCharAt(j + 2, 'e');\n        k = j + 2;\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* e.g., militarily -> military */\n        word.setLength(j);\n        word.unsafeWrite('y');\n        k = j;\n        if (lookup()) return;\n        word.setLength(j);\n        word.append(\"ily\");\n        k = old_k;\n      }\n      \n      word.setLength(j + 1); /* the default is to remove -ly */\n      \n      k = j;\n      // nolookup()... we already tried removing the \"ly\" variant\n    }\n    return;\n  }\n\n","sourceOld":"  /*\n   * this routine deals with -ly endings. The -ally ending is always converted\n   * to -al Sometimes this will temporarily leave us with a non-word (e.g.,\n   * heuristically maps to heuristical), but then the -al is removed in the next\n   * step.\n   */\n  private void lyEndings() {\n    int old_k = k;\n    \n    if (endsIn('l', 'y')) {\n      \n      word.setCharAt(j + 2, 'e'); /* try converting -ly to -le */\n      \n      if (lookup()) return;\n      word.setCharAt(j + 2, 'y');\n      \n      word.setLength(j + 1); /* try just removing the -ly */\n      k = j;\n      \n      if (lookup()) return;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'l')) /*\n                                                                              * always\n                                                                              * convert\n                                                                              * -\n                                                                              * ally\n                                                                              * to\n                                                                              * -\n                                                                              * al\n                                                                              */\n      return;\n      word.append(\"ly\");\n      k = old_k;\n      \n      if ((j > 0) && (word.charAt(j - 1) == 'a') && (word.charAt(j) == 'b')) { /*\n                                                                                * always\n                                                                                * convert\n                                                                                * -\n                                                                                * ably\n                                                                                * to\n                                                                                * -\n                                                                                * able\n                                                                                */\n        word.setCharAt(j + 2, 'e');\n        k = j + 2;\n        return;\n      }\n      \n      if (word.charAt(j) == 'i') { /* e.g., militarily -> military */\n        word.setLength(j);\n        word.unsafeWrite('y');\n        k = j;\n        if (lookup()) return;\n        word.setLength(j);\n        word.append(\"ily\");\n        k = old_k;\n      }\n      \n      word.setLength(j + 1); /* the default is to remove -ly */\n      \n      k = j;\n      // nolookup()... we already tried removing the \"ly\" variant\n    }\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}