{"path":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","commits":[{"id":"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","date":1288699398,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f06d2946e1cf81da42cf64135b5af1fdf4fdac30","date":1343107672,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new InitializationException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new InitializationException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","5a1a22b1ad88b436661458df567f3fdb446392a4"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","f06d2946e1cf81da42cf64135b5af1fdf4fdac30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["aba371508186796cc6151d8223a5b4e16d02e26e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","85a883878c0af761245ab048babc63d099f835f3","f06d2946e1cf81da42cf64135b5af1fdf4fdac30","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"85a883878c0af761245ab048babc63d099f835f3":[],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}