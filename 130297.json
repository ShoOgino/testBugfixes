{"path":"src/java/org/apache/lucene/index/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","commits":[{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosWriter#compareToLastTerm(int,char[],int,int).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, char[] termText, int start, int length) {\n    int pos = 0;\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    while(pos < length && pos < lastTermTextLength) {\n      final char c1 = lastTermText[pos];\n      final char c2 = termText[pos + start];\n      if (c1 < c2)\n        return -1;\n      else if (c1 > c2)\n        return 1;\n      pos++;\n    }\n\n    if (pos < lastTermTextLength)\n      // Last term was longer\n      return 1;\n    else if (pos < length)\n      // Last term was shorter\n      return -1;\n    else\n      return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosWriter#compareToLastTerm(int,byte[],int).mjava","sourceNew":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","sourceOld":"  // Currently used only by assert statement\n  private int compareToLastTerm(int fieldNumber, byte[] termBytes, int termBytesLength) {\n\n    if (lastFieldNumber != fieldNumber) {\n      final int cmp = fieldInfos.fieldName(lastFieldNumber).compareTo(fieldInfos.fieldName(fieldNumber));\n      // If there is a field named \"\" (empty string) then we\n      // will get 0 on this comparison, yet, it's \"OK\".  But\n      // it's not OK if two different field numbers map to\n      // the same name.\n      if (cmp != 0 || lastFieldNumber != -1)\n        return cmp;\n    }\n\n    UnicodeUtil.UTF8toUTF16(lastTermBytes, 0, lastTermBytesLength, utf16Result1);\n    UnicodeUtil.UTF8toUTF16(termBytes, 0, termBytesLength, utf16Result2);\n    final int len;\n    if (utf16Result1.length < utf16Result2.length)\n      len = utf16Result1.length;\n    else\n      len = utf16Result2.length;\n\n    for(int i=0;i<len;i++) {\n      final char ch1 = utf16Result1.result[i];\n      final char ch2 = utf16Result2.result[i];\n      if (ch1 != ch2)\n        return ch1-ch2;\n    }\n    return utf16Result1.length - utf16Result2.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}