{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","commits":[{"id":"441c188ff9fd7da36e0e4d8a9b51cebe63b31192","date":1384814749,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SumIntAssociationFacets#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006838107b0cd2051371f3470740d23ec91b1886","date":1384950816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(topN);\n    \n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    /*\n    FacetsConfig.DimConfig ft = config.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      totCount = counts[dimOrd];\n    }\n    */\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f5022544a8fc895776356d1b35a4b46d05945c","date":1385063323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(cp, sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumIntAssociations#getTopChildren(int,String,String...).mjava","sourceNew":"  @Override\n  public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new FacetResult(sumValue, labelValues, childCount);\n  }\n\n","sourceOld":"  @Override\n  public SimpleFacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n    if (topN <= 0) {\n      throw new IllegalArgumentException(\"topN must be > 0 (got: \" + topN + \")\");\n    }\n    verifyDim(dim);\n    FacetLabel cp = FacetLabel.create(dim, path);\n    int dimOrd = taxoReader.getOrdinal(cp);\n    if (dimOrd == -1) {\n      //System.out.println(\"no ord for path=\" + path);\n      return null;\n    }\n\n    TopOrdAndIntQueue q = new TopOrdAndIntQueue(Math.min(taxoReader.getSize(), topN));\n    int bottomValue = 0;\n\n    int ord = children[dimOrd];\n    long sumValue = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValue += values[ord];\n        childCount++;\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValue == 0) {\n      //System.out.println(\"totCount=0 for path=\" + path);\n      return null;\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[cp.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(sumValue, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f5022544a8fc895776356d1b35a4b46d05945c":["006838107b0cd2051371f3470740d23ec91b1886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"006838107b0cd2051371f3470740d23ec91b1886":["441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["19f5022544a8fc895776356d1b35a4b46d05945c"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19f5022544a8fc895776356d1b35a4b46d05945c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","441c188ff9fd7da36e0e4d8a9b51cebe63b31192"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["d899affd3c008feba40d1405b7a38972ce2005b4"],"006838107b0cd2051371f3470740d23ec91b1886":["19f5022544a8fc895776356d1b35a4b46d05945c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"441c188ff9fd7da36e0e4d8a9b51cebe63b31192":["006838107b0cd2051371f3470740d23ec91b1886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}