{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","commits":[{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      DocCollection watched = watchedCollectionStates.get(s);\n      if (watched != null) {\n        // if it is a watched collection, add too\n        result.put(s, new ClusterState.CollectionRef(watched));\n      } else {\n        // if it is not collection, then just create a reference which can fetch \n        // the collection object just in time from ZK\n        final String collName = s;\n        result.put(s, new ClusterState.CollectionRef(null) {\n          @Override\n          public DocCollection get() {\n            return getCollectionLive(ZkStateReader.this, collName);\n          }\n        });\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533441cf4f92d937014da4311237e3bbb1a3c0cc","date":1414421468,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          watchedCollectionStates.put(s, live);\n          // if it is a watched collection, add too\n          result.put(s, new ClusterState.CollectionRef(live));\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      DocCollection watched = watchedCollectionStates.get(s);\n      if (watched != null) {\n        // if it is a watched collection, add too\n        result.put(s, new ClusterState.CollectionRef(watched));\n      } else {\n        // if it is not collection, then just create a reference which can fetch \n        // the collection object just in time from ZK\n        final String collName = s;\n        result.put(s, new ClusterState.CollectionRef(null) {\n          @Override\n          public DocCollection get() {\n            return getCollectionLive(ZkStateReader.this, collName);\n          }\n        });\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"624a78aada85c97f657fe582ce06976b10067343","date":1420577629,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          assert live != null;\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          watchedCollectionStates.put(s, live);\n          // if it is a watched collection, add too\n          result.put(s, new ClusterState.CollectionRef(live));\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":["1ce872f8af1c62041fc7720f70eee3d4c97de84e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f66f2baacb517f21697158669ba00d4e04f51ed2","date":1421164715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          assert live != null;\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f949258e810a0d90760b2a5da9d28819fa0101a3","date":1421928717,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() { return true; }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6","date":1434002938,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln, CLUSTER_STATE);\n\n    // first load all collections in /clusterstate.json (i.e. stateFormat=1)\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(loadedData.getCollectionStates());\n\n    for (String s : getStateFormat2CollectionNames()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() {\n              return true;\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher)\n      throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,\n        CLUSTER_STATE);\n    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();\n    result.putAll(loadedData.getCollectionStates());// first load all\n                                                    // collections in\n                                                    // clusterstate.json\n    for (String s : getIndividualColls()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() { return true; }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ce872f8af1c62041fc7720f70eee3d4c97de84e","date":1438173847,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":"  private ClusterState constructState(Set<String> ln, Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln, CLUSTER_STATE);\n\n    // first load all collections in /clusterstate.json (i.e. stateFormat=1)\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(loadedData.getCollectionStates());\n\n    for (String s : getStateFormat2CollectionNames()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            updateWatchedCollection(live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() {\n              return true;\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln, CLUSTER_STATE);\n\n    // first load all collections in /clusterstate.json (i.e. stateFormat=1)\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(loadedData.getCollectionStates());\n\n    for (String s : getStateFormat2CollectionNames()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            watchedCollectionStates.put(s, live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() {\n              return true;\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":["624a78aada85c97f657fe582ce06976b10067343"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String],Watcher).mjava","sourceNew":null,"sourceOld":"  private ClusterState constructState(Set<String> ln, Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);\n    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln, CLUSTER_STATE);\n\n    // first load all collections in /clusterstate.json (i.e. stateFormat=1)\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(loadedData.getCollectionStates());\n\n    for (String s : getStateFormat2CollectionNames()) {\n      synchronized (this) {\n        if (watchedCollections.contains(s)) {\n          DocCollection live = getCollectionLive(this, s);\n          if (live != null) {\n            updateWatchedCollection(live);\n            // if it is a watched collection, add too\n            result.put(s, new ClusterState.CollectionRef(live));\n          }\n        } else {\n          // if it is not collection, then just create a reference which can fetch\n          // the collection object just in time from ZK\n          // this is also cheap (lazy loaded) so we put it inside the synchronized\n          // block although it is not required\n          final String collName = s;\n          result.put(s, new ClusterState.CollectionRef(null) {\n            @Override\n            public DocCollection get() {\n              return getCollectionLive(ZkStateReader.this, collName);\n            }\n\n            @Override\n            public boolean isLazilyLoaded() {\n              return true;\n            }\n          });\n        }\n      }\n    }\n    return new ClusterState(ln, result, stat.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f949258e810a0d90760b2a5da9d28819fa0101a3":["f66f2baacb517f21697158669ba00d4e04f51ed2"],"624a78aada85c97f657fe582ce06976b10067343":["533441cf4f92d937014da4311237e3bbb1a3c0cc"],"1ce872f8af1c62041fc7720f70eee3d4c97de84e":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f66f2baacb517f21697158669ba00d4e04f51ed2":["624a78aada85c97f657fe582ce06976b10067343"],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["f949258e810a0d90760b2a5da9d28819fa0101a3"],"533441cf4f92d937014da4311237e3bbb1a3c0cc":["9279b175e5e66258442d2123a50f052219a9cc1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["1ce872f8af1c62041fc7720f70eee3d4c97de84e"],"9279b175e5e66258442d2123a50f052219a9cc1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f949258e810a0d90760b2a5da9d28819fa0101a3":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"],"624a78aada85c97f657fe582ce06976b10067343":["f66f2baacb517f21697158669ba00d4e04f51ed2"],"1ce872f8af1c62041fc7720f70eee3d4c97de84e":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9279b175e5e66258442d2123a50f052219a9cc1b"],"f66f2baacb517f21697158669ba00d4e04f51ed2":["f949258e810a0d90760b2a5da9d28819fa0101a3"],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["1ce872f8af1c62041fc7720f70eee3d4c97de84e"],"533441cf4f92d937014da4311237e3bbb1a3c0cc":["624a78aada85c97f657fe582ce06976b10067343"],"9279b175e5e66258442d2123a50f052219a9cc1b":["533441cf4f92d937014da4311237e3bbb1a3c0cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}