{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","commits":[{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public float score(float freq, long encodedNorm) throws IOException {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48","date":1515667776,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","sourceNew":"    @Override\n    public float score(float freq, long encodedNorm) {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","sourceOld":"    @Override\n    public float score(float freq, long encodedNorm) throws IOException {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public float score(float freq, long encodedNorm) {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ffc90b2c3491ebc56d78355c6506bac08ab841","date":1575914358,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","sourceNew":"    @Override\n    public float score(float freq, long encodedNorm) {\n      // In order to guarantee monotonicity with both freq and norm without\n      // promoting to doubles, we rewrite freq / (freq + norm) to\n      // 1 - 1 / (1 + freq * 1/norm).\n      // freq * 1/norm is guaranteed to be monotonic for both freq and norm due\n      // to the fact that multiplication and division round to the nearest\n      // float. And then monotonicity is preserved through composition via\n      // x -> 1 + x and x -> 1 - 1/x.\n      // Finally we expand weight * (1 - 1 / (1 + freq * 1/norm)) to\n      // weight - weight / (1 + freq * 1/norm), which runs slightly faster.\n      float normInverse = cache[((byte) encodedNorm) & 0xFF];\n      return weight - weight / (1f + freq * normInverse);\n    }\n\n","sourceOld":"    @Override\n    public float score(float freq, long encodedNorm) {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25Scorer#score(float,long).mjava","sourceNew":"    @Override\n    public float score(float freq, long encodedNorm) {\n      // In order to guarantee monotonicity with both freq and norm without\n      // promoting to doubles, we rewrite freq / (freq + norm) to\n      // 1 - 1 / (1 + freq * 1/norm).\n      // freq * 1/norm is guaranteed to be monotonic for both freq and norm due\n      // to the fact that multiplication and division round to the nearest\n      // float. And then monotonicity is preserved through composition via\n      // x -> 1 + x and x -> 1 - 1/x.\n      // Finally we expand weight * (1 - 1 / (1 + freq * 1/norm)) to\n      // weight - weight / (1 + freq * 1/norm), which runs slightly faster.\n      float normInverse = cache[((byte) encodedNorm) & 0xFF];\n      return weight - weight / (1f + freq * normInverse);\n    }\n\n","sourceOld":"    @Override\n    public float score(float freq, long encodedNorm) {\n      double norm = cache[((byte) encodedNorm) & 0xFF];\n      return weight * (float) (freq / (freq + norm));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","edb2fe416114ad548e5a8a3e4326e9ef51d2ef48"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"7107555998ea86d6f61e2ad770687d674fa8e012":["b94236357aaa22b76c10629851fe4e376e0cea82","d2ffc90b2c3491ebc56d78355c6506bac08ab841"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2ffc90b2c3491ebc56d78355c6506bac08ab841":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2ffc90b2c3491ebc56d78355c6506bac08ab841"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["7107555998ea86d6f61e2ad770687d674fa8e012","d2ffc90b2c3491ebc56d78355c6506bac08ab841"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["edb2fe416114ad548e5a8a3e4326e9ef51d2ef48"],"edb2fe416114ad548e5a8a3e4326e9ef51d2ef48":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"d2ffc90b2c3491ebc56d78355c6506bac08ab841":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}