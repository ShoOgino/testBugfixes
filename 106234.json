{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpWithFlags().mjava","commits":[{"id":"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c","date":1260522208,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpWithFlags().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexpWithFlags() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"bb\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_REGEXP_STR, \"B.*\");\n    params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\");\n    params.add(TermsParams.TERMS_UPPER, \"bbbb\");\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertEquals(\"terms Size: \" + terms.size() + \" is not: 1\", 1, terms.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpWithFlags().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testRegexpWithFlags().mjava","sourceNew":"  public void testRegexpWithFlags() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"bb\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_REGEXP_STR, \"B.*\");\n    params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\");\n    params.add(TermsParams.TERMS_UPPER, \"bbbb\");\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertEquals(\"terms Size: \" + terms.size() + \" is not: 1\", 1, terms.size());\n  }\n\n","sourceOld":"  public void testRegexpWithFlags() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER,  \"bb\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_REGEXP_STR, \"B.*\");\n    params.add(TermsParams.TERMS_REGEXP_FLAG, \"case_insensitive\");\n    params.add(TermsParams.TERMS_UPPER, \"bbbb\");\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertEquals(\"terms Size: \" + terms.size() + \" is not: 1\", 1, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2f32b2ee79afc1b38d7aa7cba0cc0840e3a5bc3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}