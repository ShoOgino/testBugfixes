{"path":"src/test-deprecated/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = Field.Text(\"field\", \"word\");\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":null,"sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = Field.Text(\"field\", \"word\");\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}