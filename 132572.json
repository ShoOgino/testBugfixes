{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getTopReaderContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.shutdown();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    AtomicReaderContext context = (AtomicReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":null,"sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}