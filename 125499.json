{"path":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testInvalidUsage().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testInvalidUsage().mjava","pathOld":"/dev/null","sourceNew":"  public void testInvalidUsage() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    try {\n      final SortSpec ss = QueryParsing.parseSortSpec(\"str desc, score desc\", req);\n      final CursorMark totem = new CursorMark(schema, ss);\n      fail(\"no failure from sort that doesn't include uniqueKey field\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n    }\n\n    for (final String dir : Arrays.asList(\"asc\", \"desc\")) {\n      try {\n        final SortSpec ss = QueryParsing.parseSortSpec(\"score \" + dir, req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from score only sort: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n      }\n      \n      try {\n        final SortSpec ss = QueryParsing.parseSortSpec(\"_docid_ \"+dir+\", id desc\", req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from sort that includes _docid_: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"_docid_\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testInvalidUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testInvalidUsage().mjava","sourceNew":"  public void testInvalidUsage() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    try {\n      final SortSpec ss = SortSpecParsing.parseSortSpec(\"str desc, score desc\", req);\n      final CursorMark totem = new CursorMark(schema, ss);\n      fail(\"no failure from sort that doesn't include uniqueKey field\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n    }\n\n    for (final String dir : Arrays.asList(\"asc\", \"desc\")) {\n      try {\n        final SortSpec ss = SortSpecParsing.parseSortSpec(\"score \" + dir, req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from score only sort: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n      }\n      \n      try {\n        final SortSpec ss = SortSpecParsing.parseSortSpec(\"_docid_ \"+dir+\", id desc\", req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from sort that includes _docid_: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"_docid_\"));\n      }\n    }\n  }\n\n","sourceOld":"  public void testInvalidUsage() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    try {\n      final SortSpec ss = QueryParsing.parseSortSpec(\"str desc, score desc\", req);\n      final CursorMark totem = new CursorMark(schema, ss);\n      fail(\"no failure from sort that doesn't include uniqueKey field\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n    }\n\n    for (final String dir : Arrays.asList(\"asc\", \"desc\")) {\n      try {\n        final SortSpec ss = QueryParsing.parseSortSpec(\"score \" + dir, req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from score only sort: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"uniqueKey\"));\n      }\n      \n      try {\n        final SortSpec ss = QueryParsing.parseSortSpec(\"_docid_ \"+dir+\", id desc\", req);\n        final CursorMark totem = new CursorMark(schema, ss);\n        fail(\"no failure from sort that includes _docid_: \" + dir);\n      } catch (SolrException e) {\n        assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(0 < e.getMessage().indexOf(\"_docid_\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8dc56dbae186505066de8a78986cba31525ef0"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6c8dc56dbae186505066de8a78986cba31525ef0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}