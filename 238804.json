{"path":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testIsCurrent().mjava","commits":[{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDirectoryReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    IndexReader[] readers = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2)};\n    MultiReader mr = new MultiReader(readers);\n    assertTrue(mr.isCurrent());   // just opened, must be current\n    addDoc(ramDir1, \"more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified, not current anymore\n    addDoc(ramDir2, \"even more text\", false);\n    assertFalse(mr.isCurrent());   // has been modified even more, not current anymore\n    try {\n      mr.getVersion();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // expected exception\n    }\n    mr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}