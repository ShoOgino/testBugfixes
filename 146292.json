{"path":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","commits":[{"id":"20cf910d1892b0a0ff8543ec4551b6df2dc3de40","date":1275769896,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text.utf8ToString());\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().text());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text.utf8ToString());\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().text());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text.utf8ToString());\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().text());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"  @Override\n  public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SeekStatus seek(BytesRef text, boolean useCache) {\n    final Term t = new Term(field, text);\n    int loc = Arrays.binarySearch(terms, t, InstantiatedTerm.termComparator);\n    if (loc < 0) {\n      upto = -loc - 1;\n      if (upto >= terms.length) {\n        return SeekStatus.END;\n      } else {\n        br.copy(terms[upto].getTerm().bytes());\n        return SeekStatus.NOT_FOUND;\n      }\n    } else {\n      upto = loc;\n      br.copy(text);\n      return SeekStatus.FOUND;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"2553b00f699380c64959ccb27991289aae87be2e":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["5f4e87790277826a2aea119328600dfb07761f32","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}