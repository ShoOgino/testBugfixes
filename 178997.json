{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","sourceNew":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","sourceNew":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.toString());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","sourceNew":null,"sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.toString());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","sourceNew":null,"sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.toString());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float,int,int).mjava","sourceNew":null,"sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost, int startOffset, int endOffset) throws IOException {\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n    \n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.toString());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n    assertEquals(startOffset, offsetAtt.startOffset());\n    assertEquals(endOffset, offsetAtt.endOffset());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a7347509fad0711ac30cb15a746e9a3830a38ebd","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}