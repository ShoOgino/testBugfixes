{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56be5c9792e4a329cf6468240a4f8ff532f426c","date":1382600931,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrdCount, Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n    \n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0106fc8bd579fa78caf3372887b2d50907b5635","date":1402916839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(DELTA_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e56be5c9792e4a329cf6468240a4f8ff532f426c","f0106fc8bd579fa78caf3372887b2d50907b5635"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["e56be5c9792e4a329cf6468240a4f8ff532f426c"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f0106fc8bd579fa78caf3372887b2d50907b5635","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e56be5c9792e4a329cf6468240a4f8ff532f426c"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}