{"path":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":null,"sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1","date":1298826885,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final InputStream xsltStream = loader.openResource(\"xslt/\" + filename);\n      result = tFactory.newTemplates(new StreamSource(xsltStream));\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/xslt/TransformerProvider#getTemplates(ResourceLoader,String,int).mjava","sourceNew":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","sourceOld":"  /** Return a Templates object for the given filename */\n  private Templates getTemplates(ResourceLoader loader, String filename,int cacheLifetimeSeconds) throws IOException {\n    \n    Templates result = null;\n    lastFilename = null;\n    try {\n      if(log.isDebugEnabled()) {\n        log.debug(\"compiling XSLT templates:\" + filename);\n      }\n      final String fn = \"xslt/\" + filename;\n      final TransformerFactory tFactory = TransformerFactory.newInstance();\n      tFactory.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n      tFactory.setErrorListener(xmllog);\n      final StreamSource src = new StreamSource(loader.openResource(fn),\n        SystemIdResolver.createSystemIdFromResourceName(fn));\n      try {\n        result = tFactory.newTemplates(src);\n      } finally {\n        // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n        IOUtils.closeQuietly(src.getInputStream());\n      }\n    } catch (Exception e) {\n      log.error(getClass().getName(), \"newTemplates\", e);\n      final IOException ioe = new IOException(\"Unable to initialize Templates '\" + filename + \"'\");\n      ioe.initCause(e);\n      throw ioe;\n    }\n    \n    lastFilename = filename;\n    lastTemplates = result;\n    cacheExpires = System.currentTimeMillis() + (cacheLifetimeSeconds * 1000);\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b24326411db492f92ea49f6fb947c90bc73cf19e":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c187aa9cff5b167f6edcfa182bbba8d1937ea2a1"],"1da8d55113b689b06716246649de6f62430f15c0":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c187aa9cff5b167f6edcfa182bbba8d1937ea2a1":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}