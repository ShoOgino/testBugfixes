{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","commits":[{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,String,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the <a href=\"#version\">Lucene match version</a>\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    this(version, input, Side.FRONT, minGram, maxGram);\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param sideLabel the name of the {@link Side} from which to chop off an n-gram\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, String sideLabel, int minGram, int maxGram) {\n    this(input, Side.getSide(sideLabel), minGram, maxGram);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7567347acd9579d742a2ffd4feb1a32062fb1bc3","date":1367935406,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the <a href=\"#version\">Lucene match version</a>\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    this(version, input, Side.FRONT, minGram, maxGram);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_44)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance()\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance()\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#EdgeNGramTokenFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = CharacterUtils.getInstance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","sourceOld":"  /**\n   * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range\n   *\n   * @param version the Lucene match version\n   * @param input {@link TokenStream} holding the input to be tokenized\n   * @param minGram the smallest n-gram to generate\n   * @param maxGram the largest n-gram to generate\n   */\n  public EdgeNGramTokenFilter(Version version, TokenStream input, int minGram, int maxGram) {\n    super(input);\n\n    if (version == null) {\n      throw new IllegalArgumentException(\"version must not be null\");\n    }\n\n    if (minGram < 1) {\n      throw new IllegalArgumentException(\"minGram must be greater than zero\");\n    }\n\n    if (minGram > maxGram) {\n      throw new IllegalArgumentException(\"minGram must not be greater than maxGram\");\n    }\n\n    this.charUtils = version.onOrAfter(Version.LUCENE_4_4)\n        ? CharacterUtils.getInstance(version)\n        : CharacterUtils.getJava4Instance();\n    this.minGram = minGram;\n    this.maxGram = maxGram;\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["523c1863d7ec17e9a5067cef7e233c388f8ab263"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["523c1863d7ec17e9a5067cef7e233c388f8ab263"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}