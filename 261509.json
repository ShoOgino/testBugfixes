{"path":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","commits":[{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n\t      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t    }\n\t  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5db18f220de7171b50dcc6c58a20e11cc7ebe52","date":1239116090,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n\t      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t      \n\t    }\n\t  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n\t      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t    }\n\t  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fe82b6af0f490fe9a473a5315847479e78f73f","date":1247758686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n\t      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t      \n\t    }\n\t  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumberUtils.SortableStr2double(d.get(latField));\n\t      double rsLng = NumberUtils.SortableStr2double(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t      \n\t    }\n\t  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n\t    searcher = new IndexSearcher(directory);\n\t    \n\t    final double miles = 6.0;\n\t    \n\t    // create a distance query\n\t    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n\t        geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n\t    System.out.println(dq);\n\t    //create a term query to search against all documents\n\t    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n\t    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\t    CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n\t      @Override\n\t      public float customScore(int doc, float subQueryScore, float valSrcScore){\n\t        //System.out.println(doc);\n\t        if (dq.distanceFilter.getDistance(doc) == null)\n\t          return 0;\n\t        \n\t        double distance = dq.distanceFilter.getDistance(doc);\n\t        // boost score shouldn't exceed 1\n\t        if (distance < 1.0d)\n\t          distance = 1.0d;\n\t        //boost by distance is invertly proportional to\n\t        // to distance from center point to location\n\t        float score = new Float((miles - distance) / miles ).floatValue();\n\t        return score * subQueryScore;\n\t      }\n\t    };\n\t    // Create a distance sort\n\t    // As the radius filter has performed the distance calculations\n\t    // already, pass in the filter to reuse the results.\n\t    // \n\t    DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n\t    Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n\t    // Perform the search, using the term query, the serial chain filter, and the\n\t    // distance sort\n\t    Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n\t    int results = hits.length();\n\t    \n\t    // Get a list of distances \n\t    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n\t    // distances calculated from filter first pass must be less than total\n\t    // docs, from the above test of 20 items, 12 will come from the boundary box\n\t    // filter, but only 5 are actually in the radius of the results.\n\t    \n\t    // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n\t    System.out.println(\"Distance Filter filtered: \" + distances.size());\n\t    System.out.println(\"Results: \" + results);\n\t    System.out.println(\"=============================\");\n\t    System.out.println(\"Distances should be 14 \"+ distances.size());\n\t    System.out.println(\"Results should be 7 \"+ results);\n\n\t    assertEquals(14, distances.size());\n\t    assertEquals(7, results);\n\t    \n\t    for(int i =0 ; i < results; i++){\n\t      Document d = hits.doc(i);\n\t      \n\t      String name = d.get(\"name\");\n\t      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n\t      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n\t      Double geo_distance = distances.get(hits.id(i));\n\t      \n\t      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n\t      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n\t      System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n\t      assertTrue(Math.abs((distance - llm)) < 1);\n\t      assertTrue((distance < miles ));\n\t      \n\t    }\n\t  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"968e7fd413dd0f996279c832c8df4a6552797913","date":1251915613,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceSortSource dsort = new DistanceSortSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a04035855bf53c50aaef580f2ec794acf73029e","date":1253578101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ distances.size());\n      System.out.println(\"Results should be 7 \"+ results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = new Float((miles - distance) / miles ).floatValue();\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      Hits hits = searcher.search(customScore, dq.getFilter()); //,sort);\n\n      int results = hits.length();\n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = hits.doc(i);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(hits.id(i));\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n\t      \n          @Override\n            public float customScore(int doc, float subQueryScore, float valSrcScore){\n            //System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\t        \n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ( (miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      //DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      //Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      //DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      //Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              //System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      //DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      //Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    \n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n      System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testGeoHashRange().mjava","sourceNew":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      //DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      //Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","sourceOld":"  public void testGeoHashRange() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\t    \n    final double[] milesToTest = new double[] {6.0, 0.5, 0.001, 0.0};\n    final int[] expected = new int[] {7, 1, 0, 0};\n\n    for(int x=0;x<expected.length;x++) {\n      final double miles = milesToTest[x];\n\t    \n      // create a distance query\n      final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles, \n                                                               geoHashPrefix, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\t     \n      if (VERBOSE) System.out.println(dq);\n      //create a term query to search against all documents\n      Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\t    \n      FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n      CustomScoreQuery customScore = new CustomScoreQuery(tq,fsQuery){\n        @Override\n        protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n          return new CustomScoreProvider(reader) {\n              @Override // TODO: broken, as reader is not used!\n              public float customScore(int doc, float subQueryScore, float valSrcScore){\n              if (VERBOSE) System.out.println(doc);\n              if (dq.distanceFilter.getDistance(doc) == null)\n                return 0;\n            \n              double distance = dq.distanceFilter.getDistance(doc);\n              // boost score shouldn't exceed 1\n              if (distance < 1.0d)\n                distance = 1.0d;\n              //boost by distance is invertly proportional to\n              // to distance from center point to location\n              float score = (float) ( (miles - distance) / miles );\n              return score * subQueryScore;\n            }\n          };\n        }\n      };\n      // Create a distance sort\n      // As the radius filter has performed the distance calculations\n      // already, pass in the filter to reuse the results.\n      // \n      //DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n      //Sort sort = new Sort(new SortField(\"foo\", dsort));\n\t    \n      // Perform the search, using the term query, the serial chain filter, and the\n      // distance sort\n      TopDocs hits = searcher.search(customScore.createWeight(searcher),dq.getFilter(), 1000); //,sort);\n      int results = hits.totalHits;\n      ScoreDoc[] scoreDocs = hits.scoreDocs; \n\t    \n      // Get a list of distances \n      Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\t    \n      // distances calculated from filter first pass must be less than total\n      // docs, from the above test of 20 items, 12 will come from the boundary box\n      // filter, but only 5 are actually in the radius of the results.\n\t    \n      // Note Boundary Box filtering, is not accurate enough for most systems.\n\t    \n\t    if (VERBOSE) {\n        System.out.println(\"Distance Filter filtered: \" + distances.size());\n        System.out.println(\"Results: \" + results);\n        System.out.println(\"=============================\");\n        System.out.println(\"Distances should be 14 \"+ expected[x] + \":\" + distances.size());\n        System.out.println(\"Results should be 7 \"+ expected[x] + \":\" + results);\n      }\n\n      assertEquals(expected[x], distances.size());\n      assertEquals(expected[x], results);\n\t    \n      for(int i =0 ; i < results; i++){\n        Document d = searcher.doc(scoreDocs[i].doc);\n\t      \n        String name = d.get(\"name\");\n        double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n        double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField)); \n        Double geo_distance = distances.get(scoreDocs[i].doc);\n\t      \n        double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n        double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n        if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance (res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ scoreDocs[i].score);\n        assertTrue(Math.abs((distance - llm)) < 1);\n        assertTrue((distance < miles ));\n\t      \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["0a04035855bf53c50aaef580f2ec794acf73029e"],"0a04035855bf53c50aaef580f2ec794acf73029e":["968e7fd413dd0f996279c832c8df4a6552797913"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"4256bc1b3c94786287ccdfc751230374521843cf":["6bcde5e3f23911110baa101ed062b544162825b5"],"968e7fd413dd0f996279c832c8df4a6552797913":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5db18f220de7171b50dcc6c58a20e11cc7ebe52":["0584ee2be458044f19041ac184df00c69c632b4d"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"affefdda19991b74568e601456baad0c8e5c2f65":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["d5db18f220de7171b50dcc6c58a20e11cc7ebe52"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["affefdda19991b74568e601456baad0c8e5c2f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4256bc1b3c94786287ccdfc751230374521843cf"],"0a04035855bf53c50aaef580f2ec794acf73029e":["6bcde5e3f23911110baa101ed062b544162825b5"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["968e7fd413dd0f996279c832c8df4a6552797913"],"968e7fd413dd0f996279c832c8df4a6552797913":["0a04035855bf53c50aaef580f2ec794acf73029e"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0584ee2be458044f19041ac184df00c69c632b4d":["d5db18f220de7171b50dcc6c58a20e11cc7ebe52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0584ee2be458044f19041ac184df00c69c632b4d"],"d5db18f220de7171b50dcc6c58a20e11cc7ebe52":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"affefdda19991b74568e601456baad0c8e5c2f65":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["affefdda19991b74568e601456baad0c8e5c2f65"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}