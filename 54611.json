{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean).mjava","commits":[{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      int length = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //Skip ahead of where we are by the length of what is stored\n      fieldsStream.seek(pointer+length);\n      f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n      f.setOmitNorms(fi.omitNorms);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, compressed));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        f = new LazyField(fi.name, store, toRead, pointer, binary, compressed);\n        //skip over the part that we aren't loading\n        fieldsStream.seek(pointer + toRead);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      } else {\n        int length = fieldsStream.readVInt();\n        long pointer = fieldsStream.getFilePointer();\n        //Skip ahead of where we are by the length of what is stored\n        if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n          fieldsStream.seek(pointer+length);\n        } else {\n          fieldsStream.skipChars(length);\n        }\n        f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, compressed);\n        f.setOmitNorms(fi.omitNorms);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      }\n      \n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"371bbd52cb908c7640086aa3aec5880542b81060","date":1277991686,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean tokenize, boolean cacheResult) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary, cacheResult));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      int length = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //Skip ahead of where we are by the length of what is stored\n      fieldsStream.seek(pointer+length);\n      f = new LazyField(fi.name, store, index, termVector, length, pointer, binary, cacheResult);\n      f.setOmitNorms(fi.omitNorms);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n\n      doc.add(f);\n    }\n\n  }\n\n","sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      int length = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //Skip ahead of where we are by the length of what is stored\n      fieldsStream.seek(pointer+length);\n      f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n      f.setOmitNorms(fi.omitNorms);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldLazy(Document,FieldInfo,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void addFieldLazy(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws IOException {\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //was: doc.add(new Fieldable(fi.name, b, Fieldable.Store.YES));\n      doc.add(new LazyField(fi.name, Field.Store.YES, toRead, pointer, binary));\n      //Need to move the pointer ahead by toRead positions\n      fieldsStream.seek(pointer + toRead);\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      int length = fieldsStream.readVInt();\n      long pointer = fieldsStream.getFilePointer();\n      //Skip ahead of where we are by the length of what is stored\n      fieldsStream.seek(pointer+length);\n      f = new LazyField(fi.name, store, index, termVector, length, pointer, binary);\n      f.setOmitNorms(fi.omitNorms);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n\n      doc.add(f);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"371bbd52cb908c7640086aa3aec5880542b81060":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","371bbd52cb908c7640086aa3aec5880542b81060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["371bbd52cb908c7640086aa3aec5880542b81060"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["371bbd52cb908c7640086aa3aec5880542b81060","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6267e1ce56c2eec111425690cd04e251b6f14952"],"371bbd52cb908c7640086aa3aec5880542b81060":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}