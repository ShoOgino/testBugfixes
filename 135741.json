{"path":"src/test/org/apache/lucene/search/TestStressSort#compare(TopDocs,TopDocs).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestStressSort#compare(TopDocs,TopDocs).mjava","pathOld":"/dev/null","sourceNew":"  private void compare(TopDocs oldHits, TopDocs newHits) {\n    assertEquals(oldHits.totalHits, newHits.totalHits);\n    assertEquals(oldHits.scoreDocs.length, newHits.scoreDocs.length);\n    final ScoreDoc[] oldDocs = oldHits.scoreDocs;\n    final ScoreDoc[] newDocs = newHits.scoreDocs;\n\n    for(int i=0;i<oldDocs.length;i++) {\n      if (oldDocs[i] instanceof FieldDoc) {\n        assert newDocs[i] instanceof FieldDoc;\n        FieldDoc oldHit = (FieldDoc) oldDocs[i];\n        FieldDoc newHit = (FieldDoc) newDocs[i];\n        assertEquals(\"hit \" + i + \" of \" + oldDocs.length + \" differs: oldDoc=\" + oldHit.doc + \" vs newDoc=\" + newHit.doc + \" oldFields=\" + Arrays.toString(oldHit.fields) + \" newFields=\" + Arrays.toString(newHit.fields),\n                     oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n        assertTrue(Arrays.equals(oldHit.fields, newHit.fields));\n      } else {\n        ScoreDoc oldHit = oldDocs[i];\n        ScoreDoc newHit = newDocs[i];\n        assertEquals(oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"450f1a35b72759406232311bd2621441d6ebbe58","date":1236131427,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestStressSort#compare(TopDocs,TopDocs).mjava","pathOld":"src/test/org/apache/lucene/search/TestStressSort#compare(TopDocs,TopDocs).mjava","sourceNew":"  private void compare(TopDocs oldHits, TopDocs newHits) {\n    assertEquals(oldHits.totalHits, newHits.totalHits);\n    assertEquals(oldHits.scoreDocs.length, newHits.scoreDocs.length);\n    final ScoreDoc[] oldDocs = oldHits.scoreDocs;\n    final ScoreDoc[] newDocs = newHits.scoreDocs;\n\n    for(int i=0;i<oldDocs.length;i++) {\n      if (oldDocs[i] instanceof FieldDoc) {\n        assert newDocs[i] instanceof FieldDoc;\n        FieldDoc oldHit = (FieldDoc) oldDocs[i];\n        FieldDoc newHit = (FieldDoc) newDocs[i];\n        assertEquals(\"hit \" + i + \" of \" + oldDocs.length + \" differs: oldDoc=\" + oldHit.doc + \" vs newDoc=\" + newHit.doc + \" oldFields=\" + _TestUtil.arrayToString(oldHit.fields) + \" newFields=\" + _TestUtil.arrayToString(newHit.fields),\n                     oldHit.doc, newHit.doc);\n\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n        assertTrue(Arrays.equals(oldHit.fields, newHit.fields));\n      } else {\n        ScoreDoc oldHit = oldDocs[i];\n        ScoreDoc newHit = newDocs[i];\n        assertEquals(oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n      }\n    }\n    \n  }\n\n","sourceOld":"  private void compare(TopDocs oldHits, TopDocs newHits) {\n    assertEquals(oldHits.totalHits, newHits.totalHits);\n    assertEquals(oldHits.scoreDocs.length, newHits.scoreDocs.length);\n    final ScoreDoc[] oldDocs = oldHits.scoreDocs;\n    final ScoreDoc[] newDocs = newHits.scoreDocs;\n\n    for(int i=0;i<oldDocs.length;i++) {\n      if (oldDocs[i] instanceof FieldDoc) {\n        assert newDocs[i] instanceof FieldDoc;\n        FieldDoc oldHit = (FieldDoc) oldDocs[i];\n        FieldDoc newHit = (FieldDoc) newDocs[i];\n        assertEquals(\"hit \" + i + \" of \" + oldDocs.length + \" differs: oldDoc=\" + oldHit.doc + \" vs newDoc=\" + newHit.doc + \" oldFields=\" + Arrays.toString(oldHit.fields) + \" newFields=\" + Arrays.toString(newHit.fields),\n                     oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n        assertTrue(Arrays.equals(oldHit.fields, newHit.fields));\n      } else {\n        ScoreDoc oldHit = oldDocs[i];\n        ScoreDoc newHit = newDocs[i];\n        assertEquals(oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90576423481ca5b715ad8c2ebce681817cabb3b1","date":1256332541,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestStressSort#compare(TopDocs,TopDocs).mjava","sourceNew":null,"sourceOld":"  private void compare(TopDocs oldHits, TopDocs newHits) {\n    assertEquals(oldHits.totalHits, newHits.totalHits);\n    assertEquals(oldHits.scoreDocs.length, newHits.scoreDocs.length);\n    final ScoreDoc[] oldDocs = oldHits.scoreDocs;\n    final ScoreDoc[] newDocs = newHits.scoreDocs;\n\n    for(int i=0;i<oldDocs.length;i++) {\n      if (oldDocs[i] instanceof FieldDoc) {\n        assert newDocs[i] instanceof FieldDoc;\n        FieldDoc oldHit = (FieldDoc) oldDocs[i];\n        FieldDoc newHit = (FieldDoc) newDocs[i];\n        assertEquals(\"hit \" + i + \" of \" + oldDocs.length + \" differs: oldDoc=\" + oldHit.doc + \" vs newDoc=\" + newHit.doc + \" oldFields=\" + _TestUtil.arrayToString(oldHit.fields) + \" newFields=\" + _TestUtil.arrayToString(newHit.fields),\n                     oldHit.doc, newHit.doc);\n\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n        assertTrue(Arrays.equals(oldHit.fields, newHit.fields));\n      } else {\n        ScoreDoc oldHit = oldDocs[i];\n        ScoreDoc newHit = newDocs[i];\n        assertEquals(oldHit.doc, newHit.doc);\n        assertEquals(oldHit.score, newHit.score, 0.00001);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"450f1a35b72759406232311bd2621441d6ebbe58":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90576423481ca5b715ad8c2ebce681817cabb3b1":["450f1a35b72759406232311bd2621441d6ebbe58"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90576423481ca5b715ad8c2ebce681817cabb3b1"]},"commit2Childs":{"450f1a35b72759406232311bd2621441d6ebbe58":["90576423481ca5b715ad8c2ebce681817cabb3b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"90576423481ca5b715ad8c2ebce681817cabb3b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63bc3238545c6012bd44f5d294077997f236bc4e":["450f1a35b72759406232311bd2621441d6ebbe58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}