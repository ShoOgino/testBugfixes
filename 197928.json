{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","commits":[{"id":"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","date":1526034899,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (input.incrementToken() == false) {\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          state = TokenState.DELEGATING;\n          return more;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.BUFFERING) {\n        return input.incrementToken();\n      }\n      if (state == TokenState.DELEGATING) {\n        clearAttributes();\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4fa1acecc09ec0a805d2871e87040272a384ab97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (input.incrementToken() == false) {\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          state = TokenState.DELEGATING;\n          return more;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.BUFFERING) {\n        return input.incrementToken();\n      }\n      if (state == TokenState.DELEGATING) {\n        clearAttributes();\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4fa1acecc09ec0a805d2871e87040272a384ab97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6133d5299bf7ee1d673759e77343fc20151fa05a","date":1527605976,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          // we're chopping the underlying Tokenstream up into fragments, and presenting\n          // only those parts of it that pass the filter to the delegate, so the delegate is\n          // in effect seeing multiple tokenstream snippets.  Tokenstreams can't have an initial\n          // position increment of 0, so if the snippet starts on a stacked token we need to\n          // offset it here and then correct the increment back again after delegation\n          boolean adjustPosition = false;\n          if (posIncAtt.getPositionIncrement() == 0) {\n            posIncAtt.setPositionIncrement(1);\n            adjustPosition = true;\n          }\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n            adjustPosition = false;\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            return endDelegating();\n          }\n          return true;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n        return endDelegating();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          // we're chopping the underlying Tokenstream up into fragments, and presenting\n          // only those parts of it that pass the filter to the delegate, so the delegate is\n          // in effect seeing multiple tokenstream snippets.  Tokenstreams can't have an initial\n          // position increment of 0, so if the snippet starts on a stacked token we need to\n          // offset it here and then correct the increment back again after delegation\n          boolean adjustPosition = false;\n          if (posIncAtt.getPositionIncrement() == 0) {\n            posIncAtt.setPositionIncrement(1);\n            adjustPosition = true;\n          }\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fa1acecc09ec0a805d2871e87040272a384ab97","date":1530542172,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    lastTokenFiltered = false;\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n            adjustPosition = false;\n          }\n          else {\n            state = TokenState.READING;\n            return endDelegating();\n          }\n          return true;\n        }\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        lastTokenFiltered = true;\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n        return endDelegating();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n            adjustPosition = false;\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            return endDelegating();\n          }\n          return true;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n        return endDelegating();\n      }\n    }\n  }\n\n","bugFix":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","57e34488c685935a055be1bc57b850be1e8c850d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    lastTokenFiltered = false;\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n            adjustPosition = false;\n          }\n          else {\n            state = TokenState.READING;\n            return endDelegating();\n          }\n          return true;\n        }\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        lastTokenFiltered = true;\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n        return endDelegating();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          // we're chopping the underlying Tokenstream up into fragments, and presenting\n          // only those parts of it that pass the filter to the delegate, so the delegate is\n          // in effect seeing multiple tokenstream snippets.  Tokenstreams can't have an initial\n          // position increment of 0, so if the snippet starts on a stacked token we need to\n          // offset it here and then correct the increment back again after delegation\n          boolean adjustPosition = false;\n          if (posIncAtt.getPositionIncrement() == 0) {\n            posIncAtt.setPositionIncrement(1);\n            adjustPosition = true;\n          }\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    lastTokenFiltered = false;\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n            adjustPosition = false;\n          }\n          else {\n            state = TokenState.READING;\n            return endDelegating();\n          }\n          return true;\n        }\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        lastTokenFiltered = true;\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n        return endDelegating();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (state == TokenState.READING) {\n        if (bufferedState != null) {\n          restoreState(bufferedState);\n          bufferedState = null;\n          lastTokenFiltered = false;\n          return true;\n        }\n        if (exhausted == true) {\n          return false;\n        }\n        if (input.incrementToken() == false) {\n          exhausted = true;\n          return false;\n        }\n        if (shouldFilter()) {\n          // we're chopping the underlying Tokenstream up into fragments, and presenting\n          // only those parts of it that pass the filter to the delegate, so the delegate is\n          // in effect seeing multiple tokenstream snippets.  Tokenstreams can't have an initial\n          // position increment of 0, so if the snippet starts on a stacked token we need to\n          // offset it here and then correct the increment back again after delegation\n          boolean adjustPosition = false;\n          if (posIncAtt.getPositionIncrement() == 0) {\n            posIncAtt.setPositionIncrement(1);\n            adjustPosition = true;\n          }\n          lastTokenFiltered = true;\n          state = TokenState.PREBUFFERING;\n          // we determine that the delegate has emitted all the tokens it can at the current\n          // position when OneTimeWrapper.incrementToken() is called in DELEGATING state.  To\n          // signal this back to the delegate, we return false, so we now need to reset it\n          // to ensure that it can continue to emit more tokens\n          delegate.reset();\n          boolean more = delegate.incrementToken();\n          if (more) {\n            state = TokenState.DELEGATING;\n            if (adjustPosition) {\n              int posInc = posIncAtt.getPositionIncrement();\n              posIncAtt.setPositionIncrement(posInc - 1);\n            }\n          }\n          else {\n            lastTokenFiltered = false;\n            state = TokenState.READING;\n            if (bufferedState != null) {\n              delegate.end();\n              int posInc = posIncAtt.getPositionIncrement();\n              restoreState(bufferedState);\n              posIncAtt.setPositionIncrement(posIncAtt.getPositionIncrement() + posInc);\n              bufferedState = null;\n              return true;\n            }\n          }\n          return more || bufferedState != null;\n        }\n        lastTokenFiltered = false;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        if (delegate.incrementToken()) {\n          return true;\n        }\n        // no more cached tokens\n        state = TokenState.READING;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6133d5299bf7ee1d673759e77343fc20151fa05a","4fa1acecc09ec0a805d2871e87040272a384ab97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["6133d5299bf7ee1d673759e77343fc20151fa05a"],"6133d5299bf7ee1d673759e77343fc20151fa05a":["57e34488c685935a055be1bc57b850be1e8c850d"],"4fa1acecc09ec0a805d2871e87040272a384ab97":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"57e34488c685935a055be1bc57b850be1e8c850d":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fa1acecc09ec0a805d2871e87040272a384ab97"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6133d5299bf7ee1d673759e77343fc20151fa05a","4fa1acecc09ec0a805d2871e87040272a384ab97"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["4fa1acecc09ec0a805d2871e87040272a384ab97"],"6133d5299bf7ee1d673759e77343fc20151fa05a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4fa1acecc09ec0a805d2871e87040272a384ab97":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57e34488c685935a055be1bc57b850be1e8c850d":["6133d5299bf7ee1d673759e77343fc20151fa05a"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}