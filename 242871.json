{"path":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testAllEqual().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testAllEqual().mjava","pathOld":"/dev/null","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verify(missing, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verify(missing, values);\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}