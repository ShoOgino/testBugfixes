{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        tupleParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else {\n        if (factory.isEvaluator((StreamExpression) param)) {\n          StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n          tupleParams.put(name, evaluator);\n        } else {\n          TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n          tupleParams.put(name, tupleStream);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","date":1493430356,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","sourceOld":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        tupleParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else {\n        if (factory.isEvaluator((StreamExpression) param)) {\n          StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n          tupleParams.put(name, evaluator);\n        } else {\n          TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n          tupleParams.put(name, tupleStream);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f790c93fee1c680312ebd5397a0c158a230a82d5","date":1493656357,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      fieldNames.add(name);\n      fieldLabels.put(name, name);\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","sourceOld":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#TupStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public TupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    //Get all the named params\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      fieldNames.add(name);\n      fieldLabels.put(name, name);\n      StreamExpressionParameter param = np.getParameter();\n\n      // we're going to split these up here so we only make the choice once\n      // order of these in read() doesn't matter\n      if(param instanceof StreamExpressionValue) {\n        stringParams.put(name, ((StreamExpressionValue)param).getValue());\n      } else if (factory.isEvaluator((StreamExpression) param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        evaluatorParams.put(name, evaluator);\n      } else if(factory.isStream((StreamExpression)param)) {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        streamParams.put(name, tupleStream);\n      }\n      else{\n        throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - only string, evaluator, or stream named parameters are supported, but param %d is none of those\",expression, name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f790c93fee1c680312ebd5397a0c158a230a82d5"],"f790c93fee1c680312ebd5397a0c158a230a82d5":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f790c93fee1c680312ebd5397a0c158a230a82d5"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f790c93fee1c680312ebd5397a0c158a230a82d5":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["f790c93fee1c680312ebd5397a0c158a230a82d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}