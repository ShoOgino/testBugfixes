{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraphPhrase(TokenStream,BooleanClause.Occur,String,int).mjava","commits":[{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":1,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraphPhrase(TokenStream,BooleanClause.Occur,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraph(TokenStream,BooleanClause.Occur,String,boolean,int).mjava","sourceNew":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraphPhrase(TokenStream source, BooleanClause.Occur operator, String field, int phraseSlop)\n      throws IOException {\n    source.reset();\n    GraphTokenStreamFiniteStrings visitor = new GraphTokenStreamFiniteStrings(source);\n    Iterator<TokenStream> it = visitor.getFiniteStrings();\n    List<Query> queries = new ArrayList<>();\n    while (it.hasNext()) {\n      Query query = createFieldQuery(it.next(), operator, field, true, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","sourceOld":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)\n      throws IOException {\n    source.reset();\n    List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);\n\n    if (tokenStreams.isEmpty()) {\n      return null;\n    }\n\n    List<Query> queries = new ArrayList<>(tokenStreams.size());\n    for (TokenStream ts : tokenStreams) {\n      Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79fd791e91f49ce8026885d7b8ac62bee4c8126","date":1487768721,"type":4,"author":"Jim Ferenczi","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraphPhrase(TokenStream,BooleanClause.Occur,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraphPhrase(TokenStream source, BooleanClause.Occur operator, String field, int phraseSlop)\n      throws IOException {\n    source.reset();\n    GraphTokenStreamFiniteStrings visitor = new GraphTokenStreamFiniteStrings(source);\n    Iterator<TokenStream> it = visitor.getFiniteStrings();\n    List<Query> queries = new ArrayList<>();\n    while (it.hasNext()) {\n      Query query = createFieldQuery(it.next(), operator, field, true, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}