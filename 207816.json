{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","commits":[{"id":"6209d9025a3f5ce74a8295606b15060efd4d7542","date":1442585859,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n\n    //Test map / reduce aggregation\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl)con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["546740f8d88c7cb2343ec9a84ad18f24c66f1d82"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a813196a14e626731f76db3b693930509ef6edd","date":1443824338,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n\n    //Test map / reduce aggregation\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl)con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  @Test\n  public void doTest() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n\n    //Test map / reduce aggregation\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl)con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"546740f8d88c7cb2343ec9a84ad18f24c66f1d82","date":1448382444,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n  }\n\n","sourceOld":"  @Test\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n\n    //Test map / reduce aggregation\n\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl)con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d70b751e35173c43ca80385daa4642aedd91a55","date":1452882611,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd678ee55c5f56766401950747d256e1ab3ceed1","date":1452884159,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bf38d05ea0037f06f6e05ed747948f19a746d3c","date":1453230855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).props;\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).props;\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8002782dd7fef31376fe9c711d16558f2eb34fff","date":1453780561,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7121ec4e1df19472c24776b18057768763038345","date":1454810625,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    stmt.setMaxRows(2);\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop. Since limit is set it will override the statement maxRows\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22793fe1327e6e7ca0322a5bfd8109dd4bf63aff","date":1454812921,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    stmt.setMaxRows(2);\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop. Since limit is set it will override the statement maxRows.\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    stmt.setMaxRows(2);\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop. Since limit is set it will override the statement maxRows\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    stmt.setMaxRows(2);\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop. Since limit is set it will override the statement maxRows.\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f65e571c67472f20b2ffb3db19ee3307497b02c2","date":1455214529,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.getMetaData() != null);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 14);\n          assert(rs.getLong(2) == 14);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 10);\n          assert(rs.getDouble(4) == 10);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 13);\n          assert(rs.getLong(2) == 13);\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(3).equals(\"hello3\"));\n          assert(rs.getDouble(\"a_f\") == 9);\n          assert(rs.getDouble(4) == 9);\n          assert(!rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 0);\n          assert(rs.getLong(2) == 0);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 1);\n          assert(rs.getDouble(4) == 1);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 1);\n          assert(rs.getLong(2) == 1);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 5);\n          assert(rs.getDouble(4) == 5);\n          assert(!rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 14);\n          assert(rs.getLong(2) == 14);\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 13);\n          assert(rs.getLong(2) == 13);\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 0);\n          assert(rs.getLong(2) == 0);\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 1);\n          assert(rs.getLong(2) == 1);\n          assert(!rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assert(count == 10);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n    Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assertTrue(rs.getMetaData() != null);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 10);\n    assert(rs.getDouble(4) == 10);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(3).equals(\"hello3\"));\n    assert(rs.getDouble(\"a_f\") == 9);\n    assert(rs.getDouble(4) == 9);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test statement reuse\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 1);\n    assert(rs.getDouble(4) == 1);\n\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(3).equals(\"hello0\"));\n    assert(rs.getDouble(\"a_f\") == 5);\n    assert(rs.getDouble(4) == 5);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test connection reuse\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 14);\n    assert(rs.getLong(2) == 14);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 13);\n    assert(rs.getLong(2) == 13);\n    stmt.close();\n\n    //Test statement reuse\n    stmt.setMaxRows(2);\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\");\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 0);\n    assert(rs.getLong(2) == 0);\n    assert(rs.next());\n    assert(rs.getLong(\"a_i\") == 1);\n    assert(rs.getLong(2) == 1);\n    assert(!rs.next());\n    stmt.close();\n\n    //Test simple loop. Since limit is set it will override the statement maxRows.\n    rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\");\n    int count = 0;\n    while(rs.next()) {\n      ++count;\n    }\n\n    assert(count == 10);\n\n    stmt.close();\n    con.close();\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props);\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    //Test params on the url\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\");\n\n    Properties p = ((ConnectionImpl) con).getProperties();\n\n    assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n    assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in URL\n    con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\");\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties);\n\n    p = ((ConnectionImpl) con).getProperties();\n    assert(p.getProperty(\"username\").equals(\"\"));\n    assert(p.getProperty(\"password\").equals(\"\"));\n    assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n    assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n    stmt = con.createStatement();\n    rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s order by sum(a_f) desc\");\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello3\"));\n    assert(rs.getString(1).equals(\"hello3\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 26);\n    assert(rs.getDouble(2) == 26);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello0\"));\n    assert(rs.getString(1).equals(\"hello0\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 18);\n    assert(rs.getDouble(2) == 18);\n\n    assert(rs.next());\n    assert(rs.getString(\"a_s\").equals(\"hello4\"));\n    assert(rs.getString(1).equals(\"hello4\"));\n    assert(rs.getDouble(\"sum(a_f)\") == 11);\n    assert(rs.getDouble(2) == 11);\n\n    stmt.close();\n    con.close();\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43766cc04e572e2a94817e249f73d997caff38d6","date":1455215827,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.getMetaData() != null);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 14);\n          assert(rs.getLong(2) == 14);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 10);\n          assert(rs.getDouble(4) == 10);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 13);\n          assert(rs.getLong(2) == 13);\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(3).equals(\"hello3\"));\n          assert(rs.getDouble(\"a_f\") == 9);\n          assert(rs.getDouble(4) == 9);\n          assert(!rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 0);\n          assert(rs.getLong(2) == 0);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 1);\n          assert(rs.getDouble(4) == 1);\n\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 1);\n          assert(rs.getLong(2) == 1);\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(3).equals(\"hello0\"));\n          assert(rs.getDouble(\"a_f\") == 5);\n          assert(rs.getDouble(4) == 5);\n          assert(!rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 14);\n          assert(rs.getLong(2) == 14);\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 13);\n          assert(rs.getLong(2) == 13);\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 0);\n          assert(rs.getLong(2) == 0);\n          assert(rs.next());\n          assert(rs.getLong(\"a_i\") == 1);\n          assert(rs.getLong(2) == 1);\n          assert(!rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assert(count == 10);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello3\"));\n          assert(rs.getString(1).equals(\"hello3\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 26);\n          assert(rs.getDouble(2) == 26);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello0\"));\n          assert(rs.getString(1).equals(\"hello0\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 18);\n          assert(rs.getDouble(2) == 18);\n\n          assert(rs.next());\n          assert(rs.getString(\"a_s\").equals(\"hello4\"));\n          assert(rs.getString(1).equals(\"hello4\"));\n          assert(rs.getDouble(\"sum(a_f)\") == 11);\n          assert(rs.getDouble(2) == 11);\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7674538df4df2e37f827f2aa46675cb1c7c3e4","date":1457468562,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // TODO fix error checking\n    /*\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n    */\n\n    testDriverMetadata();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"EXPR$1\"), 0); //sum(a_f)\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // TODO fix error checking\n    /*\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include at least one aggregate function\"));\n        }\n      }\n    }\n    */\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void doTest() throws Exception {\n\n    waitForRecoveriesToFinish(false);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"testnull_i\", null);\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"testnull_i\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"testnull_i\", null);\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"testnull_i\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"testnull_i\", null);\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\", \"testnull_i\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\", \"testnull_i\", null);\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\", \"testnull_i\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\", \"testnull_i\", null);\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\", \"testnull_i\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n    //Test facet aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    //Test map / reduce aggregation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"map_reduce\");\n    props.put(\"numWorkers\", \"2\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n    \n    //Test params on the url\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \n        \"?collection=collection1&aggregationMode=map_reduce&numWorkers=2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n\n      assert(p.getProperty(\"aggregationMode\").equals(\"map_reduce\"));\n      assert(p.getProperty(\"numWorkers\").equals(\"2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in URL\n    try (Connection con = DriverManager.getConnection(\n        \"jdbc:solr://\" + zkHost + \"?collection=collection1&username=&password=&testKey1=testValue&testKey2\")) {\n\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assertEquals(\"\", p.getProperty(\"username\"));\n      assertEquals(\"\", p.getProperty(\"password\"));\n      assertEquals(\"testValue\", p.getProperty(\"testKey1\"));\n      assertEquals(\"\", p.getProperty(\"testKey2\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n    // Test JDBC paramters in properties\n    Properties providedProperties = new Properties();\n    providedProperties.put(\"collection\", \"collection1\");\n    providedProperties.put(\"username\", \"\");\n    providedProperties.put(\"password\", \"\");\n    providedProperties.put(\"testKey1\", \"testValue\");\n    providedProperties.put(\"testKey2\", \"\");\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost, providedProperties)) {\n      Properties p = ((ConnectionImpl) con).getProperties();\n      assert(p.getProperty(\"username\").equals(\"\"));\n      assert(p.getProperty(\"password\").equals(\"\"));\n      assert(p.getProperty(\"testKey1\").equals(\"testValue\"));\n      assert(p.getProperty(\"testKey2\").equals(\"\"));\n\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select a_s, sum(a_f) from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(1));\n          assertEquals(26, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(26, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(1));\n          assertEquals(18, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(18, rs.getDouble(2), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(\"hello4\", rs.getString(\"a_s\"));\n          assertEquals(\"hello4\", rs.getString(1));\n          assertEquals(11, rs.getDouble(\"sum(a_f)\"), 0);\n          assertEquals(11, rs.getDouble(2), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n    }\n\n\n    //Test error propagation\n    props = new Properties();\n    props.put(\"aggregationMode\", \"facet\");\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select crap from collection1 group by a_s \" +\n            \"order by sum(a_f) desc\")) {\n        } catch (Exception e) {\n          String errorMessage = e.getMessage();\n          assertTrue(errorMessage.contains(\"Group by queries must include atleast one aggregate function\"));\n        }\n      }\n    }\n\n    testDriverMetadata();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#doTest().mjava","sourceNew":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=\" + COLLECTIONORALIAS, props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from \" + COLLECTIONORALIAS + \" order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void doTest() throws Exception {\n\n    Properties props = new Properties();\n\n    try (Connection con = DriverManager.getConnection(\"jdbc:solr://\" + zkHost + \"?collection=collection1\", props)) {\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(10, rs.getDouble(\"a_f\"), 0);\n          assertEquals(10, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n          assertEquals(\"hello3\", rs.getString(\"a_s\"));\n          assertEquals(\"hello3\", rs.getString(3));\n          assertEquals(9, rs.getDouble(\"a_f\"), 0);\n          assertEquals(9, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(1, rs.getDouble(\"a_f\"), 0);\n          assertEquals(1, rs.getDouble(4), 0);\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n          assertEquals(\"hello0\", rs.getString(\"a_s\"));\n          assertEquals(\"hello0\", rs.getString(3));\n          assertEquals(5, rs.getDouble(\"a_f\"), 0);\n          assertEquals(5, rs.getDouble(4), 0);\n\n          assertFalse(rs.next());\n        }\n      }\n\n      //Test connection reuse\n      try (Statement stmt = con.createStatement()) {\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i desc limit 2\")) {\n          assertTrue(rs.next());\n\n          assertEquals(14, rs.getLong(\"a_i\"));\n          assertEquals(14, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(13, rs.getLong(\"a_i\"));\n          assertEquals(13, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test statement reuse\n        stmt.setMaxRows(2);\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc\")) {\n          assertTrue(rs.next());\n\n          assertEquals(0, rs.getLong(\"a_i\"));\n          assertEquals(0, rs.getLong(2));\n\n          assertTrue(rs.next());\n\n          assertEquals(1, rs.getLong(\"a_i\"));\n          assertEquals(1, rs.getLong(2));\n\n          assertFalse(rs.next());\n        }\n\n        //Test simple loop. Since limit is set it will override the statement maxRows.\n        try (ResultSet rs = stmt.executeQuery(\"select id, a_i, a_s, a_f from collection1 order by a_i asc    LIMIT   100\")) {\n          int count = 0;\n          while (rs.next()) {\n            ++count;\n          }\n          assertEquals(10, count);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f65e571c67472f20b2ffb3db19ee3307497b02c2":["22793fe1327e6e7ca0322a5bfd8109dd4bf63aff"],"cd678ee55c5f56766401950747d256e1ab3ceed1":["5d70b751e35173c43ca80385daa4642aedd91a55"],"2e7674538df4df2e37f827f2aa46675cb1c7c3e4":["43766cc04e572e2a94817e249f73d997caff38d6"],"546740f8d88c7cb2343ec9a84ad18f24c66f1d82":["6a813196a14e626731f76db3b693930509ef6edd"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8002782dd7fef31376fe9c711d16558f2eb34fff"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","22793fe1327e6e7ca0322a5bfd8109dd4bf63aff"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["2e7674538df4df2e37f827f2aa46675cb1c7c3e4","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["cd678ee55c5f56766401950747d256e1ab3ceed1"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"5d70b751e35173c43ca80385daa4642aedd91a55":["546740f8d88c7cb2343ec9a84ad18f24c66f1d82"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["8002782dd7fef31376fe9c711d16558f2eb34fff","c39fd399a800c79eff2beaad702c9b6190d499fd"],"34960db40f081388a12ae7131547fb03236705fd":["2e7674538df4df2e37f827f2aa46675cb1c7c3e4"],"7121ec4e1df19472c24776b18057768763038345":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"73450c0955930295d34703e7ddbfc6973b7a121a":["2e7674538df4df2e37f827f2aa46675cb1c7c3e4","b940572a59da1b42b6c20ab5278155b12816807a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["9bf38d05ea0037f06f6e05ed747948f19a746d3c","8d15e34266d75e4e8b95da046cd0afc812367b38"],"6209d9025a3f5ce74a8295606b15060efd4d7542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b940572a59da1b42b6c20ab5278155b12816807a":["2e7674538df4df2e37f827f2aa46675cb1c7c3e4"],"22793fe1327e6e7ca0322a5bfd8109dd4bf63aff":["7121ec4e1df19472c24776b18057768763038345"],"8002782dd7fef31376fe9c711d16558f2eb34fff":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["34960db40f081388a12ae7131547fb03236705fd","b940572a59da1b42b6c20ab5278155b12816807a"],"43766cc04e572e2a94817e249f73d997caff38d6":["f65e571c67472f20b2ffb3db19ee3307497b02c2"],"6a813196a14e626731f76db3b693930509ef6edd":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"f65e571c67472f20b2ffb3db19ee3307497b02c2":["43766cc04e572e2a94817e249f73d997caff38d6"],"cd678ee55c5f56766401950747d256e1ab3ceed1":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"2e7674538df4df2e37f827f2aa46675cb1c7c3e4":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","34960db40f081388a12ae7131547fb03236705fd","73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a"],"546740f8d88c7cb2343ec9a84ad18f24c66f1d82":["5d70b751e35173c43ca80385daa4642aedd91a55"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6209d9025a3f5ce74a8295606b15060efd4d7542"],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8002782dd7fef31376fe9c711d16558f2eb34fff"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d70b751e35173c43ca80385daa4642aedd91a55":["cd678ee55c5f56766401950747d256e1ab3ceed1"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["7121ec4e1df19472c24776b18057768763038345","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"34960db40f081388a12ae7131547fb03236705fd":["bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"7121ec4e1df19472c24776b18057768763038345":["22793fe1327e6e7ca0322a5bfd8109dd4bf63aff"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dd75f58072bba84066e89d61bd7028de1bd5b632"],"6209d9025a3f5ce74a8295606b15060efd4d7542":["6a813196a14e626731f76db3b693930509ef6edd"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"22793fe1327e6e7ca0322a5bfd8109dd4bf63aff":["f65e571c67472f20b2ffb3db19ee3307497b02c2","dd75f58072bba84066e89d61bd7028de1bd5b632"],"8002782dd7fef31376fe9c711d16558f2eb34fff":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"43766cc04e572e2a94817e249f73d997caff38d6":["2e7674538df4df2e37f827f2aa46675cb1c7c3e4"],"6a813196a14e626731f76db3b693930509ef6edd":["546740f8d88c7cb2343ec9a84ad18f24c66f1d82"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}