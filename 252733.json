{"path":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","commits":[{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testTermPositionVectors(final IndexReader reader, int threadCount) {\n\t\tMultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n\t\tfor (int i = 0; i < threadCount; i++) {\n\t\t\tmtr[i] = new MultiThreadTermVectorsReader();\n\t\t\tmtr[i].init(reader);\n\t\t}\n\t\t\n\t\t\n\t\t/** run until all threads finished */ \n\t\tint threadsAlive = mtr.length;\n\t\twhile (threadsAlive > 0) {\n\t\t\ttry {\n\t\t\t\t//System.out.println(\"Threads alive\");\n\t\t\t\tThread.sleep(10);\n\t\t\t\tthreadsAlive = mtr.length;\n\t\t\t\tfor (int i = 0; i < mtr.length; i++) {\n\t\t\t\t\tif (mtr[i].isAlive() == true) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthreadsAlive--; \n\t\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\t} catch (InterruptedException ie) {} \n\t\t}\n\t\t\n\t\tlong totalTime = 0L;\n\t\tfor (int i = 0; i < mtr.length; i++) {\n\t\t\ttotalTime += mtr[i].timeElapsed;\n\t\t\tmtr[i] = null;\n\t\t}\n\t\t\n\t\t//System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n\t\t\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde91cb86cf36b45603c6dfa1c27379a591a17e7","date":1166314240,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","sourceNew":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n      try {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n          \n      }\n        \n      } catch (InterruptedException ie) {} \n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","sourceOld":"\tpublic void testTermPositionVectors(final IndexReader reader, int threadCount) {\n\t\tMultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n\t\tfor (int i = 0; i < threadCount; i++) {\n\t\t\tmtr[i] = new MultiThreadTermVectorsReader();\n\t\t\tmtr[i].init(reader);\n\t\t}\n\t\t\n\t\t\n\t\t/** run until all threads finished */ \n\t\tint threadsAlive = mtr.length;\n\t\twhile (threadsAlive > 0) {\n\t\t\ttry {\n\t\t\t\t//System.out.println(\"Threads alive\");\n\t\t\t\tThread.sleep(10);\n\t\t\t\tthreadsAlive = mtr.length;\n\t\t\t\tfor (int i = 0; i < mtr.length; i++) {\n\t\t\t\t\tif (mtr[i].isAlive() == true) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthreadsAlive--; \n\t\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\t} catch (InterruptedException ie) {} \n\t\t}\n\t\t\n\t\tlong totalTime = 0L;\n\t\tfor (int i = 0; i < mtr.length; i++) {\n\t\t\ttotalTime += mtr[i].timeElapsed;\n\t\t\tmtr[i] = null;\n\t\t}\n\t\t\n\t\t//System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","sourceNew":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","sourceOld":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n      try {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n          \n      }\n        \n      } catch (InterruptedException ie) {} \n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#testTermPositionVectors(IndexReader,int).mjava","sourceNew":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","sourceOld":"  public void testTermPositionVectors(final IndexReader reader, int threadCount) throws Exception {\n    MultiThreadTermVectorsReader[] mtr = new MultiThreadTermVectorsReader[threadCount];\n    for (int i = 0; i < threadCount; i++) {\n      mtr[i] = new MultiThreadTermVectorsReader();\n      mtr[i].init(reader);\n    }\n    \n    \n    /** run until all threads finished */ \n    int threadsAlive = mtr.length;\n    while (threadsAlive > 0) {\n        //System.out.println(\"Threads alive\");\n        Thread.sleep(10);\n        threadsAlive = mtr.length;\n        for (int i = 0; i < mtr.length; i++) {\n          if (mtr[i].isAlive() == true) {\n            break;\n          }\n          \n          threadsAlive--; \n        }\n    }\n    \n    long totalTime = 0L;\n    for (int i = 0; i < mtr.length; i++) {\n      totalTime += mtr[i].timeElapsed;\n      mtr[i] = null;\n    }\n    \n    //System.out.println(\"threadcount: \" + mtr.length + \" average term vector time: \" + totalTime/mtr.length);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"]},"commit2Childs":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}