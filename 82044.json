{"path":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","commits":[{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(SolrCore core) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63fce89dfe8a5dcba79c726470441c175441f122","date":1342202709,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16b6efd02e4685c5a39745a57a88b2e08ceff713","date":1342387813,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9583322dbc8650e3cd32d936c0b3e31eefadba","date":1344482424,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      log.info(\"Running recovery - first canceling any ongoing recovery\");\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name, this);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, CoreDescriptor cd) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      log.info(\"Running recovery - first canceling any ongoing recovery\");\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, cd, this);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    if (cc.isShutDown()) {\n      log.warn(\"Skipping recovery because Solr is shutdown\");\n      return;\n    }\n    \n    synchronized (recoveryLock) {\n      log.info(\"Running recovery - first canceling any ongoing recovery\");\n      cancelRecovery();\n      \n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        // check again for those that were waiting\n        if (cc.isShutDown()) {\n          log.warn(\"Skipping recovery because Solr is shutdown\");\n          return;\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name, this);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"63fce89dfe8a5dcba79c726470441c175441f122":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["16b6efd02e4685c5a39745a57a88b2e08ceff713"],"16b6efd02e4685c5a39745a57a88b2e08ceff713":["63fce89dfe8a5dcba79c726470441c175441f122"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"aba371508186796cc6151d8223a5b4e16d02e26e":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","16b6efd02e4685c5a39745a57a88b2e08ceff713"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","16b6efd02e4685c5a39745a57a88b2e08ceff713"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","ef9583322dbc8650e3cd32d936c0b3e31eefadba"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"]},"commit2Childs":{"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","63fce89dfe8a5dcba79c726470441c175441f122","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"63fce89dfe8a5dcba79c726470441c175441f122":["16b6efd02e4685c5a39745a57a88b2e08ceff713"],"ef9583322dbc8650e3cd32d936c0b3e31eefadba":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"16b6efd02e4685c5a39745a57a88b2e08ceff713":["ef9583322dbc8650e3cd32d936c0b3e31eefadba","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}