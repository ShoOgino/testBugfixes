{"path":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","commits":[{"id":"ee3a275f925be62184fad78d647fa70e27ac7cea","date":1301416659,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/CollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String language = args.remove(\"language\");\n    String country = args.remove(\"country\");\n    String variant = args.remove(\"variant\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    final Collator collator;\n\n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new CollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"c26f00b574427b55127e869b935845554afde1fa":["ee3a275f925be62184fad78d647fa70e27ac7cea","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"ee3a275f925be62184fad78d647fa70e27ac7cea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","ee3a275f925be62184fad78d647fa70e27ac7cea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"ee3a275f925be62184fad78d647fa70e27ac7cea":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}