{"path":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eafe65017ee691866644025d85b041b4880c5e3","date":1355253547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_BUFF);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21cd069815353da1c2012765caf3d48588c38650","date":1488053709,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n    preload = params.getBool(\"preload\", false); //default turn-off\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = args.toSolrParams();\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n    preload = params.getBool(\"preload\", false); //default turn-off\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = SolrParams.toSolrParams( args );\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n    preload = params.getBool(\"preload\", false); //default turn-off\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/MMapDirectoryFactory#init(NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = args.toSolrParams();\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n    preload = params.getBool(\"preload\", false); //default turn-off\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    SolrParams params = args.toSolrParams();\n    maxChunk = params.getInt(\"maxChunkSize\", MMapDirectory.DEFAULT_MAX_CHUNK_SIZE);\n    if (maxChunk <= 0){\n      throw new IllegalArgumentException(\"maxChunk must be greater than 0\");\n    }\n    unmapHack = params.getBool(\"unmap\", true);\n    preload = params.getBool(\"preload\", false); //default turn-off\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21cd069815353da1c2012765caf3d48588c38650":["285cdc737de75b7cc7c284a156b20214deb67bca"],"1eafe65017ee691866644025d85b041b4880c5e3":["c26f00b574427b55127e869b935845554afde1fa"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","1eafe65017ee691866644025d85b041b4880c5e3"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["21cd069815353da1c2012765caf3d48588c38650"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"285cdc737de75b7cc7c284a156b20214deb67bca":["1eafe65017ee691866644025d85b041b4880c5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"21cd069815353da1c2012765caf3d48588c38650":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"1eafe65017ee691866644025d85b041b4880c5e3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","285cdc737de75b7cc7c284a156b20214deb67bca"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1eafe65017ee691866644025d85b041b4880c5e3","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"285cdc737de75b7cc7c284a156b20214deb67bca":["21cd069815353da1c2012765caf3d48588c38650"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}