{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc6d3be942e675e8251dbe10796cdb3a484bf607","date":1358026184,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(long,Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(long node, Arc<T> arc, final BytesReader in) throws IOException {\n    final long address = getNodeAddress(node);\n    in.setPosition(address);\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed || version >= VERSION_VINT_TARGET) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.getPosition();\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0984ad47974c2d5d354519ddb2aa8358973a6271"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["0984ad47974c2d5d354519ddb2aa8358973a6271","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}