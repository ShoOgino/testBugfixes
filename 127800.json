{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","commits":[{"id":"bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89","date":1400688006,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"/dev/null","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test out-of-order (if supported)\n    if (weight.scoresDocsOutOfOrder()) {\n      final AtomicBoolean seen = new AtomicBoolean(false);\n      BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), false, null);\n      assertNotNull(bulkScorer);\n      bulkScorer.score(new LeafCollector() {\n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(seen.get());\n          assertEquals(0, doc);\n          assertEquals(expected, scorer.score(), 0.0001f);\n          seen.set(true);\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      }, 1);\n      assertTrue(seen.get());\n    }\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"/dev/null","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test out-of-order (if supported)\n    if (weight.scoresDocsOutOfOrder()) {\n      final AtomicBoolean seen = new AtomicBoolean(false);\n      BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), false, null);\n      assertNotNull(bulkScorer);\n      bulkScorer.score(new LeafCollector() {\n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(seen.get());\n          assertEquals(0, doc);\n          assertEquals(expected, scorer.score(), 0.0001f);\n          seen.set(true);\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      }, 1);\n      assertTrue(seen.get());\n    }\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"/dev/null","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test out-of-order (if supported)\n    if (weight.scoresDocsOutOfOrder()) {\n      final AtomicBoolean seen = new AtomicBoolean(false);\n      BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), false, null);\n      assertNotNull(bulkScorer);\n      bulkScorer.score(new LeafCollector() {\n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(seen.get());\n          assertEquals(0, doc);\n          assertEquals(expected, scorer.score(), 0.0001f);\n          seen.set(true);\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      }, 1);\n      assertTrue(seen.get());\n    }\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test out-of-order (if supported)\n    if (weight.scoresDocsOutOfOrder()) {\n      final AtomicBoolean seen = new AtomicBoolean(false);\n      BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), false, null);\n      assertNotNull(bulkScorer);\n      bulkScorer.score(new LeafCollector() {\n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          assertFalse(seen.get());\n          assertEquals(0, doc);\n          assertEquals(expected, scorer.score(), 0.0001f);\n          seen.set(true);\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n      }, 1);\n      assertTrue(seen.get());\n    }\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null, true);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null, true);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":["bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null, true);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null, true);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null, true);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n    \n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null, true);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n    \n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null, true);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null, true);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, PostingsEnum.FLAG_FREQS);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, PostingsEnum.FLAG_FREQS);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0));\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, null, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0), null);\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0));\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, null, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0));\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, null, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":null,"sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0));\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, null, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanCoord#assertScore(float,Query).mjava","sourceNew":null,"sourceOld":"  /** asserts score for our single matching good doc */\n  private void assertScore(final float expected, Query query) throws Exception {\n    // test in-order\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertTrue(scorer.docID() == -1 || scorer.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(expected, scorer.score(), 0.0001f);\n\n    // test bulk scorer\n    final AtomicBoolean seen = new AtomicBoolean(false);\n    BulkScorer bulkScorer = weight.bulkScorer(reader.leaves().get(0));\n    assertNotNull(bulkScorer);\n    bulkScorer.score(new LeafCollector() {\n      Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertFalse(seen.get());\n        assertEquals(0, doc);\n        assertEquals(expected, scorer.score(), 0.0001f);\n        seen.set(true);\n      }\n    }, null, 0, 1);\n    assertTrue(seen.get());\n\n    // test the explanation\n    Explanation expl = weight.explain(reader.leaves().get(0), 0);\n    assertEquals(expected, expl.getValue(), 0.0001f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","c8a0e442f7b61f811680273b25da95994a724466"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89"],"c8a0e442f7b61f811680273b25da95994a724466":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"],"bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b7605579001505896d48b07160075a5c8b8e128e":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"bea7ece5e5fd173fc80d6cbdad8a4a03ee9a8d89":["b7605579001505896d48b07160075a5c8b8e128e","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}