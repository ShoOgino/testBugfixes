{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        Set<String> stopWords = new HashSet<String>();\n        stopWords.add(\"in\");\n        stopWords.add(\"it\");\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new StandardAnalyzer(TEST_VERSION_CURRENT, \n            stopWords).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        Set<String> stopWords = new HashSet<String>();\n        stopWords.add(\"in\");\n        stopWords.add(\"it\");\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new StandardAnalyzer(TEST_VERSION_CURRENT, \n            stopWords).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        Set<String> stopWords = new HashSet<String>();\n        stopWords.add(\"in\");\n        stopWords.add(\"it\");\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new StandardAnalyzer(TEST_VERSION_CURRENT, \n            stopWords).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true)\n            .reusableTokenStream(\"text\", new StringReader(text));\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true).tokenStream(\"text\", new StringReader(text)), fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true)\n            .tokenStream(\"text\", new StringReader(text));\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true)\n            .reusableTokenStream(\"text\", new StringReader(text));\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true)\n            .tokenStream(\"text\", new StringReader(text));\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        TokenStream tokenStream = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true)\n            .tokenStream(\"text\", new StringReader(text));\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMaxSizeEndHighlight().mjava","sourceNew":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","sourceOld":"  public void testMaxSizeEndHighlight() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n      @Override\n      public void run() throws Exception {\n        CharacterRunAutomaton stopWords = new CharacterRunAutomaton(new RegExp(\"i[nt]\").toAutomaton());\n        TermQuery query = new TermQuery(new Term(\"text\", \"searchterm\"));\n\n        String text = \"this is a text with searchterm in it\";\n        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();\n        Highlighter hg = getHighlighter(query, \"text\", fm);\n        hg.setTextFragmenter(new NullFragmenter());\n        hg.setMaxDocCharsToAnalyze(36);\n        String match = hg.getBestFragment(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true), \"text\", text);\n        assertTrue(\n            \"Matched text should contain remainder of text after highlighted query \",\n            match.endsWith(\"in it\"));\n      }\n    };\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["69e043c521d4e8db770cc140c63f5ef51f03426a","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cf7efd82433f3f64684711c16edfd149db6af111":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cf7efd82433f3f64684711c16edfd149db6af111","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}