{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkSubShardConsistency(String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkSubShardConsistency(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkSubShardConsistency(String).mjava","sourceNew":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      log.info(\"Shard: \" + shard + \" Replica: {} has {} docs\", coreUrl, String.valueOf(response.getResults().getNumFound()));\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","sourceOld":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      log.info(\"Shard: \" + shard + \" Replica: {} has {} docs\", coreUrl, String.valueOf(response.getResults().getNumFound()));\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkSubShardConsistency(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkSubShardConsistency(String).mjava","sourceNew":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      log.info(\"Shard: \" + shard + \" Replica: {} has {} docs\", coreUrl, String.valueOf(response.getResults().getNumFound()));\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","sourceOld":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      log.info(\"Shard: \" + shard + \" Replica: {} has {} docs\", coreUrl, String.valueOf(response.getResults().getNumFound()));\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkSubShardConsistency(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkSubShardConsistency(String).mjava","sourceNew":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      if (log.isInfoEnabled()) {\n        log.info(\"Shard: {} Replica: {} has {} docs\", shard, coreUrl, String.valueOf(response.getResults().getNumFound()));\n      }\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","sourceOld":"  protected void checkSubShardConsistency(String shard) throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Slice slice = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(shard);\n    long[] numFound = new long[slice.getReplicasMap().size()];\n    int c = 0;\n    for (Replica replica : slice.getReplicas()) {\n      String coreUrl = new ZkCoreNodeProps(replica).getCoreUrl();\n      QueryResponse response;\n      try (HttpSolrClient client = getHttpSolrClient(coreUrl)) {\n        response = client.query(query);\n      }\n      numFound[c++] = response.getResults().getNumFound();\n      log.info(\"Shard: \" + shard + \" Replica: {} has {} docs\", coreUrl, String.valueOf(response.getResults().getNumFound()));\n      assertTrue(\"Shard: \" + shard + \" Replica: \" + coreUrl + \" has 0 docs\", response.getResults().getNumFound() > 0);\n    }\n    for (int i = 0; i < slice.getReplicasMap().size(); i++) {\n      assertEquals(shard + \" is not consistent\", numFound[0], numFound[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}