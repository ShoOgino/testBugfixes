{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationConfiguration(SolrCore).mjava","sourceNew":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            if (log.isInfoEnabled()) {\n              log.info(\"Loading QueryElevation from: {}\", fC.getAbsolutePath());\n            }\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","sourceOld":"  /**\n   * (Re)Loads elevation configuration.\n   *\n   * @param core The core holding this component.\n   * @return The number of elevation rules parsed.\n   */\n  protected int loadElevationConfiguration(SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      elevationProviderCache.clear();\n      String configFileName = initArgs.get(CONFIG_FILE);\n      if (configFileName == null) {\n        // Throw an exception which is handled by handleInitializationException().\n        // If not overridden handleInitializationException() simply skips this exception.\n        throw new InitializationException(\"Missing component parameter \" + CONFIG_FILE + \" - it has to define the path to the elevation configuration file\", InitializationExceptionCause.NO_CONFIG_FILE_DEFINED);\n      }\n      boolean configFileExists = false;\n      ElevationProvider elevationProvider = NO_OP_ELEVATION_PROVIDER;\n\n      // check if using ZooKeeper\n      ZkController zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        // TODO : shouldn't have to keep reading the config name when it has been read before\n        configFileExists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), configFileName);\n      } else {\n        File fC = new File(core.getResourceLoader().getConfigDir(), configFileName);\n        File fD = new File(core.getDataDir(), configFileName);\n        if (fC.exists() == fD.exists()) {\n          InitializationException e = new InitializationException(\"Missing config file \\\"\" + configFileName + \"\\\" - either \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both\", InitializationExceptionCause.MISSING_CONFIG_FILE);\n          elevationProvider = handleConfigLoadingException(e, true);\n          elevationProviderCache.put(null, elevationProvider);\n        } else if (fC.exists()) {\n          if (fC.length() == 0) {\n            InitializationException e = new InitializationException(\"Empty config file \\\"\" + configFileName + \"\\\" - \" + fC.getAbsolutePath(), InitializationExceptionCause.EMPTY_CONFIG_FILE);\n            elevationProvider = handleConfigLoadingException(e, true);\n          } else {\n            configFileExists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            XmlConfigFile cfg = new XmlConfigFile(core.getResourceLoader(), configFileName);\n            elevationProvider = loadElevationProvider(cfg);\n          }\n          elevationProviderCache.put(null, elevationProvider);\n        }\n      }\n      //in other words, we think this is in the data dir, not the conf dir\n      if (!configFileExists) {\n        // preload the first data\n        RefCounted<SolrIndexSearcher> searchHolder = null;\n        try {\n          searchHolder = core.getNewestSearcher(false);\n          if (searchHolder == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n          } else {\n            IndexReader reader = searchHolder.get().getIndexReader();\n            elevationProvider = getElevationProvider(reader, core);\n          }\n        } finally {\n          if (searchHolder != null) searchHolder.decref();\n        }\n      }\n      return elevationProvider.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["2ad458affd82a1d762eb506003907d9363a333cb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["ee622110ba6021d0390037e77574743c1e55348c"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["ee622110ba6021d0390037e77574743c1e55348c","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["ee622110ba6021d0390037e77574743c1e55348c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["575e66bd4b2349209027f6801184da7fc3cba13f","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}