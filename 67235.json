{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","commits":[{"id":"4f77a7e20dbadc238bc591ca864625fbf17c7976","date":1460093626,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          return Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["110006f71d84f0017a83ef5552ff8cbc8dbddbd4","fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"110006f71d84f0017a83ef5552ff8cbc8dbddbd4","date":1460393721,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","sourceNew":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          return Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          return Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","bugFix":["4f77a7e20dbadc238bc591ca864625fbf17c7976"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa76b98015a97f0eca94f0f11fd1b6975838c3ee","date":1461000501,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","sourceNew":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          return Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","bugFix":["4f77a7e20dbadc238bc591ca864625fbf17c7976"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9167ab2d333bb6419d787660d5738852c9f1db60","date":1462255679,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","sourceNew":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(5);\n      switch (shapeType) {\n      case 4: {\n        // Large polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newLargePolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n      \n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","sourceNew":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(5);\n      switch (shapeType) {\n      case 4: {\n        // Large polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newLargePolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n      \n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String,PlanetModel).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#random3DQuery(String).mjava","sourceNew":"  private static Query random3DQuery(final String field, final PlanetModel planetModel) {\n    while (true) {\n      final int shapeType = random().nextInt(5);\n      switch (shapeType) {\n      case 4: {\n        // Large polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newLargePolygonQuery(field, planetModel, makePoly(planetModel,\n            new GeoPoint(planetModel, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n      \n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, planetModel, makePoly(planetModel,\n            new GeoPoint(planetModel, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * planetModel.getMeanRadiusMeters() /*MEAN_EARTH_RADIUS_METERS*/;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, planetModel, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, planetModel, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * planetModel.getMeanRadiusMeters(); /* MEAN_EARTH_RADIUS_METERS;*/\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width, planetModel);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private static Query random3DQuery(final String field) {\n    while (true) {\n      final int shapeType = random().nextInt(5);\n      switch (shapeType) {\n      case 4: {\n        // Large polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newLargePolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n      \n      case 0: {\n        // Polygons\n        final boolean isClockwise = random().nextDouble() < 0.5;\n        try {\n          final Query q = Geo3DPoint.newPolygonQuery(field, makePoly(PlanetModel.WGS84,\n            new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude())),\n            isClockwise,\n            true));\n          //System.err.println(\"Generated: \"+q);\n          //assertTrue(false);\n          return q;\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n        final double widthMeters = random().nextDouble() * Math.PI * MEAN_EARTH_RADIUS_METERS;\n        try {\n          return Geo3DPoint.newDistanceQuery(field, GeoTestUtil.nextLatitude(), GeoTestUtil.nextLongitude(), widthMeters);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        final Rectangle r = GeoTestUtil.nextBox();\n        try {\n          return Geo3DPoint.newBoxQuery(field, r.minLat, r.maxLat, r.minLon, r.maxLon);\n        } catch (IllegalArgumentException e) {\n          continue;\n        }\n      }\n\n      case 3: {\n        // Paths\n        // TBD: Need to rework generation to be realistic\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextDouble() * Math.PI * 0.5 * MEAN_EARTH_RADIUS_METERS;\n        final double[] latitudes = new double[pointCount];\n        final double[] longitudes = new double[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          latitudes[i] = GeoTestUtil.nextLatitude();\n          longitudes[i] = GeoTestUtil.nextLongitude();\n        }\n        try {\n          return Geo3DPoint.newPathQuery(field, latitudes, longitudes, width);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["66817073345fa8e6416a3654a58a741c14745c40"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"110006f71d84f0017a83ef5552ff8cbc8dbddbd4":["4f77a7e20dbadc238bc591ca864625fbf17c7976"],"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["110006f71d84f0017a83ef5552ff8cbc8dbddbd4"],"4f77a7e20dbadc238bc591ca864625fbf17c7976":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["9167ab2d333bb6419d787660d5738852c9f1db60"],"9167ab2d333bb6419d787660d5738852c9f1db60":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee","9167ab2d333bb6419d787660d5738852c9f1db60"]},"commit2Childs":{"110006f71d84f0017a83ef5552ff8cbc8dbddbd4":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["9167ab2d333bb6419d787660d5738852c9f1db60","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4f77a7e20dbadc238bc591ca864625fbf17c7976":["110006f71d84f0017a83ef5552ff8cbc8dbddbd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f77a7e20dbadc238bc591ca864625fbf17c7976"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9167ab2d333bb6419d787660d5738852c9f1db60":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}