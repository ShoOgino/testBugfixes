{"path":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader = IndexReader.openIfChanged(currentSearcher.getIndexReader());\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader = IndexReader.openIfChanged(currentSearcher.getIndexReader());\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716c86307469c3eb41b398f0e35270925e6535fb","date":1322673259,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader = IndexReader.openIfChanged(currentSearcher.getIndexReader());\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherWarmer} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = new IndexSearcher(newReader, es);\n          boolean success = false;\n          try {\n            if (warmer != null) {\n              warmer.warm(newSearcher);\n            }\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof CompositeIndexReader) ?\n            IndexReader.openIfChanged((CompositeIndexReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof CompositeIndexReader) ?\n            IndexReader.openIfChanged((CompositeIndexReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          newReader = IndexReader.openIfChanged(searcherToReopen.getIndexReader());\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#maybeReopen().mjava","sourceNew":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * You must call this, periodically, to perform a reopen. This calls\n   * {@link DirectoryReader#openIfChanged(DirectoryReader)} with the underlying reader, and if that returns a\n   * new reader, it's warmed (if you provided a {@link SearcherFactory} and then\n   * swapped into production.\n   * \n   * <p>\n   * <b>Threads</b>: it's fine for more than one thread to call this at once.\n   * Only the first thread will attempt the reopen; subsequent threads will see\n   * that another thread is already handling reopen and will return immediately.\n   * Note that this means if another thread is already reopening then subsequent\n   * threads will return right away without waiting for the reader reopen to\n   * complete.\n   * </p>\n   * \n   * <p>\n   * This method returns true if a new reader was in fact opened or \n   * if the current searcher has no pending changes.\n   * </p>\n   */\n  public boolean maybeReopen() throws IOException {\n    ensureOpen();\n    // Ensure only 1 thread does reopen at once; other\n    // threads just return immediately:\n    if (reopenLock.tryAcquire()) {\n      try {\n        // IR.openIfChanged preserves NRT and applyDeletes\n        // in the newly returned reader:\n        final IndexReader newReader;\n        final IndexSearcher searcherToReopen = acquire();\n        try {\n          final IndexReader r = searcherToReopen.getIndexReader();\n          newReader = (r instanceof DirectoryReader) ?\n            DirectoryReader.openIfChanged((DirectoryReader) r) :\n            null;\n        } finally {\n          release(searcherToReopen);\n        }\n        if (newReader != null) {\n          final IndexSearcher newSearcher = searcherFactory.newSearcher(newReader);\n          boolean success = false;\n          try {\n            swapSearcher(newSearcher);\n            success = true;\n          } finally {\n            if (!success) {\n              release(newSearcher);\n            }\n          }\n        }\n        return true;\n      } finally {\n        reopenLock.release();\n      }\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["716c86307469c3eb41b398f0e35270925e6535fb"],"716c86307469c3eb41b398f0e35270925e6535fb":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["716c86307469c3eb41b398f0e35270925e6535fb","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["568cba246a11f491637ba492f881589c2142667c","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["568cba246a11f491637ba492f881589c2142667c"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"716c86307469c3eb41b398f0e35270925e6535fb":["568cba246a11f491637ba492f881589c2142667c","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["716c86307469c3eb41b398f0e35270925e6535fb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"893d07555f01912f57b453a320e4d46363a31b50":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}