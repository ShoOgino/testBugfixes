{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","commits":[{"id":"7f04837a83ac5990603e49463c653672a3a31af0","date":1395078441,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (initial != other.initial) return false;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (initial != other.initial) return false;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (initial != other.initial) return false;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (maxInterval != other.maxInterval) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!accept.equals(other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    RunAutomaton other = (RunAutomaton) obj;\n    if (alphabetSize != other.alphabetSize) return false;\n    if (size != other.size) return false;\n    if (!Arrays.equals(points, other.points)) return false;\n    if (!Arrays.equals(accept, other.accept)) return false;\n    if (!Arrays.equals(transitions, other.transitions)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b7543e96e2d4820e09334d36a699b998ed963f4f","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["7f04837a83ac5990603e49463c653672a3a31af0"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"7f04837a83ac5990603e49463c653672a3a31af0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7f04837a83ac5990603e49463c653672a3a31af0","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["022a4de90e0479b604264ca9c2e134c996454ab3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"7f04837a83ac5990603e49463c653672a3a31af0":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f04837a83ac5990603e49463c653672a3a31af0"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}