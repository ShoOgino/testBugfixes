{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","commits":[{"id":"775c2566119fc914aaa5f131744dd2810a204565","date":1400612867,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#skipOutput(DataInput).mjava","sourceNew":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bytesSize = (bits >>> 2);\n    if (bit0 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit1 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void skipOutput(DataInput in) throws IOException {\n    int bits = in.readByte() & 0xff;\n    int bit0 = bits & 1;\n    int bit1 = bits & 2;\n    int bit2 = bits & 4;\n    int bytesSize = (bits >>> 3);\n    if (bit1 > 0 && bytesSize == 0) {  // determine extra length\n      bytesSize = in.readVInt();\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        in.readVLong();\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      in.skipBytes(bytesSize);\n    }\n    if (bit2 > 0) {  // stats exist\n      int code = in.readVInt();\n      if (hasPos && (code & 1) == 0) {\n        in.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"775c2566119fc914aaa5f131744dd2810a204565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["775c2566119fc914aaa5f131744dd2810a204565"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","775c2566119fc914aaa5f131744dd2810a204565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"775c2566119fc914aaa5f131744dd2810a204565":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["775c2566119fc914aaa5f131744dd2810a204565","b7605579001505896d48b07160075a5c8b8e128e"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}