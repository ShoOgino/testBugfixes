{"path":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testMaxScoreSegment().mjava","commits":[{"id":"fd80b885e3e9bdc61935e784f634562d13b81979","date":1533736198,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testMaxScoreSegment().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxScoreSegment() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n    for (String[] values : Arrays.asList(\n        new String[]{ \"A\" },            // 0\n        new String[]{ \"A\" },            // 1\n        new String[]{ },                // 2\n        new String[]{ \"A\", \"B\" },       // 3\n        new String[]{ \"A\" },            // 4\n        new String[]{ \"B\" },            // 5\n        new String[]{ \"A\", \"B\" },       // 6\n        new String[]{ \"B\" }             // 7\n    )) {\n      Document doc = new Document();\n      for (String value : values) {\n        doc.add(new StringField(\"foo\", value, Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    w.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    final Query reqQ = new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"A\")));\n    final Query optQ = new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"B\")));\n    Scorer scorer = reqOptScorer(searcher, reqQ, optQ, false);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(6, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = reqOptScorer(searcher, reqQ, optQ, false);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.score(), 0);\n    assertEquals(6, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = reqOptScorer(searcher, reqQ, optQ, false);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(3, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(6, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.score(), 0);\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = reqOptScorer(searcher, reqQ, optQ, true);\n    scorer.setMinCompetitiveScore(Math.nextUp(2f));\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd80b885e3e9bdc61935e784f634562d13b81979":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd80b885e3e9bdc61935e784f634562d13b81979"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd80b885e3e9bdc61935e784f634562d13b81979"],"fd80b885e3e9bdc61935e784f634562d13b81979":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}