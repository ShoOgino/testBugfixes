{"path":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","commits":[{"id":"cad90908fe6b90a8b7310dc8c2dceac34341580c","date":1344538399,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random();\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1b624a118bf870bda7038fe218ec9db6f4f9d8","date":1344545508,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(0);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random();\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f7c2b66566d56264957825c2aaaf804b0145a9","date":1344546975,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(base);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(0);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(base);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(base);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#indexDocs(int,int,int).mjava","sourceNew":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(base);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      client.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public static void indexDocs(int base, int count, int maxSleep) throws IOException, SolrServerException {\n    Random r = new Random(base);\n\n    for (int i=base; i<count+base; i++) {\n      if ((i & 0xfffff) == 0) {\n        System.out.print(\"\\n% \" + new Date()+ \"\\t\" + i + \"\\t\");\n        System.out.flush();\n      }\n\n      if ((i & 0xffff) == 0) {\n        System.out.print(\".\");\n        System.out.flush();\n      }\n\n      SolrInputDocument doc = getDocument(i);\n      server.add(doc);\n\n      if (maxSleep > 0) {\n        int sleep = r.nextInt(maxSleep);\n        try {\n          Thread.sleep(sleep);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          e.printStackTrace();\n          throw new RuntimeException(e);\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f7c2b66566d56264957825c2aaaf804b0145a9":["7a1b624a118bf870bda7038fe218ec9db6f4f9d8"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f7c2b66566d56264957825c2aaaf804b0145a9"],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["89f7c2b66566d56264957825c2aaaf804b0145a9"],"7a1b624a118bf870bda7038fe218ec9db6f4f9d8":["cad90908fe6b90a8b7310dc8c2dceac34341580c"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f7c2b66566d56264957825c2aaaf804b0145a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"89f7c2b66566d56264957825c2aaaf804b0145a9":["c7869f64c874ebf7f317d22c00baf2b6857797a6","bafca15d8e408346a67f4282ad1143b88023893b","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["7a1b624a118bf870bda7038fe218ec9db6f4f9d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","cad90908fe6b90a8b7310dc8c2dceac34341580c","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a1b624a118bf870bda7038fe218ec9db6f4f9d8":["89f7c2b66566d56264957825c2aaaf804b0145a9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}