{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a16b40feb4e6e0d55c1716733bde48296bedd20","date":1400540388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    // nocommit hmmm what to do\n    /*\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    */\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), r.getLiveDocs(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    // nocommit hmmm what to do\n    /*\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    */\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a621dd071a902e1fd30367200d7bbbea037706","date":1400686915,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), r.getLiveDocs(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedVsFieldCache(int,int).mjava","sourceNew":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedVsFieldCache(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field indexedField = new StringField(\"indexed\", \"\", Field.Store.NO);\n    Field dvField = new SortedDocValuesField(\"dv\", new BytesRef());\n    doc.add(idField);\n    doc.add(indexedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      String value = TestUtil.randomSimpleString(random(), length);\n      indexedField.setStringValue(value);\n      dvField.setBytesValue(new BytesRef(value));\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedDocValues expected = FieldCache.DEFAULT.getTermsIndex(r, \"indexed\");\n      SortedDocValues actual = r.getSortedDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["56572ec06f1407c066d6b7399413178b33176cd8"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"45a621dd071a902e1fd30367200d7bbbea037706":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["c9fb5f46e264daf5ba3860defe623a89d202dd87","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","0e121d43b5a10f2df530f406f935102656e9c4e8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0a16b40feb4e6e0d55c1716733bde48296bedd20":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"45a621dd071a902e1fd30367200d7bbbea037706":[],"0efcf27cd5ca23def8376b4c321970c14dd71623":["45a621dd071a902e1fd30367200d7bbbea037706"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["45a621dd071a902e1fd30367200d7bbbea037706","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}