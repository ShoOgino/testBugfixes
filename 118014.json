{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n    \n    if (leftReader.getUniqueTermCount() != -1 && rightReader.getUniqueTermCount() != -1) {\n      assertEquals(info, leftReader.getUniqueTermCount(), rightReader.getUniqueTermCount());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n  }\n\n","sourceOld":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n    \n    if (leftReader.getUniqueTermCount() != -1 && rightReader.getUniqueTermCount() != -1) {\n      assertEquals(info, leftReader.getUniqueTermCount(), rightReader.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n  }\n\n","sourceOld":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n    \n    if (leftReader.getUniqueTermCount() != -1 && rightReader.getUniqueTermCount() != -1) {\n      assertEquals(info, leftReader.getUniqueTermCount(), rightReader.getUniqueTermCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertReaderStatistics(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n  }\n\n","sourceOld":"  /** \n   * checks that reader-level statistics are the same \n   */\n  public void assertReaderStatistics(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    // Somewhat redundant: we never delete docs\n    assertEquals(info, leftReader.maxDoc(), rightReader.maxDoc());\n    assertEquals(info, leftReader.numDocs(), rightReader.numDocs());\n    assertEquals(info, leftReader.numDeletedDocs(), rightReader.numDeletedDocs());\n    assertEquals(info, leftReader.hasDeletions(), rightReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0445bcd8433e331f296f5502fc089b336cbac3a6","868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}