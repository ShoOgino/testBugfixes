{"path":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c518d12136e15c9de6fa3d2c4bf5add07311a685","date":1313718511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private synchronized void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b0203706833d89696e68ebfc15ecdc12ff58acd","date":1315510060,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    if (commitMaxTime <= 0) return;\n    synchronized (this) {\n      if (pending != null && pending.getDelay(TimeUnit.MILLISECONDS) <= commitMaxTime) {\n        // There is already a pending commit that will happen first, so\n        // nothing else to do here.\n        // log.info(\"###returning since getDelay()==\" + pending.getDelay(TimeUnit.MILLISECONDS) + \" less than \" + commitMaxTime);\n\n        return;\n      }\n\n      if (pending != null) {\n        // we need to schedule a commit to happen sooner than the existing one,\n        // so lets try to cancel the existing one first.\n        boolean canceled = pending.cancel(false);\n        if (!canceled) {\n          // It looks like we can't cancel... it must have just started running!\n          // this is possible due to thread scheduling delays and a low commitMaxTime.\n          // Nothing else to do since we obviously can't schedule our commit *before*\n          // the one that just started running (or has just completed).\n          // log.info(\"###returning since cancel failed\");\n          return;\n        }\n      }\n\n      // log.info(\"###scheduling for \" + commitMaxTime);\n\n      // schedule our new commit\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private synchronized void _scheduleCommitWithin(long commitMaxTime) {\n    // Check if there is a commit already scheduled for longer then this time\n    if (pending != null\n        && pending.getDelay(TimeUnit.MILLISECONDS) >= commitMaxTime) {\n      pending.cancel(false);\n      pending = null;\n    }\n    \n    // schedule a new commit\n    if (pending == null) {\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":["7a71a0b2d4be2299a163f60626729852d81a8e02","c518d12136e15c9de6fa3d2c4bf5add07311a685"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CommitTracker#_scheduleCommitWithin(long).mjava","sourceNew":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    if (commitMaxTime <= 0) return;\n    synchronized (this) {\n      if (pending != null && pending.getDelay(TimeUnit.MILLISECONDS) <= commitMaxTime) {\n        // There is already a pending commit that will happen first, so\n        // nothing else to do here.\n        // log.info(\"###returning since getDelay()=={} less than {}\", pending.getDelay(TimeUnit.MILLISECONDS), commitMaxTime);\n\n        return;\n      }\n\n      if (pending != null) {\n        // we need to schedule a commit to happen sooner than the existing one,\n        // so lets try to cancel the existing one first.\n        boolean canceled = pending.cancel(false);\n        if (!canceled) {\n          // It looks like we can't cancel... it must have just started running!\n          // this is possible due to thread scheduling delays and a low commitMaxTime.\n          // Nothing else to do since we obviously can't schedule our commit *before*\n          // the one that just started running (or has just completed).\n          // log.info(\"###returning since cancel failed\");\n          return;\n        }\n      }\n\n      // log.info(\"###scheduling for \" + commitMaxTime);\n\n      // schedule our new commit\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  private void _scheduleCommitWithin(long commitMaxTime) {\n    if (commitMaxTime <= 0) return;\n    synchronized (this) {\n      if (pending != null && pending.getDelay(TimeUnit.MILLISECONDS) <= commitMaxTime) {\n        // There is already a pending commit that will happen first, so\n        // nothing else to do here.\n        // log.info(\"###returning since getDelay()==\" + pending.getDelay(TimeUnit.MILLISECONDS) + \" less than \" + commitMaxTime);\n\n        return;\n      }\n\n      if (pending != null) {\n        // we need to schedule a commit to happen sooner than the existing one,\n        // so lets try to cancel the existing one first.\n        boolean canceled = pending.cancel(false);\n        if (!canceled) {\n          // It looks like we can't cancel... it must have just started running!\n          // this is possible due to thread scheduling delays and a low commitMaxTime.\n          // Nothing else to do since we obviously can't schedule our commit *before*\n          // the one that just started running (or has just completed).\n          // log.info(\"###returning since cancel failed\");\n          return;\n        }\n      }\n\n      // log.info(\"###scheduling for \" + commitMaxTime);\n\n      // schedule our new commit\n      pending = scheduler.schedule(this, commitMaxTime, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e35f2dde06b35aa9904949a3a93fabd090371077"]},"commit2Childs":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["e35f2dde06b35aa9904949a3a93fabd090371077"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e35f2dde06b35aa9904949a3a93fabd090371077":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}