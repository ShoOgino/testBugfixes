{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,Replica> shards = entry.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n\n          final Replica.State state = shard.getValue().getState();\n          if (state != Replica.State.ACTIVE) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state.toString());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n      if (docCollection == null || docCollection.getSlices() == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      \n      Map<String,Slice> slices = docCollection.getSlicesMap();\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","bugFix":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","c5a558d54519c651068ddb202f03befefb1514a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n      if (docCollection == null || docCollection.getSlices() == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      \n      Map<String,Slice> slices = docCollection.getSlicesMap();\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n      if (docCollection == null || docCollection.getSlices() == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n\n      Map<String,Slice> slices = docCollection.getSlicesMap();\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected static void assertAllActive(String collection, ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.forceUpdateCollection(collection);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n      if (docCollection == null || docCollection.getSlices() == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      \n      Map<String,Slice> slices = docCollection.getSlicesMap();\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Slice slice = entry.getValue();\n        if (slice.getState() != Slice.State.ACTIVE) {\n          fail(\"Not all shards are ACTIVE - found a shard \" + slice.getName() + \" that is: \" + slice.getState());\n        }\n        Map<String,Replica> shards = slice.getReplicasMap();\n        for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n          Replica replica = shard.getValue();\n          if (replica.getState() != Replica.State.ACTIVE) {\n            fail(\"Not all replicas are ACTIVE - found a replica \" + replica.getName() + \" that is: \" + replica.getState());\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"344b0840364d990b29b97467bfcc766ff8325d11":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["c5a558d54519c651068ddb202f03befefb1514a7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","344b0840364d990b29b97467bfcc766ff8325d11"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"a219f1dcad1700e84807666bdbd2b573e8de7021":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["344b0840364d990b29b97467bfcc766ff8325d11","55b50463286869f584cf849d1587a0fcd54d1dfa","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","55b50463286869f584cf849d1587a0fcd54d1dfa","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}