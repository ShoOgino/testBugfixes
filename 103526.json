{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd0491419a55db5050f375ec779df63ce76d9db5","date":1302545750,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // MockAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // MockAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:MockAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().reusableTokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().reusableTokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","fd0491419a55db5050f375ec779df63ce76d9db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","fd0491419a55db5050f375ec779df63ce76d9db5"],"fd0491419a55db5050f375ec779df63ce76d9db5":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd0491419a55db5050f375ec779df63ce76d9db5"],"cf7efd82433f3f64684711c16edfd149db6af111":["fd0491419a55db5050f375ec779df63ce76d9db5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","fd0491419a55db5050f375ec779df63ce76d9db5","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd0491419a55db5050f375ec779df63ce76d9db5":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cf7efd82433f3f64684711c16edfd149db6af111"],"962d04139994fce5193143ef35615499a9a96d78":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}