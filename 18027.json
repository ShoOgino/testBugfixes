{"path":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testRandomNestPathQueryFiltering().mjava","commits":[{"id":"0b5e0da3b576580fb2128e87467fa5f579ca2c33","date":1599081383,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor#testRandomNestPathQueryFiltering().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Randomized test to look for flaws in the documented approach for building \"safe\" values of the \n   * <code>of</code> / <code>which</code> params in the <code>child</code> / <code>parent</code> QParsers\n   * when a specific <code>_nest_path_</code> is desired\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-14687\">SOLR-14687</a>\n   */\n  public void testRandomNestPathQueryFiltering() throws Exception {\n\n    // First: build a bunch of complex randomly nested documents, with random \"nest paths\"\n    // re-use the same \"path segments\" at various levels of nested, so as to confuse things even more\n    final RandomNestedDocModel docs = new RandomNestedDocModel();\n    for (int i = 0; i < 50; i++) {\n      final SolrInputDocument rootDoc = docs.buildRandomDoc();\n      assertU(adoc(rootDoc));\n    }\n    assertU(commit());\n\n    // now do some systematic parent/child queries.\n    // we're checking both for \"parser errors\" (ie: children matching \"parent filter\")\n    // as well as that the test_path_s of all matching docs meets our expectations\n\n    // *:* w/ parent parser...\n    // starts at \"root\" parent_path and recurses until we get no (expected) results\n    assertTrue(// we expected at least one query for every \"real\" path,\n               // but there will be more because we'll try lots of sub-paths that have no docs\n               docs.numDocsDescendentFromPath.keySet().size()\n               < docs.recursiveCheckParentQueryOfAllChildren(Collections.<String>emptyList()));\n    // sanity check: path that is garunteed not to exist...\n    assertEquals(1, docs.recursiveCheckParentQueryOfAllChildren(Arrays.asList(\"xxx\", \"yyy\")));\n\n    // *:* w/ child parser...\n    // starts at \"root\" parent_path and recurses until we get no (expected) results\n    assertTrue(// we expected at least one query for every \"real\" path,\n               // but there will be more because we'll try lots of sub-paths that have no docs\n               docs.numDocsWithPathWithKids.keySet().size()\n               < docs.recursiveCheckChildQueryOfAllParents(Collections.<String>emptyList()));\n    // sanity check: path that is garunteed not to exist...\n    assertEquals(1, docs.recursiveCheckChildQueryOfAllParents(Arrays.asList(\"xxx\", \"yyy\")));\n\n    // quering against individual child ids w/ both parent & child parser...\n    docs.checkParentAndChildQueriesOfEachDocument();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}