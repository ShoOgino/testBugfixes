{"path":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarityProvider(s.getSimilarityProvider());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#wrapUnderlyingReader(Random,IndexSearcher,int).mjava","sourceNew":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given an IndexSearcher, returns a new IndexSearcher whose IndexReader \n   * is a MultiReader containing the Reader of the original IndexSearcher, \n   * as well as several \"empty\" IndexReaders -- some of which will have \n   * deleted documents in them.  This new IndexSearcher should \n   * behave exactly the same as the original IndexSearcher.\n   * @param s the searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in the middle, if positive s will be the last sub\n   */\n  public static IndexSearcher wrapUnderlyingReader(Random random, final IndexSearcher s, final int edge) \n    throws IOException {\n\n    IndexReader r = s.getIndexReader();\n\n    // we can't put deleted docs before the nested reader, because\n    // it will throw off the docIds\n    IndexReader[] readers = new IndexReader[] {\n      edge < 0 ? r : emptyReaders[0],\n      emptyReaders[0],\n      new MultiReader(edge < 0 ? emptyReaders[4] : emptyReaders[0],\n          emptyReaders[0],\n          0 == edge ? r : emptyReaders[0]),\n      0 < edge ? emptyReaders[0] : emptyReaders[7],\n      emptyReaders[0],\n      new MultiReader(0 < edge ? emptyReaders[0] : emptyReaders[5],\n          emptyReaders[0],\n          0 < edge ? r : emptyReaders[0])\n    };\n    IndexSearcher out = LuceneTestCase.newSearcher(new MultiReader(readers));\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}