{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 100 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 100 * ONE_BYTE);\n    acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 100 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 100 * ONE_BYTE);\n    acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":null,"sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 100 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 100 * ONE_BYTE);\n    acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) acc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n           \"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["19275ba31e621f6da1b83bf13af75233876fd3d4","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}