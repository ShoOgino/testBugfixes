{"path":"lucene/core/src/java/org/apache/lucene/index/ByteSliceReader#init(ByteBlockPool,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ByteSliceReader#init(ByteBlockPool,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteSliceReader#init(ByteBlockPool,int,int).mjava","sourceNew":"  public void init(ByteBlockPool pool, int startIndex, int endIndex) {\n\n    assert endIndex-startIndex >= 0;\n    assert startIndex >= 0;\n    assert endIndex >= 0;\n\n    this.pool = pool;\n    this.endIndex = endIndex;\n\n    level = 0;\n    bufferUpto = startIndex / ByteBlockPool.BYTE_BLOCK_SIZE;\n    bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;\n    buffer = pool.buffers[bufferUpto];\n    upto = startIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n\n    final int firstSize = ByteBlockPool.levelSizeArray[0];\n\n    if (startIndex+firstSize >= endIndex) {\n      // There is only this one slice to read\n      limit = endIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n    } else\n      limit = upto+firstSize-4;\n  }\n\n","sourceOld":"  public void init(ByteBlockPool pool, int startIndex, int endIndex) {\n\n    assert endIndex-startIndex >= 0;\n    assert startIndex >= 0;\n    assert endIndex >= 0;\n\n    this.pool = pool;\n    this.endIndex = endIndex;\n\n    level = 0;\n    bufferUpto = startIndex / ByteBlockPool.BYTE_BLOCK_SIZE;\n    bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;\n    buffer = pool.buffers[bufferUpto];\n    upto = startIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n\n    final int firstSize = ByteBlockPool.levelSizeArray[0];\n\n    if (startIndex+firstSize >= endIndex) {\n      // There is only this one slice to read\n      limit = endIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n    } else\n      limit = upto+firstSize-4;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ByteSliceReader#init(ByteBlockPool,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ByteSliceReader#init(ByteBlockPool,int,int).mjava","sourceNew":"  public void init(ByteBlockPool pool, int startIndex, int endIndex) {\n\n    assert endIndex-startIndex >= 0;\n    assert startIndex >= 0;\n    assert endIndex >= 0;\n\n    this.pool = pool;\n    this.endIndex = endIndex;\n\n    level = 0;\n    bufferUpto = startIndex / ByteBlockPool.BYTE_BLOCK_SIZE;\n    bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;\n    buffer = pool.buffers[bufferUpto];\n    upto = startIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n\n    final int firstSize = ByteBlockPool.LEVEL_SIZE_ARRAY[0];\n\n    if (startIndex+firstSize >= endIndex) {\n      // There is only this one slice to read\n      limit = endIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n    } else\n      limit = upto+firstSize-4;\n  }\n\n","sourceOld":"  public void init(ByteBlockPool pool, int startIndex, int endIndex) {\n\n    assert endIndex-startIndex >= 0;\n    assert startIndex >= 0;\n    assert endIndex >= 0;\n\n    this.pool = pool;\n    this.endIndex = endIndex;\n\n    level = 0;\n    bufferUpto = startIndex / ByteBlockPool.BYTE_BLOCK_SIZE;\n    bufferOffset = bufferUpto * ByteBlockPool.BYTE_BLOCK_SIZE;\n    buffer = pool.buffers[bufferUpto];\n    upto = startIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n\n    final int firstSize = ByteBlockPool.levelSizeArray[0];\n\n    if (startIndex+firstSize >= endIndex) {\n      // There is only this one slice to read\n      limit = endIndex & ByteBlockPool.BYTE_BLOCK_MASK;\n    } else\n      limit = upto+firstSize-4;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}