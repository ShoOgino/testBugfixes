{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#doRequest(String,Req,Rsp,boolean,boolean).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#doRequest(String,Req,Rsp,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#doRequest(HttpSolrClient,Req,Rsp,boolean,boolean,String).mjava","sourceNew":"  protected Exception doRequest(String baseUrl, Req req, Rsp rsp, boolean isNonRetryable,\n                                boolean isZombie) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = baseUrl;\n      req.getRequest().setBasePath(baseUrl);\n      rsp.rsp = getClient(baseUrl).request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(baseUrl);\n      }\n    } catch (HttpSolrClient.RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(baseUrl);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(HttpSolrClient client, Req req, Rsp rsp, boolean isNonRetryable,\n      boolean isZombie, String zombieKey) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = client.getBaseURL();\n      rsp.rsp = client.request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(zombieKey);\n      }\n    } catch (RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(zombieKey);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#doRequest(String,Req,Rsp,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#doRequest(String,Req,Rsp,boolean,boolean).mjava","sourceNew":"  protected Exception doRequest(String baseUrl, Req req, Rsp rsp, boolean isNonRetryable,\n                                boolean isZombie) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = baseUrl;\n      req.getRequest().setBasePath(baseUrl);\n      rsp.rsp = getClient(baseUrl).request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(baseUrl);\n      }\n    } catch (BaseHttpSolrClient.RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(baseUrl);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","sourceOld":"  protected Exception doRequest(String baseUrl, Req req, Rsp rsp, boolean isNonRetryable,\n                                boolean isZombie) throws SolrServerException, IOException {\n    Exception ex = null;\n    try {\n      rsp.server = baseUrl;\n      req.getRequest().setBasePath(baseUrl);\n      rsp.rsp = getClient(baseUrl).request(req.getRequest(), (String) null);\n      if (isZombie) {\n        zombieServers.remove(baseUrl);\n      }\n    } catch (HttpSolrClient.RemoteExecutionException e){\n      throw e;\n    } catch(SolrException e) {\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n      if (!isNonRetryable && RETRY_CODES.contains(e.code())) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        // Server is alive but the request was likely malformed or invalid\n        if (isZombie) {\n          zombieServers.remove(baseUrl);\n        }\n        throw e;\n      }\n    } catch (SocketException e) {\n      if (!isNonRetryable || e instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SocketTimeoutException e) {\n      if (!isNonRetryable) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isNonRetryable && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else if (isNonRetryable && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(baseUrl, e) : e;\n      } else {\n        throw e;\n      }\n    } catch (Exception e) {\n      throw new SolrServerException(e);\n    }\n\n    return ex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}