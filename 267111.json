{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok.term());\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok.term());\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok.term());\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          @Override\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          @Override\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          @Override\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestRemoveDuplicatesTokenFilter#testDups(String,Token...).mjava","sourceNew":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          @Override\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","sourceOld":"  public void testDups(final String expected, final Token... tokens)\n    throws Exception {\n\n    final Iterator<Token> toks = Arrays.asList(tokens).iterator();\n    final TokenStream ts = new RemoveDuplicatesTokenFilter(\n      (new TokenStream() {\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);\n          @Override\n          public boolean incrementToken() {\n            if (toks.hasNext()) {\n              clearAttributes();\n              Token tok = toks.next();\n              termAtt.setEmpty().append(tok);\n              offsetAtt.setOffset(tok.startOffset(), tok.endOffset());\n              posIncAtt.setPositionIncrement(tok.getPositionIncrement());\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }));\n    \n    assertTokenStreamContents(ts, expected.split(\"\\\\s\"));   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a7347509fad0711ac30cb15a746e9a3830a38ebd","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}