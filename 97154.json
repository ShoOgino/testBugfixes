{"path":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8c0f611d9f8048dca2d4acb5c146712f593eaa","date":1504833165,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw READ_PAST_EOF;\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw READ_PAST_EOF;\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw READ_PAST_EOF;\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f43184d94158070757ac9bb9d71dc7b72925013","date":1600412010,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/parser/FastCharStream#refill().mjava","sourceNew":null,"sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n  buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n  char[] newBuffer = new char[buffer.length*2];\n  System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n  buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw READ_PAST_EOF;\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["3cdb67100dc016748799a77218aa409478372d79","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["3cdb67100dc016748799a77218aa409478372d79","ab8c0f611d9f8048dca2d4acb5c146712f593eaa"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f43184d94158070757ac9bb9d71dc7b72925013":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"ab8c0f611d9f8048dca2d4acb5c146712f593eaa":["3cdb67100dc016748799a77218aa409478372d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f43184d94158070757ac9bb9d71dc7b72925013"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","5f43184d94158070757ac9bb9d71dc7b72925013"],"3cdb67100dc016748799a77218aa409478372d79":["685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","407687e67faf6e1f02a211ca078d8e3eed631027","ab8c0f611d9f8048dca2d4acb5c146712f593eaa"],"5f43184d94158070757ac9bb9d71dc7b72925013":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ab8c0f611d9f8048dca2d4acb5c146712f593eaa":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}