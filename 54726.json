{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(request, baos);\n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/octet-stream\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":["18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() throws IOException {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() throws IOException {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      @Override\n      public String getName() {\n        return null;\n      }\n\n      @Override\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      @Override\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      @Override\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      @Override\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      @Override\n      public String getName() {\n        return null;\n      }\n\n      @Override\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      @Override\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      @Override\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      @Override\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      public String getName() {\n        return null;\n      }\n\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97bcd657104d24ce5e89db102939e68a6784bdda","date":1509417991,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStream(UpdateRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public ContentStream getContentStream(final UpdateRequest request) throws IOException {\n    final BAOS baos = new BAOS();\n    new JavaBinUpdateRequestCodec().marshal(request, baos);\n    \n    return new ContentStream() {\n      @Override\n      public String getName() {\n        return null;\n      }\n\n      @Override\n      public String getSourceInfo() {\n        return \"javabin\";\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n\n      @Override\n      public Long getSize() // size if we know it, otherwise null\n      {\n        return new Long(baos.size());\n      }\n\n      @Override\n      public InputStream getStream() {\n        return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n      }\n\n      @Override\n      public Reader getReader() {\n        throw new RuntimeException(\"No reader available . this is a binarystream\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"042e4d934397657ba04c82b46cc5665076bc5c58":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["042e4d934397657ba04c82b46cc5665076bc5c58","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97bcd657104d24ce5e89db102939e68a6784bdda":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["042e4d934397657ba04c82b46cc5665076bc5c58"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97bcd657104d24ce5e89db102939e68a6784bdda"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["042e4d934397657ba04c82b46cc5665076bc5c58"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"97bcd657104d24ce5e89db102939e68a6784bdda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","97bcd657104d24ce5e89db102939e68a6784bdda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}