{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CopyOfRangeEvaluator#evaluate(Tuple).mjava","commits":[{"id":"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5","date":1495492928,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CopyOfRangeEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] vals = new double[numbers1.size()];\n\n    for(int i=0; i<vals.length; i++) {\n      vals[i] = numbers1.get(i).doubleValue();\n    }\n\n    StreamEvaluator startIndexEval = subEvaluators.get(1);\n    Number startIndexNum = (Number)startIndexEval.evaluate(tuple);\n    int startIndex = startIndexNum.intValue();\n\n    StreamEvaluator endIndexEval = subEvaluators.get(2);\n    Number endIndexNum = (Number)endIndexEval.evaluate(tuple);\n    int endIndex = endIndexNum.intValue();\n\n    vals = Arrays.copyOfRange(vals, startIndex, endIndex);\n\n    List<Number> copyOf = new ArrayList(vals.length);\n\n    for(int i=0; i<vals.length; i++) {\n      copyOf.add(vals[i]);\n    }\n\n    return copyOf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfRangeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CopyOfRangeEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] vals = new double[numbers1.size()];\n\n    for(int i=0; i<vals.length; i++) {\n      vals[i] = numbers1.get(i).doubleValue();\n    }\n\n    StreamEvaluator startIndexEval = subEvaluators.get(1);\n    Number startIndexNum = (Number)startIndexEval.evaluate(tuple);\n    int startIndex = startIndexNum.intValue();\n\n    StreamEvaluator endIndexEval = subEvaluators.get(2);\n    Number endIndexNum = (Number)endIndexEval.evaluate(tuple);\n    int endIndex = endIndexNum.intValue();\n\n    vals = Arrays.copyOfRange(vals, startIndex, endIndex);\n\n    List<Number> copyOf = new ArrayList(vals.length);\n\n    for(int i=0; i<vals.length; i++) {\n      copyOf.add(vals[i]);\n    }\n\n    return copyOf;\n  }\n\n","sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] vals = new double[numbers1.size()];\n\n    for(int i=0; i<vals.length; i++) {\n      vals[i] = numbers1.get(i).doubleValue();\n    }\n\n    StreamEvaluator startIndexEval = subEvaluators.get(1);\n    Number startIndexNum = (Number)startIndexEval.evaluate(tuple);\n    int startIndex = startIndexNum.intValue();\n\n    StreamEvaluator endIndexEval = subEvaluators.get(2);\n    Number endIndexNum = (Number)endIndexEval.evaluate(tuple);\n    int endIndex = endIndexNum.intValue();\n\n    vals = Arrays.copyOfRange(vals, startIndex, endIndex);\n\n    List<Number> copyOf = new ArrayList(vals.length);\n\n    for(int i=0; i<vals.length; i++) {\n      copyOf.add(vals[i]);\n    }\n\n    return copyOf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfRangeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CopyOfRangeEvaluator#evaluate(Tuple).mjava","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] vals = new double[numbers1.size()];\n\n    for(int i=0; i<vals.length; i++) {\n      vals[i] = numbers1.get(i).doubleValue();\n    }\n\n    StreamEvaluator startIndexEval = subEvaluators.get(1);\n    Number startIndexNum = (Number)startIndexEval.evaluate(tuple);\n    int startIndex = startIndexNum.intValue();\n\n    StreamEvaluator endIndexEval = subEvaluators.get(2);\n    Number endIndexNum = (Number)endIndexEval.evaluate(tuple);\n    int endIndex = endIndexNum.intValue();\n\n    vals = Arrays.copyOfRange(vals, startIndex, endIndex);\n\n    List<Number> copyOf = new ArrayList(vals.length);\n\n    for(int i=0; i<vals.length; i++) {\n      copyOf.add(vals[i]);\n    }\n\n    return copyOf;\n  }\n\n","sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] vals = new double[numbers1.size()];\n\n    for(int i=0; i<vals.length; i++) {\n      vals[i] = numbers1.get(i).doubleValue();\n    }\n\n    StreamEvaluator startIndexEval = subEvaluators.get(1);\n    Number startIndexNum = (Number)startIndexEval.evaluate(tuple);\n    int startIndex = startIndexNum.intValue();\n\n    StreamEvaluator endIndexEval = subEvaluators.get(2);\n    Number endIndexNum = (Number)endIndexEval.evaluate(tuple);\n    int endIndex = endIndexNum.intValue();\n\n    vals = Arrays.copyOfRange(vals, startIndex, endIndex);\n\n    List<Number> copyOf = new ArrayList(vals.length);\n\n    for(int i=0; i<vals.length; i++) {\n      copyOf.add(vals[i]);\n    }\n\n    return copyOf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5"],"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5":["12cb83a3f761dc612e1ece020f46e1886fc2550e","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}