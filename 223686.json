{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValues.Type dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"Collector class name=\" + distinctValuesCollector.getClass().getName());\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expected.uniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<Comparable<?>>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<Comparable<?>>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347","date":1399827661,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        DocValuesType dvType = context.dvType;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7d9cc55f861840a92a2bda7a9985ec2e2485902","date":1399828429,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        DocValuesType dvType = context.dvType;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        boolean useDv = context.dvType != null && random.nextBoolean();\n        DocValuesType dvType = useDv ? context.dvType : null;\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(dvType, groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"DVType=\" + dvType);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        AbstractFirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = (List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>>) distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          AbstractDistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, groupField, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, groupField, countField);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<?>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<?>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<?>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<?>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<?>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0, false));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = atLeast(1);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      IndexContext context = createIndexContext();\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        final IndexSearcher searcher = newSearcher(context.indexReader);\n        String term = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        Sort groupSort = new Sort(new SortField(\"id\", SortField.Type.STRING));\n        int topN = 1 + random.nextInt(10);\n\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> expectedResult = createExpectedResult(context, term, groupSort, topN);\n\n        FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(groupSort, GROUP_FIELD, topN);\n        searcher.search(new TermQuery(new Term(\"content\", term)), firstCollector);\n        DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n            = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n        searcher.search(new TermQuery(new Term(\"content\", term)), distinctValuesCollector);\n        @SuppressWarnings(\"unchecked\")\n        List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> actualResult = distinctValuesCollector.getGroups();\n\n        if (VERBOSE) {\n          System.out.println(\"Index iter=\" + indexIter);\n          System.out.println(\"Search iter=\" + searchIter);\n          System.out.println(\"1st pass collector class name=\" + firstCollector.getClass().getName());\n          System.out.println(\"2nd pass collector class name=\" + distinctValuesCollector.getClass().getName());\n          System.out.println(\"Search term=\" + term);\n          System.out.println(\"1st pass groups=\" + firstCollector.getTopGroups(0));\n          System.out.println(\"Expected:\");      \n          printGroups(expectedResult);\n          System.out.println(\"Actual:\");      \n          printGroups(actualResult);\n        }\n\n        assertEquals(expectedResult.size(), actualResult.size());\n        for (int i = 0; i < expectedResult.size(); i++) {\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> expected = expectedResult.get(i);\n          DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>> actual = actualResult.get(i);\n          assertValues(expected.groupValue, actual.groupValue);\n          assertEquals(expected.uniqueValues.size(), actual.uniqueValues.size());\n          List<Comparable<?>> expectedUniqueValues = new ArrayList<>(expected.uniqueValues);\n          Collections.sort(expectedUniqueValues, nullComparator);\n          List<Comparable<?>> actualUniqueValues = new ArrayList<>(actual.uniqueValues);\n          Collections.sort(actualUniqueValues, nullComparator);\n          for (int j = 0; j < expectedUniqueValues.size(); j++) {\n            assertValues(expectedUniqueValues.get(j), actualUniqueValues.get(j));\n          }\n        }\n      }\n      context.indexReader.close();\n      context.directory.close();\n    }\n  }\n\n","bugFix":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f20fd35e3055a0c5b387df0b986a68d65d86441"],"5de502b5478255493125e7e801411ba17a6682ec":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["97d4692d0c601ff773f0a2231967312428a904e4"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["20e94e61fe5291647346b70437617e6b6c370408"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["93dd449115a9247533e44bab47e8429e5dccbc6d","20e94e61fe5291647346b70437617e6b6c370408"],"56572ec06f1407c066d6b7399413178b33176cd8":["6613659748fe4411a7dcf85266e55db1f95f7315","93dd449115a9247533e44bab47e8429e5dccbc6d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0837ab0472feecb3a54260729d845f839e1cbd72"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["6613659748fe4411a7dcf85266e55db1f95f7315","d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["6d1c58e9d1ed4b363d0b00ad5209e1b01c418347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"5de502b5478255493125e7e801411ba17a6682ec":["7ae958a739da1866696f442384393ba2f13e33e5"],"20e94e61fe5291647346b70437617e6b6c370408":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"6613659748fe4411a7dcf85266e55db1f95f7315":["56572ec06f1407c066d6b7399413178b33176cd8","6d1c58e9d1ed4b363d0b00ad5209e1b01c418347","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04c370507e5521b2eb998530736f1c19b851ed5a":["71da933d30aea361ccc224d6544c451cbf49916d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","854f97cd3613b9579fba83755c80b697e2f3993f"],"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347":["d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8"],"97d4692d0c601ff773f0a2231967312428a904e4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"854f97cd3613b9579fba83755c80b697e2f3993f":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}