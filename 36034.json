{"path":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","commits":[{"id":"c20f931a6f10b153366015604398a5eb7a4d17fa","date":1249615266,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,CachingTokenFilter,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private SpanScorer getSpanQueryScorer(Query query, String fieldName, CachingTokenFilter tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n\n    if (reqFieldMatch) {\n      return new SpanScorer(query, fieldName, tokenStream, highlightMultiTerm);\n    }\n    else {\n      return new SpanScorer(query, null, tokenStream, highlightMultiTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7181b75752244f676e4634e90792409f5a3457f5","date":1254059910,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a SpanScorer suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7181b75752244f676e4634e90792409f5a3457f5"],"7181b75752244f676e4634e90792409f5a3457f5":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["7181b75752244f676e4634e90792409f5a3457f5"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7181b75752244f676e4634e90792409f5a3457f5":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}