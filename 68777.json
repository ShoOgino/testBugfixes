{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","commits":[{"id":"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a","date":1164667221,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(null);\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["39899cd24f88f2d580857d57be8aebc1f467f5c6","39899cd24f88f2d580857d57be8aebc1f467f5c6","39899cd24f88f2d580857d57be8aebc1f467f5c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7aef5adbca53f7820aa6289dda74f595ed816ac7","date":1166101420,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(null);\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testNotLazyField().mjava","sourceNew":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","sourceOld":"  public void testNotLazyField() throws IOException {\n    for(int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", new Integer(i).toString(), \n                   \"title\", \"keyword\",\n                   \"test_hlt\", mkstr(20000)));\n    }\n    assertU(commit());\n    SolrCore core = h.getCore();\n   \n    SolrQueryRequest req = req(\"q\", \"title:keyword\", \"fl\", \"id,title,test_hlt\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n    DocList dl = (DocList) rsp.getValues().get(\"response\");\n    org.apache.lucene.document.Document d = req.getSearcher().doc(dl.iterator().nextDoc());\n    // ensure field is not lazy\n    assertTrue( d.getFieldable(\"test_hlt\") instanceof Field );\n    assertTrue( d.getFieldable(\"title\") instanceof Field );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}