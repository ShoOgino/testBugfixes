{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterClose().mjava","sourceNew":null,"sourceOld":"  // Make sure reader remains usable even if IndexWriter closes\n  public void testAfterClose() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    _TestUtil.checkIndex(dir1);\n\n    // reader should remain usable even after IndexWriter is closed:\n    assertEquals(100, r.numDocs());\n    Query q = new TermQuery(new Term(\"indexname\", \"test\"));\n    assertEquals(100, new IndexSearcher(r).search(q, 10).totalHits);\n\n    try {\n      r.reopen();\n      fail(\"failed to hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n    r.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}