{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","commits":[{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Object> metricsKeyVsTag) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTag.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(0.0, val.min);\n    assertEquals(1.0, val.max);\n    assertEquals(0, Preference.compareWithTolerance(val.actual.doubleValue(), 0.833, 1));\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Object> metricsKeyVsTag) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTag.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(0.0, val.min);\n    assertEquals(1.0, val.max);\n    assertEquals(0, Preference.compareWithTolerance(val.actual.doubleValue(), 0.833, 1));\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Object> metricsKeyVsTag) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTag.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(0.0, val.min);\n    assertEquals(1.0, val.max);\n    assertEquals(0, Preference.compareWithTolerance(val.actual.doubleValue(), 0.833, 1));\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(1.0d, val.min.doubleValue(), 0.01);\n    assertEquals(2.0, val.max.doubleValue(), 0.01);\n    assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n    assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String solrNode, Map<String, Object> metricsKeyVsTag) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTag.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(0.0, val.min);\n    assertEquals(1.0, val.max);\n    assertEquals(0, Preference.compareWithTolerance(val.actual.doubleValue(), 0.833, 1));\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else{\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    Violation violation = violations.get(0);\n    assertEquals(\"node1\", violation.node);\n    RangeVal val = (RangeVal) violation.getClause().replica.val;\n    assertEquals(1.0d, val.min.doubleValue(), 0.01);\n    assertEquals(2.0, val.max.doubleValue(), 0.01);\n    assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n    assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n    assertEquals(3, violation.getViolatingReplicas().size());\n    Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n      assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n    }\n    System.out.println();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else{\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","bugFix":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCoreName()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, ReplicaInfo>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCore()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testEqualFunction().mjava","sourceNew":null,"sourceOld":"  public void testEqualFunction() {\n\n    String clusterStateStr = \"{\" +\n        \"  'coll1': {\" +\n        \"    'router': {\" +\n        \"      'name': 'compositeId'\" +\n        \"    },\" +\n        \"    'shards': {\" +\n        \"      'shard1': {\" +\n        \"        'range': '80000000-ffffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r1': {\" +\n        \"            'core': 'r1',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r2': {\" +\n        \"            'core': 'r2',\" +\n        \"            'base_url': 'http://10.0.0.4:7574/solr',\" +\n        \"            'node_name': 'node2',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      'shard2': {\" +\n        \"        'range': '0-7fffffff',\" +\n        \"        'replicas': {\" +\n        \"          'r3': {\" +\n        \"            'core': 'r3',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active',\" +\n        \"            'leader': 'true'\" +\n        \"          },\" +\n        \"          'r4': {\" +\n        \"            'core': 'r4',\" +\n        \"            'base_url': 'http://10.0.0.4:8987/solr',\" +\n        \"            'node_name': 'node4',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r6': {\" +\n        \"            'core': 'r6',\" +\n        \"            'base_url': 'http://10.0.0.4:8989/solr',\" +\n        \"            'node_name': 'node3',\" +\n        \"            'state': 'active'\" +\n        \"          },\" +\n        \"          'r5': {\" +\n        \"            'core': 'r5',\" +\n        \"            'base_url': 'http://10.0.0.4:8983/solr',\" +\n        \"            'node_name': 'node1',\" +\n        \"            'state': 'active'\" +\n        \"          }\" +\n        \"        }\" +\n        \"      }\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n\n    ClusterState clusterState = ClusterState.createFromJson(1, clusterStateStr.getBytes(UTF_8),\n        ImmutableSet.of(\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"));\n    DelegatingClusterStateProvider clusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return clusterState.getLiveNodes();\n      }\n    };\n\n    SolrClientNodeStateProvider solrClientNodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n        Map<String, Object> result = new HashMap<>();\n        AtomicInteger cores = new AtomicInteger();\n        forEachReplica(node, replicaInfo -> cores.incrementAndGet());\n        if (tags.contains(ImplicitSnitch.CORES)) result.put(ImplicitSnitch.CORES, cores.get());\n        if (tags.contains(ImplicitSnitch.DISK)) result.put(ImplicitSnitch.DISK, 100);\n        return result;\n      }\n\n      @Override\n      protected Map<String, Object> fetchReplicaMetrics(String node, Map<String, Pair<String, Replica>> metricsKeyVsTagReplica) {\n        //e.g: solr.core.perReplicaDataColl.shard1.replica_n4:INDEX.sizeInBytes\n        Map<String, Object> result = new HashMap<>();\n        metricsKeyVsTagReplica.forEach((k, v) -> {\n          if (k.endsWith(\":INDEX.sizeInBytes\")) result.put(k, 100);\n        });\n\n        return result;\n      }\n\n      @Override\n      protected ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n    };\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#EQUAL', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return clusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return solrClientNodeStateProvider;\n      }\n    });\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"node1\")) {\n        RangeVal val = (RangeVal) violation.getClause().replica.val;\n        assertEquals(1.0d, val.min.doubleValue(), 0.01);\n        assertEquals(2.0, val.max.doubleValue(), 0.01);\n        assertEquals(1.2d, val.actual.doubleValue(), 0.01d);\n        assertEquals(1, violation.replicaCountDelta.doubleValue(), 0.01);\n        assertEquals(3, violation.getViolatingReplicas().size());\n        Set<String> expected = ImmutableSet.of(\"r1\", \"r3\", \"r5\");\n        for (Violation.ReplicaInfoAndErr replicaInfoAndErr : violation.getViolatingReplicas()) {\n          assertTrue(expected.contains(replicaInfoAndErr.replicaInfo.getCoreName()));\n        }\n      } else if (violation.node.equals(\"node5\")) {\n        assertEquals(-1, violation.replicaCountDelta.doubleValue(), 0.01);\n\n      } else {\n        fail();\n      }\n    }\n//    Violation violation = violations.get(0);\n//    assertEquals(\"node1\", violation.node);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["52316373036b9f161a08896e7c9ebf4389790a47"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"52316373036b9f161a08896e7c9ebf4389790a47":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}