{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b","date":1398175632,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lock != null) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lock != null) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lock != null) return true;\n    \n    // Look if lock file is definitely not present; if not, there can definitely be no lock!\n    if (Files.notExists(path)) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lock != null) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lock != null) return true;\n    \n    // Look if lock file is definitely not present; if not, there can definitely be no lock!\n    if (Files.notExists(path)) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) close();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b":["0fcdcf196523675146a4df3193e91413533857ab"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["0fcdcf196523675146a4df3193e91413533857ab","ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0fcdcf196523675146a4df3193e91413533857ab":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f4abec28b874149a7223e32cc7a01704c27790de"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0fcdcf196523675146a4df3193e91413533857ab":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0fcdcf196523675146a4df3193e91413533857ab"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}