{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","sourceNew":"  private SortedDocValues getSorted(SortedEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptySorted();\n    }\n\n    final LongValues ords;\n    if (entry.bitsPerValue == 0) {\n      ords = new LongValues() {\n        @Override\n        public long get(long index) {\n          return 0L;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.ordsOffset, entry.ordsLength);\n      ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n    }\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new BaseSortedDocValues(entry, data) {\n\n        int doc = -1;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(doc);\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new BaseSortedDocValues(entry, data) {\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private SortedDocValues getSorted(SortedEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptySorted();\n    }\n\n    final LongValues ords;\n    if (entry.bitsPerValue == 0) {\n      ords = new LongValues() {\n        @Override\n        public long get(long index) {\n          return 0L;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.ordsOffset, entry.ordsLength);\n      ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n    }\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new BaseSortedDocValues(entry, data) {\n\n        int doc = -1;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(doc);\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new BaseSortedDocValues(entry, data) {\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","sourceNew":"  private SortedDocValues getSorted(SortedEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptySorted();\n    }\n\n    final LongValues ords;\n    if (entry.bitsPerValue == 0) {\n      ords = new LongValues() {\n        @Override\n        public long get(long index) {\n          return 0L;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.ordsOffset, entry.ordsLength);\n      ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n    }\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new BaseSortedDocValues(entry, data) {\n\n        int doc = -1;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(doc);\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new BaseSortedDocValues(entry, data) {\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private SortedDocValues getSorted(SortedEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptySorted();\n    }\n\n    final LongValues ords;\n    if (entry.bitsPerValue == 0) {\n      ords = new LongValues() {\n        @Override\n        public long get(long index) {\n          return 0L;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.ordsOffset, entry.ordsLength);\n      ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n    }\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new BaseSortedDocValues(entry, data) {\n\n        int doc = -1;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(doc);\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new BaseSortedDocValues(entry, data) {\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSorted(SortedEntry).mjava","sourceNew":null,"sourceOld":"  private SortedDocValues getSorted(SortedEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      return DocValues.emptySorted();\n    }\n\n    final LongValues ords;\n    if (entry.bitsPerValue == 0) {\n      ords = new LongValues() {\n        @Override\n        public long get(long index) {\n          return 0L;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.ordsOffset, entry.ordsLength);\n      ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n    }\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new BaseSortedDocValues(entry, data) {\n\n        int doc = -1;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(doc);\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new BaseSortedDocValues(entry, data) {\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int ordValue() {\n          return (int) ords.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}