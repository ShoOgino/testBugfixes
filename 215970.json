{"path":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eed5547b2f58afdc475cc06312622f5bcf220c2","date":1284156494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<Integer> newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator<Integer>() {\n      \n      FieldCache.DocTermsIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n      private final BytesRef tempBR = new BytesRef();\n\n      @Override\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      @Override\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        BytesRef id = idIndex.getTerm(doc, tempBR);\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      @Override\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      @Override\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      @Override\n      public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {\n        idIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, fieldname);\n        return this;\n      }\n\n      @Override\n      public Integer value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["323f871ffe96b871d8c534a614be60751bb023c2"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"323f871ffe96b871d8c534a614be60751bb023c2":["9eed5547b2f58afdc475cc06312622f5bcf220c2"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9eed5547b2f58afdc475cc06312622f5bcf220c2","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9eed5547b2f58afdc475cc06312622f5bcf220c2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"323f871ffe96b871d8c534a614be60751bb023c2":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["c26f00b574427b55127e869b935845554afde1fa","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9eed5547b2f58afdc475cc06312622f5bcf220c2":["323f871ffe96b871d8c534a614be60751bb023c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}