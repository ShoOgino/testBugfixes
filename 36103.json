{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","commits":[{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","pathOld":"/dev/null","sourceNew":"  static MutableImpactList readImpacts(ByteArrayDataInput in, MutableImpactList reuse) {\n    int maxNumImpacts = in.length(); // at most one impact per byte\n    if (reuse.impacts.length < maxNumImpacts) {\n      int oldLength = reuse.impacts.length;\n      reuse.impacts = ArrayUtil.grow(reuse.impacts, maxNumImpacts);\n      for (int i = oldLength; i < reuse.impacts.length; ++i) {\n        reuse.impacts[i] = new Impact(Integer.MAX_VALUE, 1L);\n      }\n    }\n\n    int freq = 0;\n    long norm = 0;\n    int length = 0;\n    while (in.getPosition() < in.length()) {\n      int freqDelta = in.readVInt();\n      if ((freqDelta & 0x01) != 0) {\n        freq += 1 + (freqDelta >>> 1);\n        try {\n          norm += 1 + in.readZLong();\n        } catch (IOException e) {\n          throw new RuntimeException(e); // cannot happen on a BADI\n        }\n      } else {\n        freq += 1 + (freqDelta >>> 1);\n        norm++;\n      }\n      Impact impact = reuse.impacts[length];\n      impact.freq = freq;\n      impact.norm = norm;\n      length++;\n    }\n    reuse.length = length;\n    return reuse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","sourceNew":"  static MutableImpactList readImpacts(ByteArrayDataInput in, MutableImpactList reuse) {\n    int maxNumImpacts = in.length(); // at most one impact per byte\n    if (reuse.impacts.length < maxNumImpacts) {\n      int oldLength = reuse.impacts.length;\n      reuse.impacts = ArrayUtil.grow(reuse.impacts, maxNumImpacts);\n      for (int i = oldLength; i < reuse.impacts.length; ++i) {\n        reuse.impacts[i] = new Impact(Integer.MAX_VALUE, 1L);\n      }\n    }\n\n    int freq = 0;\n    long norm = 0;\n    int length = 0;\n    while (in.getPosition() < in.length()) {\n      int freqDelta = in.readVInt();\n      if ((freqDelta & 0x01) != 0) {\n        freq += 1 + (freqDelta >>> 1);\n        try {\n          norm += 1 + in.readZLong();\n        } catch (IOException e) {\n          throw new RuntimeException(e); // cannot happen on a BADI\n        }\n      } else {\n        freq += 1 + (freqDelta >>> 1);\n        norm++;\n      }\n      Impact impact = reuse.impacts[length];\n      impact.freq = freq;\n      impact.norm = norm;\n      length++;\n    }\n    reuse.length = length;\n    return reuse;\n  }\n\n","sourceOld":"  static MutableImpactList readImpacts(ByteArrayDataInput in, MutableImpactList reuse) {\n    int maxNumImpacts = in.length(); // at most one impact per byte\n    if (reuse.impacts.length < maxNumImpacts) {\n      int oldLength = reuse.impacts.length;\n      reuse.impacts = ArrayUtil.grow(reuse.impacts, maxNumImpacts);\n      for (int i = oldLength; i < reuse.impacts.length; ++i) {\n        reuse.impacts[i] = new Impact(Integer.MAX_VALUE, 1L);\n      }\n    }\n\n    int freq = 0;\n    long norm = 0;\n    int length = 0;\n    while (in.getPosition() < in.length()) {\n      int freqDelta = in.readVInt();\n      if ((freqDelta & 0x01) != 0) {\n        freq += 1 + (freqDelta >>> 1);\n        try {\n          norm += 1 + in.readZLong();\n        } catch (IOException e) {\n          throw new RuntimeException(e); // cannot happen on a BADI\n        }\n      } else {\n        freq += 1 + (freqDelta >>> 1);\n        norm++;\n      }\n      Impact impact = reuse.impacts[length];\n      impact.freq = freq;\n      impact.norm = norm;\n      length++;\n    }\n    reuse.length = length;\n    return reuse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50ScoreSkipReader#readImpacts(ByteArrayDataInput,MutableImpactList).mjava","sourceNew":"  static MutableImpactList readImpacts(ByteArrayDataInput in, MutableImpactList reuse) {\n    int maxNumImpacts = in.length(); // at most one impact per byte\n    if (reuse.impacts.length < maxNumImpacts) {\n      int oldLength = reuse.impacts.length;\n      reuse.impacts = ArrayUtil.grow(reuse.impacts, maxNumImpacts);\n      for (int i = oldLength; i < reuse.impacts.length; ++i) {\n        reuse.impacts[i] = new Impact(Integer.MAX_VALUE, 1L);\n      }\n    }\n\n    int freq = 0;\n    long norm = 0;\n    int length = 0;\n    while (in.getPosition() < in.length()) {\n      int freqDelta = in.readVInt();\n      if ((freqDelta & 0x01) != 0) {\n        freq += 1 + (freqDelta >>> 1);\n        try {\n          norm += 1 + in.readZLong();\n        } catch (IOException e) {\n          throw new RuntimeException(e); // cannot happen on a BADI\n        }\n      } else {\n        freq += 1 + (freqDelta >>> 1);\n        norm++;\n      }\n      Impact impact = reuse.impacts[length];\n      impact.freq = freq;\n      impact.norm = norm;\n      length++;\n    }\n    reuse.length = length;\n    return reuse;\n  }\n\n","sourceOld":"  static MutableImpactList readImpacts(ByteArrayDataInput in, MutableImpactList reuse) {\n    int maxNumImpacts = in.length(); // at most one impact per byte\n    if (reuse.impacts.length < maxNumImpacts) {\n      int oldLength = reuse.impacts.length;\n      reuse.impacts = ArrayUtil.grow(reuse.impacts, maxNumImpacts);\n      for (int i = oldLength; i < reuse.impacts.length; ++i) {\n        reuse.impacts[i] = new Impact(Integer.MAX_VALUE, 1L);\n      }\n    }\n\n    int freq = 0;\n    long norm = 0;\n    int length = 0;\n    while (in.getPosition() < in.length()) {\n      int freqDelta = in.readVInt();\n      if ((freqDelta & 0x01) != 0) {\n        freq += 1 + (freqDelta >>> 1);\n        try {\n          norm += 1 + in.readZLong();\n        } catch (IOException e) {\n          throw new RuntimeException(e); // cannot happen on a BADI\n        }\n      } else {\n        freq += 1 + (freqDelta >>> 1);\n        norm++;\n      }\n      Impact impact = reuse.impacts[length];\n      impact.freq = freq;\n      impact.norm = norm;\n      length++;\n    }\n    reuse.length = length;\n    return reuse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}