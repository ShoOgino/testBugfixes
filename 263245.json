{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,ScoreMode,SimScorer,float,boolean).mjava","commits":[{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,ScoreMode,SimScorer,float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, ScoreMode scoreMode, SimScorer scorer, float matchCost, boolean captureLeadMatch) {\n    super(matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n\n    approximation = ConjunctionDISI.intersectIterators(Arrays.stream(postings).map(p -> p.postings).collect(Collectors.toList()));\n    // What would be a good upper bound of the sloppy frequency? A sum of the\n    // sub frequencies would be correct, but it is usually so much higher than\n    // the actual sloppy frequency that it doesn't help skip irrelevant\n    // documents. As a consequence for now, sloppy phrase queries use dummy\n    // impacts:\n    final ImpactsSource impactsSource = new ImpactsSource() {\n      @Override\n      public Impacts getImpacts() throws IOException {\n        return new Impacts() {\n\n          @Override\n          public int numLevels() {\n            return 1;\n          }\n\n          @Override\n          public List<Impact> getImpacts(int level) {\n            return Collections.singletonList(new Impact(Integer.MAX_VALUE, 1L));\n          }\n\n          @Override\n          public int getDocIdUpTo(int level) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n        };\n      }\n\n      @Override\n      public void advanceShallow(int target) throws IOException {}\n    };\n    impactsApproximation = new ImpactsDISI(approximation, impactsSource, scorer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}