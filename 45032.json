{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","commits":[{"id":"ec317d5d3de749e12abcc9e6f976d765638fe9e2","date":1454411397,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush();\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush();\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush();\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4","date":1454411794,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","sourceNew":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush();\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush();\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush();\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d686e50b3c24dcfcfbfb32482ee0c710975ec50","date":1454535987,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","sourceNew":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush();\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush();\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush();\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","sourceNew":"  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":"  public void testReplicateForceMerge() throws Exception {\n\n    Node.globalStartNS = System.nanoTime();\n    childTempDir = createTempDir(\"child\");\n\n    message(\"change thread name from \" + Thread.currentThread().getName());\n    Thread.currentThread().setName(\"main\");\n    \n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);\n\n    // Tell primary current replicas:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);\n      c.out.writeVInt(1);\n      c.out.writeVInt(replica.id);\n      c.out.writeVInt(replica.tcpPort);\n      c.flush();\n      c.in.readByte();\n    }\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    Connection replicaC = new Connection(replica.tcpPort);\n\n    // Wait for replica to show the change\n    while (true) {\n      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      replicaC.flush();\n      long version = replicaC.in.readVLong();\n      int hitCount = replicaC.in.readVInt();\n      if (version == primaryVersion3) {\n        assertEquals(20, hitCount);\n        // good!\n        break;\n      }\n      Thread.sleep(10);\n    }\n\n    replicaC.close();\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e","date":1455182738,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","sourceNew":"  @Nightly\n  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":"  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dede24fb16615594e9570fb29829cbffa1315a1f","date":1589579471,"type":3,"author":"erick","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testReplicateForceMerge().mjava","sourceNew":"  @Nightly\n  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n    docs.close();\n    replica.close();\n    primary.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testReplicateForceMerge() throws Exception {\n\n    Path primaryPath = createTempDir(\"primary\");\n    NodeProcess primary = startNode(-1, 0, primaryPath, -1, false);\n\n    Path replicaPath = createTempDir(\"replica\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, -1, false);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    LineFileDocs docs = new LineFileDocs(random());\n    Connection primaryC = new Connection(primary.tcpPort);\n    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Index 10 more docs into primary:\n    for(int i=0;i<10;i++) {\n      Document doc = docs.nextDoc();\n      primary.addOrUpdateDocument(primaryC, doc, false);\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion2 = primary.flush(0);\n    assertTrue(primaryVersion2 > primaryVersion1);\n\n    primary.forceMerge(primaryC);\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion3 = primary.flush(0);\n    assertTrue(primaryVersion3 > primaryVersion2);\n\n    // Wait for replica to show the change\n    waitForVersionAndHits(replica, primaryVersion3, 20);\n\n    primaryC.close();\n\n    replica.close();\n    primary.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d686e50b3c24dcfcfbfb32482ee0c710975ec50":["ec317d5d3de749e12abcc9e6f976d765638fe9e2","f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4":["ec317d5d3de749e12abcc9e6f976d765638fe9e2"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1883fc56f404231ea9b9a6b841afe9d3ec00f8e"],"dede24fb16615594e9570fb29829cbffa1315a1f":["68496c2200e559fb7802f7575427b7a482659afb"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dede24fb16615594e9570fb29829cbffa1315a1f"]},"commit2Childs":{"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e":["68496c2200e559fb7802f7575427b7a482659afb"],"ec317d5d3de749e12abcc9e6f976d765638fe9e2":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50","f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4"],"9d686e50b3c24dcfcfbfb32482ee0c710975ec50":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec317d5d3de749e12abcc9e6f976d765638fe9e2","68496c2200e559fb7802f7575427b7a482659afb"],"f1e1d986de0b8b6b1d3a9e5c6eb3963452cbc8c4":["9d686e50b3c24dcfcfbfb32482ee0c710975ec50"],"68496c2200e559fb7802f7575427b7a482659afb":["dede24fb16615594e9570fb29829cbffa1315a1f"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["b1883fc56f404231ea9b9a6b841afe9d3ec00f8e"],"dede24fb16615594e9570fb29829cbffa1315a1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}