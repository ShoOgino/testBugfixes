{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws ParseException {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new ParseException(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new ParseException(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    public String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    public String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"051c3069a96e986b8fa0435398a73a922ce85418","date":1447853599,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/StrParser#getQuotedString().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing.StrParser#getQuotedString().mjava","sourceNew":"    // return null if not a string\n    public String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","sourceOld":"    // return null if not a string\n    public String getQuotedString() throws SyntaxError {\n      eatws();\n      char delim = peekChar();\n      if (!(delim == '\\\"' || delim == '\\'')) {\n        return null;\n      }\n      int val_start = ++pos;\n      StringBuilder sb = new StringBuilder(); // needed for escaping\n      for (; ;) {\n        if (pos >= end) {\n          throw new SyntaxError(\"Missing end quote for string at pos \" + (val_start - 1) + \" str='\" + val + \"'\");\n        }\n        char ch = val.charAt(pos);\n        if (ch == '\\\\') {\n          pos++;\n          if (pos >= end) break;\n          ch = val.charAt(pos);\n          switch (ch) {\n            case 'n':\n              ch = '\\n';\n              break;\n            case 't':\n              ch = '\\t';\n              break;\n            case 'r':\n              ch = '\\r';\n              break;\n            case 'b':\n              ch = '\\b';\n              break;\n            case 'f':\n              ch = '\\f';\n              break;\n            case 'u':\n              if (pos + 4 >= end) {\n                throw new SyntaxError(\"bad unicode escape \\\\uxxxx at pos\" + (val_start - 1) + \" str='\" + val + \"'\");\n              }\n              ch = (char) Integer.parseInt(val.substring(pos + 1, pos + 5), 16);\n              pos += 4;\n              break;\n          }\n        } else if (ch == delim) {\n          pos++;  // skip over the quote\n          break;\n        }\n        sb.append(ch);\n        pos++;\n      }\n\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3cdb67100dc016748799a77218aa409478372d79","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"051c3069a96e986b8fa0435398a73a922ce85418":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["051c3069a96e986b8fa0435398a73a922ce85418"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3cdb67100dc016748799a77218aa409478372d79":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"051c3069a96e986b8fa0435398a73a922ce85418":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","051c3069a96e986b8fa0435398a73a922ce85418"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}