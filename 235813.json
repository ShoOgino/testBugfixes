{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList overseerStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList stateUpdateQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList workQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList overseerStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList stateUpdateQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList workQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList overseerStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList stateUpdateQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList workQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList overseerStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList stateUpdateQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList workQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList overseerStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList stateUpdateQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList workQueueStats = new NamedList();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}