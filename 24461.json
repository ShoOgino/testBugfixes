{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b28ad83652f81775fa37359636d0bfe523590199","date":1490892787,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c3f4197ce8687fa9dc92965c98136ebbc430430","date":1490968656,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldValueEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldValueEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CartesianProductStream#CartesianProductStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldValueEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","sourceOld":"  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    String functionName = factory.getFunctionName(getClass());\n    \n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, \"productSort\");\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - unknown operands found\", functionName, expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)\", functionName, expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    evaluators = new ArrayList<>();\n    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){\n      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();\n      String originalFullString = fullString; // used for error messages\n      \n      // remove possible wrapping quotes\n      if(fullString.length() > 2 && fullString.startsWith(\"\\\"\") && fullString.endsWith(\"\\\"\")){\n        fullString = fullString.substring(1, fullString.length() - 1).trim();\n      }\n      \n      String evaluatorPart = null;\n      String asNamePart = null;\n      \n      if(fullString.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = fullString.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s\", functionName, expression, originalFullString));\n        }\n        \n        evaluatorPart = parts[0].trim();\n        asNamePart = parts[1].trim();        \n      }\n      else{\n        evaluatorPart = fullString;\n        // no rename\n      }\n      \n      boolean wasHandledAsEvaluatorFunction = false;\n      StreamEvaluator evaluator = null;\n      if(evaluatorPart.contains(\"(\")){\n        // is a possible evaluator\n        try{\n          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);\n          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n            evaluator = factory.constructEvaluator(asValueExpression);\n            wasHandledAsEvaluatorFunction = true;\n          }\n        }\n        catch(Throwable e){\n          // it was not handled, so treat as a non-evaluator\n        }\n      }\n      if(!wasHandledAsEvaluatorFunction){\n        // treat as a straight field evaluator\n        evaluator = new FieldEvaluator(evaluatorPart);\n        if(null == asNamePart){\n          asNamePart = evaluatorPart; // just use the field name\n        }\n      }\n\n      if(null == evaluator || null == asNamePart){\n        throw new IOException(String.format(Locale.ROOT,\"Invalid %s expression %s - failed to parse evaluator '%s'\", functionName, expression, originalFullString));\n      }\n      \n      evaluators.add(new NamedEvaluator(asNamePart, evaluator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c3f4197ce8687fa9dc92965c98136ebbc430430":["869bbd0c59fee20268facd5a2e0d3c77e34500ed"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["6c3f4197ce8687fa9dc92965c98136ebbc430430","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"b28ad83652f81775fa37359636d0bfe523590199":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["b28ad83652f81775fa37359636d0bfe523590199","ba1e7de64990e3928b90142a52fb92eeff556475"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba1e7de64990e3928b90142a52fb92eeff556475":["b28ad83652f81775fa37359636d0bfe523590199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"6c3f4197ce8687fa9dc92965c98136ebbc430430":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["6c3f4197ce8687fa9dc92965c98136ebbc430430"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["869bbd0c59fee20268facd5a2e0d3c77e34500ed","d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"b28ad83652f81775fa37359636d0bfe523590199":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["b28ad83652f81775fa37359636d0bfe523590199"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}