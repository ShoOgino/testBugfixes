{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","sourceOld":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<Integer, List<Term>>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<Term>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","sourceOld":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","sourceOld":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery phraseQuery = new MultiPhraseQuery();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQuery.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (Map.Entry<Integer, List<Term>> entry : positionTermMap.entrySet()) {\n        List<Term> termList = entry.getValue();\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]), entry.getKey());\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","sourceOld":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (Map.Entry<Integer, List<Term>> entry : positionTermMap.entrySet()) {\n        List<Term> termList = entry.getValue();\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]), entry.getKey());\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","sourceOld":"  @Override\n  public MultiPhraseQuery build(QueryNode queryNode) throws QueryNodeException {\n    MultiPhraseQueryNode phraseNode = (MultiPhraseQueryNode) queryNode;\n\n    MultiPhraseQuery.Builder phraseQueryBuilder = new MultiPhraseQuery.Builder();\n\n    List<QueryNode> children = phraseNode.getChildren();\n\n    if (children != null) {\n      TreeMap<Integer, List<Term>> positionTermMap = new TreeMap<>();\n\n      for (QueryNode child : children) {\n        FieldQueryNode termNode = (FieldQueryNode) child;\n        TermQuery termQuery = (TermQuery) termNode\n            .getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\n        List<Term> termList = positionTermMap.get(termNode\n            .getPositionIncrement());\n\n        if (termList == null) {\n          termList = new LinkedList<>();\n          positionTermMap.put(termNode.getPositionIncrement(), termList);\n\n        }\n\n        termList.add(termQuery.getTerm());\n\n      }\n\n      for (int positionIncrement : positionTermMap.keySet()) {\n        List<Term> termList = positionTermMap.get(positionIncrement);\n\n        phraseQueryBuilder.add(termList.toArray(new Term[termList.size()]),\n            positionIncrement);\n\n      }\n\n    }\n\n    return phraseQueryBuilder.build();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}