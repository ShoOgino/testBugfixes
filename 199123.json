{"path":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testSingleSpanQuery() throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final String[] expectedIds = new String[] { \"B\", \"D\", \"1\", \"2\", \"3\", \"4\", \"A\" };\n        final float[] expectedScores = new float[] { 0.625f, 0.45927936f, 0.35355338f, 0.35355338f, 0.35355338f,\n                0.35355338f, 0.26516503f, };\n        assertHits(searcher2, spanQuery, \"single span query\", expectedIds, expectedScores);\n    }\n\n","sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testSingleSpanQuery() throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final String[] expectedIds = new String[] { \"B\", \"D\", \"1\", \"2\", \"3\", \"4\", \"A\" };\n        final float[] expectedScores = new float[] { 0.625f, 0.45927936f, 0.35355338f, 0.35355338f, 0.35355338f,\n                0.35355338f, 0.26516503f, };\n        assertHits(searcher2, spanQuery, \"single span query\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":null,"sourceOld":"    /**\n     * Tests a single span query that matches multiple documents.\n     *\n     * @throws IOException\n     */\n    public void testSingleSpanQuery() throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n        final String[] expectedIds = new String[] { \"B\", \"D\", \"1\", \"2\", \"3\", \"4\", \"A\" };\n        final float[] expectedScores = new float[] { 0.625f, 0.45927936f, 0.35355338f, 0.35355338f, 0.35355338f,\n                0.35355338f, 0.26516503f, };\n        assertHits(searcher2, spanQuery, \"single span query\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}