{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRef,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      spare.grow(length);\n      spare.setLength(length);\n      pool.readBytes(offset, spare.bytes(), 0, spare.length());\n      return spare.get();\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRef spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      assert spare.offset == 0;\n      spare.grow(length);\n      spare.length = length;\n      pool.readBytes(offset, spare.bytes, spare.offset, spare.length);\n      return spare;\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      spare.grow(length);\n      spare.setLength(length);\n      pool.readBytes(offset, spare.bytes(), 0, spare.length());\n      return spare.get();\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      spare.grow(length);\n      spare.setLength(length);\n      pool.readBytes(offset, spare.bytes(), 0, spare.length());\n      return spare.get();\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    FutureObjects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length = index == lastElement - 1 ? currentOffset - offset\n        : offsets[index + 1] - offset;\n    spare.grow(length);\n    spare.setLength(length);\n    pool.readBytes(offset, spare.bytes(), 0, spare.length());\n    return spare.get();\n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    if (lastElement > index) {\n      int offset = offsets[index];\n      int length = index == lastElement - 1 ? currentOffset - offset\n          : offsets[index + 1] - offset;\n      spare.grow(length);\n      spare.setLength(length);\n      pool.readBytes(offset, spare.bytes(), 0, spare.length());\n      return spare.get();\n    }\n    throw new IndexOutOfBoundsException(\"index \" + index\n        + \" must be less than the size: \" + lastElement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#get(BytesRefBuilder,int).mjava","sourceNew":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    Objects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length = index == lastElement - 1 ? currentOffset - offset\n        : offsets[index + 1] - offset;\n    spare.grow(length);\n    spare.setLength(length);\n    pool.readBytes(offset, spare.bytes(), 0, spare.length());\n    return spare.get();\n  }\n\n","sourceOld":"  /**\n   * Returns the <i>n'th</i> element of this {@link BytesRefArray}\n   * @param spare a spare {@link BytesRef} instance\n   * @param index the elements index to retrieve \n   * @return the <i>n'th</i> element of this {@link BytesRefArray}\n   */\n  public BytesRef get(BytesRefBuilder spare, int index) {\n    FutureObjects.checkIndex(index, lastElement);\n    int offset = offsets[index];\n    int length = index == lastElement - 1 ? currentOffset - offset\n        : offsets[index + 1] - offset;\n    spare.grow(length);\n    spare.setLength(length);\n    pool.readBytes(offset, spare.bytes(), 0, spare.length());\n    return spare.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["73860c1174109b7d888d50a10088afb18293b153"],"73860c1174109b7d888d50a10088afb18293b153":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"73860c1174109b7d888d50a10088afb18293b153":["456d7e7092cb043c740b4674301660ee8abc26fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["73860c1174109b7d888d50a10088afb18293b153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}