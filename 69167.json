{"path":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc86ee203e41326b19776b964d255b47ccf0d126","date":1352774468,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      if (val instanceof Collection) {\n        writeVal(fname, val);\n      } else {\n        // if multivalued field, write single value as an array\n        SchemaField sf = schema.getFieldOrNull(fname);\n        if (sf != null && sf.multiValued()) {\n          writeArrayOpener(-1); // no trivial way to determine array size\n          writeVal(fname, val);\n          writeArrayCloser();\n        } else {\n          writeVal(fname, val);\n        }\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      ReturnFields rf = new SolrReturnFields();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), rf, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (!returnFields.wantsField(fname)) {\n        continue;\n      }\n      \n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      ReturnFields rf = new SolrReturnFields();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), rf, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0acd5cf26e179fa6c0650a6348a8913718fc98a7","date":1523271967,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4","date":1526113368,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n      writeVal(fname, val);\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119f84a673d2ea32c0ec18c36987696dd31aa174","date":1528551316,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n      writeVal(fname, val);\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n      writeVal(fname, val);\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(doc.size()); \n    incLevel();\n\n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (returnFields!= null && !returnFields.wantsField(fname)) {\n        continue;\n      }\n\n      if (first) {\n        first=false;\n      }\n      else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(fname, true);\n      Object val = doc.getFieldValue(fname);\n      writeVal(fname, val);\n    }\n\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","fc86ee203e41326b19776b964d255b47ccf0d126"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["fc86ee203e41326b19776b964d255b47ccf0d126"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","0acd5cf26e179fa6c0650a6348a8913718fc98a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4","119f84a673d2ea32c0ec18c36987696dd31aa174"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc86ee203e41326b19776b964d255b47ccf0d126":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["119f84a673d2ea32c0ec18c36987696dd31aa174"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4","119f84a673d2ea32c0ec18c36987696dd31aa174"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","fc86ee203e41326b19776b964d255b47ccf0d126"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"119f84a673d2ea32c0ec18c36987696dd31aa174":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fc86ee203e41326b19776b964d255b47ccf0d126":["407687e67faf6e1f02a211ca078d8e3eed631027","9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["0acd5cf26e179fa6c0650a6348a8913718fc98a7","d58e44159788900f4a2113b84463dc3fbbf80f20"],"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","119f84a673d2ea32c0ec18c36987696dd31aa174","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}