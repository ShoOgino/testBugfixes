{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","commits":[{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#removeReplica(String,String).mjava","sourceNew":"  Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":"  Pair<Row, ReplicaInfo> removeReplica(String coll, String shard) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> s = c.get(shard);\n    if (s == null || s.isEmpty()) return null;\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, s.remove(0));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":"  Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1852ff897aecd2f7c8376a02aedfd44104533f28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1852ff897aecd2f7c8376a02aedfd44104533f28","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}