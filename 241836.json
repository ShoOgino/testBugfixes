{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    assert coreNames.size() > 0;\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(Integer.getInteger(\"solr.waitToSeeReplicasInStateTimeoutSeconds\", 120), TimeUnit.SECONDS, timeSource); // could be a big cluster\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitToSeeReplicasInState(String,Collection[String]).mjava","sourceNew":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    assert coreNames.size() > 0;\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(Integer.getInteger(\"solr.waitToSeeReplicasInStateTimeoutSeconds\", 120), TimeUnit.SECONDS, timeSource); // could be a big cluster\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n\n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n\n      Thread.sleep(100);\n    }\n  }\n\n","sourceOld":"  Map<String, Replica> waitToSeeReplicasInState(String collectionName, Collection<String> coreNames) throws InterruptedException {\n    assert coreNames.size() > 0;\n    Map<String, Replica> result = new HashMap<>();\n    TimeOut timeout = new TimeOut(Integer.getInteger(\"solr.waitToSeeReplicasInStateTimeoutSeconds\", 120), TimeUnit.SECONDS, timeSource); // could be a big cluster\n    while (true) {\n      DocCollection coll = zkStateReader.getClusterState().getCollection(collectionName);\n      for (String coreName : coreNames) {\n        if (result.containsKey(coreName)) continue;\n        for (Slice slice : coll.getSlices()) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n              result.put(coreName, replica);\n              break;\n            }\n          }\n        }\n      }\n      \n      if (result.size() == coreNames.size()) {\n        return result;\n      } else {\n        log.debug(\"Expecting {} cores but found {}\", coreNames, result);\n      }\n      if (timeout.hasTimedOut()) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Timed out waiting to see all replicas: \" + coreNames + \" in cluster state. Last state: \" + coll);\n      }\n      \n      Thread.sleep(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}