{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, acceptDocs, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    final LeafCollector singleClauseCollector;\n    if (coordFactors[1] == 1f) {\n      singleClauseCollector = collector;\n    } else {\n      singleClauseCollector = new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(new BooleanTopLevelScorers.BoostedScorer(scorer, coordFactors[1]));\n        }\n      };\n    }\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, singleClauseCollector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, acceptDocs, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    final LeafCollector singleClauseCollector;\n    if (coordFactors[1] == 1f) {\n      singleClauseCollector = collector;\n    } else {\n      singleClauseCollector = new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(new BooleanTopLevelScorers.BoostedScorer(scorer, coordFactors[1]));\n        }\n      };\n    }\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, singleClauseCollector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    final LeafCollector singleClauseCollector;\n    if (coordFactors[1] == 1f) {\n      singleClauseCollector = collector;\n    } else {\n      singleClauseCollector = new FilterLeafCollector(collector) {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(new BooleanTopLevelScorers.BoostedScorer(scorer, coordFactors[1]));\n        }\n      };\n    }\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, singleClauseCollector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    scoreAndDoc.doc = -1;\n    collector.setScorer(scoreAndDoc);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n      top = scoreWindow(top, collector, acceptDocs, min, max);\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8a0e442f7b61f811680273b25da95994a724466":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}