{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link #CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link CursorMarkParams#CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","sourceOld":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link #CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","bugFix":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link CursorMarkParams#CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","sourceOld":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link CursorMarkParams#CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) ObjectBuilder.fromJSON(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertCursor(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link CursorMarkParams#CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","sourceOld":"  /**\n   * Asserts that the query matches the specified JSON patterns and then returns the\n   * {@link CursorMarkParams#CURSOR_MARK_NEXT} value from the response\n   *\n   * @see #assertJQ\n   */\n  public String assertCursor(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}