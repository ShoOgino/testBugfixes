{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","commits":[{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void append(PointValue pointValue) {\n    assert closed == false : \"point writer is already closed\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    BytesRef packedValue = pointValue.packedValue();\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + (packedBytesLength) + \"] but was [\" + packedValue.length + \"]\";\n    System.arraycopy(packedValue.bytes, packedValue.offset, block, nextWrite * packedBytesLength, packedBytesLength);\n    docIDs[nextWrite] = pointValue.docID();\n    nextWrite++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","sourceNew":"  @Override\n  public void append(PointValue pointValue) {\n    assert closed == false : \"point writer is already closed\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    BytesRef packedValueDocID = pointValue.packedValueDocIDBytes();\n    assert packedValueDocID.length == packedBytesDocIDLength : \"[packedValue] must have length [\" + (packedBytesDocIDLength) + \"] but was [\" + packedValueDocID.length + \"]\";\n    System.arraycopy(packedValueDocID.bytes, packedValueDocID.offset, block, nextWrite * packedBytesDocIDLength, packedBytesDocIDLength);\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(PointValue pointValue) {\n    assert closed == false : \"point writer is already closed\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    BytesRef packedValue = pointValue.packedValue();\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + (packedBytesLength) + \"] but was [\" + packedValue.length + \"]\";\n    System.arraycopy(packedValue.bytes, packedValue.offset, block, nextWrite * packedBytesLength, packedBytesLength);\n    docIDs[nextWrite] = pointValue.docID();\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(PointValue).mjava","sourceNew":"  @Override\n  public void append(PointValue pointValue) {\n    assert closed == false : \"point writer is already closed\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    BytesRef packedValueDocID = pointValue.packedValueDocIDBytes();\n    assert packedValueDocID.length == config.bytesPerDoc : \"[packedValue] must have length [\" + (config.bytesPerDoc) + \"] but was [\" + packedValueDocID.length + \"]\";\n    System.arraycopy(packedValueDocID.bytes, packedValueDocID.offset, block, nextWrite * config.bytesPerDoc, config.bytesPerDoc);\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(PointValue pointValue) {\n    assert closed == false : \"point writer is already closed\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    BytesRef packedValueDocID = pointValue.packedValueDocIDBytes();\n    assert packedValueDocID.length == packedBytesDocIDLength : \"[packedValue] must have length [\" + (packedBytesDocIDLength) + \"] but was [\" + packedValueDocID.length + \"]\";\n    System.arraycopy(packedValueDocID.bytes, packedValueDocID.offset, block, nextWrite * packedBytesDocIDLength, packedBytesDocIDLength);\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}