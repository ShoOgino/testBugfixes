{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = new HttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = new HttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = new HttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      log.info(\"Sending reload command to \" + testCollectionName);\n\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for {}\", testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \" + testCollectionName);\n      CollectionAdminRequest.reloadCollection(testCollectionName)\n          .process(client);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["773a737806859660d4756f710adc0ad53e05f9d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["773a737806859660d4756f710adc0ad53e05f9d5","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"773a737806859660d4756f710adc0ad53e05f9d5":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a966532d92cf9ba2856f15a8140151bb6b518e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}