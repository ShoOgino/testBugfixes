{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        assert codecNameDat != null;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecNameDat, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        assert codecNameDat != null;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecNameDat, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecName, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":null,"sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        assert codecNameDat != null;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecNameDat, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesWriterBase#getOrCreateDataOut().mjava","sourceNew":null,"sourceOld":"    protected IndexOutput getOrCreateDataOut() throws IOException {\n      if (datOut == null) {\n        boolean success = false;\n        assert codecNameDat != null;\n        try {\n          datOut = dir.createOutput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n              DocValuesWriterBase.DATA_EXTENSION), context);\n          CodecUtil.writeHeader(datOut, codecNameDat, version);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(datOut);\n          }\n        }\n      }\n      return datOut;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["32e43f282bea25b8cc26e4a842d98deafd617e9b","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["e0f5e4b06eda9c2996435d90659faa1a8601d196","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"0837ab0472feecb3a54260729d845f839e1cbd72":["32e43f282bea25b8cc26e4a842d98deafd617e9b"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["d4d69c535930b5cce125cff868d40f6373dc27d4","3599646b4d4c346cf74d334813488b8b337b5bf5","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}