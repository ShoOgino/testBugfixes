{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample#main(String[]).mjava","sourceNew":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","sourceOld":"  /**\n   * @param args\n   * @throws Exception \n   * @throws IOException \n   */\n  public static void main(String[] args) throws Exception {\n    Properties p = initProps();\n    Config conf = new Config(p);\n    PerfRunData runData = new PerfRunData(conf);\n    \n    // 1. top sequence\n    TaskSequence top = new TaskSequence(runData,null,null,false); // top level, not parallel\n    \n    // 2. task to create the index\n    CreateIndexTask create = new CreateIndexTask(runData);\n    top.addTask(create);\n    \n    // 3. task seq to add 500 docs (order matters - top to bottom - add seq to top, only then add to seq)\n    TaskSequence seq1 = new TaskSequence(runData,\"AddDocs\",top,false);\n    seq1.setRepetitions(500);\n    seq1.setNoChildReport();\n    top.addTask(seq1);\n\n    // 4. task to add the doc\n    AddDocTask addDoc = new AddDocTask(runData);\n    //addDoc.setParams(\"1200\"); // doc size limit if supported\n    seq1.addTask(addDoc); // order matters 9see comment above)\n\n    // 5. task to close the index\n    CloseIndexTask close = new CloseIndexTask(runData);\n    top.addTask(close);\n\n    // task to report\n    RepSumByNameTask rep = new RepSumByNameTask(runData);\n    top.addTask(rep);\n\n    // print algorithm\n    System.out.println(top.toString());\n    \n    // execute\n    top.doLogic();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}