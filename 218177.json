{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","date":1335212037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n      if (rarely(r)) {\n        // random thread pool\n        c.setIndexerThreadPool(new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n      } else {\n        // random thread pool\n        c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(maxNumThreadStates));\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7aefa8034c1ea392512389bff632c9f6ad4523b3","date":1336702704,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, new RandomDocumentsWriterPerThreadPool(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415fc059c6f2340aed1714220b9578c3f66ed09c","date":1366942705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d44c142f2e458fd09d473333a8eecb1516ddb05","date":1367347752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2efa5630eab39873709103e8068c467386f2dd4b","date":1372350151,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergeCount(maxMergeCount);\n      cms.setMaxThreadCount(maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":["be3b141eed4372b3eb04def61ab79f86f572f481"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be3b141eed4372b3eb04def61ab79f86f572f481","date":1372468407,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergeCount(maxMergeCount);\n      cms.setMaxThreadCount(maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":["2efa5630eab39873709103e8068c467386f2dd4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505b4ec77395cb555366a54a97b24b0906a3d056","date":1375203457,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    if (rarely(r)) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextInt(5) == 0) { \n      c.setMergePolicy(newAlcoholicMergePolicy());\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = _TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = _TestUtil.nextInt(random(), maxThreadCount, maxThreadCount+4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? _TestUtil.nextInt(r, 5, 20) // crazy value\n          : _TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","date":1396642661,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        Rethrow.rethrow(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07f47458e3f1879aa4ccdab63f01979fdbe20c5","date":1396643407,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      try {\n        if (rarely(r)) {\n          // Retrieve the package-private setIndexerThreadPool\n          // method:\n          Method setIndexerThreadPoolMethod = IndexWriterConfig.class.getDeclaredMethod(\"setIndexerThreadPool\",\n            Class.forName(\"org.apache.lucene.index.DocumentsWriterPerThreadPool\"));\n          setIndexerThreadPoolMethod.setAccessible(true);\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        Rethrow.rethrow(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      try {\n        if (rarely(r)) {\n          // Retrieve the package-private setIndexerThreadPool\n          // method:\n          Method setIndexerThreadPoolMethod = IndexWriterConfig.class.getDeclaredMethod(\"setIndexerThreadPool\",\n            Class.forName(\"org.apache.lucene.index.DocumentsWriterPerThreadPool\"));\n          setIndexerThreadPoolMethod.setAccessible(true);\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      Method setIndexerThreadPoolMethod = null;\n      try {\n        // Retrieve the package-private setIndexerThreadPool\n        // method:\n        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n          if (m.getName().equals(\"setIndexerThreadPool\")) {\n            m.setAccessible(true);\n            setIndexerThreadPoolMethod = m;\n            break;\n          }\n        }\n      } catch (Exception e) {\n        // Should not happen?\n        throw new RuntimeException(e);\n      }\n\n      if (setIndexerThreadPoolMethod == null) {\n        throw new RuntimeException(\"failed to lookup IndexWriterConfig.setIndexerThreadPool method\");\n      }\n\n      try {\n        if (rarely(r)) {\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      c.setMaxThreadStates(maxNumThreadStates);\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      try {\n        if (rarely(r)) {\n          // Retrieve the package-private setIndexerThreadPool\n          // method:\n          Method setIndexerThreadPoolMethod = IndexWriterConfig.class.getDeclaredMethod(\"setIndexerThreadPool\",\n            Class.forName(\"org.apache.lucene.index.DocumentsWriterPerThreadPool\"));\n          setIndexerThreadPoolMethod.setAccessible(true);\n          Class<?> clazz = Class.forName(\"org.apache.lucene.index.RandomDocumentsWriterPerThreadPool\");\n          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);\n          ctor.setAccessible(true);\n          // random thread pool\n          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));\n        } else {\n          // random thread pool\n          c.setMaxThreadStates(maxNumThreadStates);\n        }\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Analyzer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      c.setMaxThreadStates(maxNumThreadStates);\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarity(classEnvRule.similarity);\n    if (VERBOSE) {\n      // Even though TestRuleSetupAndRestoreClassEnv calls\n      // InfoStream.setDefault, we do it again here so that\n      // the PrintStreamInfoStream.messageID increments so\n      // that when there are separate instances of\n      // IndexWriter created we see \"IW 0\", \"IW 1\", \"IW 2\",\n      // ... instead of just always \"IW 0\":\n      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    } else if (rarely(r)) {\n      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);\n      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n      c.setMergeScheduler(cms);\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value\n          : TestUtil.nextInt(r, 1, 4); // reasonable value\n\n      c.setMaxThreadStates(maxNumThreadStates);\n    }\n\n    c.setMergePolicy(newMergePolicy(r));\n\n    if (rarely(r)) {\n      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));\n    }\n    c.setUseCompoundFile(r.nextBoolean());\n    c.setReaderPooling(r.nextBoolean());\n    c.setCheckIntegrityAtMerge(r.nextBoolean());\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["088a7ef694fd43d5d9a4d200c4005865f773d1e7","be3b141eed4372b3eb04def61ab79f86f572f481"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["415fc059c6f2340aed1714220b9578c3f66ed09c"],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"505b4ec77395cb555366a54a97b24b0906a3d056":["a45bec74b98f6fc05f52770cfb425739e6563960"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["a07f47458e3f1879aa4ccdab63f01979fdbe20c5"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["7aefa8034c1ea392512389bff632c9f6ad4523b3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["5eb2511ababf862ea11e10761c70ee560cd84510","a07f47458e3f1879aa4ccdab63f01979fdbe20c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"be3b141eed4372b3eb04def61ab79f86f572f481":["2efa5630eab39873709103e8068c467386f2dd4b"],"a07f47458e3f1879aa4ccdab63f01979fdbe20c5":["4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"7aefa8034c1ea392512389bff632c9f6ad4523b3":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["505b4ec77395cb555366a54a97b24b0906a3d056"],"a45bec74b98f6fc05f52770cfb425739e6563960":["be3b141eed4372b3eb04def61ab79f86f572f481"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"62e52115b56781006682fd92c6938efaf174304d":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"2efa5630eab39873709103e8068c467386f2dd4b":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14","5eb2511ababf862ea11e10761c70ee560cd84510"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"4c0e11c85a63a4eb8a3f072df2a1d380b7e48c14":["a07f47458e3f1879aa4ccdab63f01979fdbe20c5"],"505b4ec77395cb555366a54a97b24b0906a3d056":["6613659748fe4411a7dcf85266e55db1f95f7315"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"be3b141eed4372b3eb04def61ab79f86f572f481":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a45bec74b98f6fc05f52770cfb425739e6563960"],"a07f47458e3f1879aa4ccdab63f01979fdbe20c5":["839ca1793cd9a8eb5bd7c7c62918192d47972f73","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"5eb2511ababf862ea11e10761c70ee560cd84510":["15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"7aefa8034c1ea392512389bff632c9f6ad4523b3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"6613659748fe4411a7dcf85266e55db1f95f7315":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510"],"a45bec74b98f6fc05f52770cfb425739e6563960":["505b4ec77395cb555366a54a97b24b0906a3d056"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["62e52115b56781006682fd92c6938efaf174304d","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["7aefa8034c1ea392512389bff632c9f6ad4523b3"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2efa5630eab39873709103e8068c467386f2dd4b"],"62e52115b56781006682fd92c6938efaf174304d":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["62e52115b56781006682fd92c6938efaf174304d","415fc059c6f2340aed1714220b9578c3f66ed09c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"2efa5630eab39873709103e8068c467386f2dd4b":["be3b141eed4372b3eb04def61ab79f86f572f481"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}