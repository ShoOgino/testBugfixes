{"path":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","commits":[{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n    cluster.waitForAllNodes(5);\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    List<String> createNodeSet = new ArrayList<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n    cluster.waitForAllNodes(5);\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    List<String> createNodeSet = new ArrayList<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"426f1d22a8cdb6c24e7b24a8a8b06f34c4a6489b","date":1537857856,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","sourceNew":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n    cluster.waitForAllNodes(5);\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    LinkedHashSet<String> createNodeSet = new LinkedHashSet<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    while (true)  {\n      String nodeName = cluster.getRandomJetty(random()).getNodeName();\n      if (createNodeSet.add(nodeName))  break;\n    }\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n    cluster.waitForAllNodes(5);\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    List<String> createNodeSet = new ArrayList<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","sourceNew":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    \n    cluster.waitForActiveCollection(collection, 1, 4);\n    \n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    LinkedHashSet<String> createNodeSet = new LinkedHashSet<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    while (true)  {\n      String nodeName = cluster.getRandomJetty(random()).getNodeName();\n      if (createNodeSet.add(nodeName))  break;\n    }\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    waitForState(\"Timedout wait for collection to be created\", collection, clusterShape(1, 9));\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n    cluster.waitForAllNodes(5);\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    LinkedHashSet<String> createNodeSet = new LinkedHashSet<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    while (true)  {\n      String nodeName = cluster.getRandomJetty(random()).getNodeName();\n      if (createNodeSet.add(nodeName))  break;\n    }\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","bugFix":["deea3439de4f487ae553317e50d5d641ca386374"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#testAddMultipleReplicas().mjava","sourceNew":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    \n    cluster.waitForActiveCollection(collection, 1, 4);\n    \n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    LinkedHashSet<String> createNodeSet = new LinkedHashSet<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    while (true)  {\n      String nodeName = cluster.getRandomJetty(random()).getNodeName();\n      if (createNodeSet.add(nodeName))  break;\n    }\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    waitForState(\"Timedout wait for collection to be created\", collection, clusterShape(1, 9));\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","sourceOld":"  @Test\n  public void testAddMultipleReplicas() throws Exception  {\n\n    String collection = \"testAddMultipleReplicas\";\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 1, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(collection, 1, 1);\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(1)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    RequestStatusState status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    \n    cluster.waitForActiveCollection(collection, 1, 4);\n    \n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // try to add 5 more replicas which should fail because numNodes(4)*maxShardsPerNode(2)=8 and 4 replicas already exist\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1);\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(FAILED, status);\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(4, docCollection.getReplicas().size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(1, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n\n    // but adding any number of replicas is supported if an explicit create node set is specified\n    // so test that as well\n    LinkedHashSet<String> createNodeSet = new LinkedHashSet<>(2);\n    createNodeSet.add(cluster.getRandomJetty(random()).getNodeName());\n    while (true)  {\n      String nodeName = cluster.getRandomJetty(random()).getNodeName();\n      if (createNodeSet.add(nodeName))  break;\n    }\n    addReplica = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n        .setNrtReplicas(3)\n        .setTlogReplicas(1)\n        .setPullReplicas(1)\n        .setCreateNodeSet(String.join(\",\", createNodeSet));\n    status = addReplica.processAndWait(collection + \"_xyz1\", cloudClient, 120);\n    assertEquals(COMPLETED, status);\n    waitForState(\"Timedout wait for collection to be created\", collection, clusterShape(1, 9));\n    docCollection = cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collection);\n    assertNotNull(docCollection);\n    // sanity check that everything is as before\n    assertEquals(9, docCollection.getReplicas().size());\n    assertEquals(5, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());\n    assertEquals(2, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["426f1d22a8cdb6c24e7b24a8a8b06f34c4a6489b"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"426f1d22a8cdb6c24e7b24a8a8b06f34c4a6489b":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"deea3439de4f487ae553317e50d5d641ca386374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["426f1d22a8cdb6c24e7b24a8a8b06f34c4a6489b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"426f1d22a8cdb6c24e7b24a8a8b06f34c4a6489b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}