{"path":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","commits":[{"id":"01b5702c02a50fec5cd548d8a459434379a5908f","date":1291922553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3b2c50e54fbd02d573055c75580702f3d68cda5","date":1294494344,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":null,"sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        if (forever) {\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n          }\n          close();\n          open();\n          line = reader.readLine();\n        }\n        return null;\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#nextDoc().mjava","sourceNew":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","sourceOld":"  // Document instance is re-used per-thread\n  public Document nextDoc() throws IOException {\n    String line;\n    synchronized(this) {\n      line = reader.readLine();\n      if (line == null) {\n        // Always rewind at end:\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"TEST: LineFileDocs: now rewind file...\");\n        }\n        close();\n        open(null);\n        line = reader.readLine();\n      }\n    }\n\n    DocState docState = threadDocs.get();\n    if (docState == null) {\n      docState = new DocState();\n      threadDocs.set(docState);\n    }\n\n    int spot = line.indexOf(SEP);\n    if (spot == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n    int spot2 = line.indexOf(SEP, 1 + spot);\n    if (spot2 == -1) {\n      throw new RuntimeException(\"line: [\" + line + \"] is in an invalid format !\");\n    }\n\n    docState.body.setValue(line.substring(1+spot2, line.length()));\n    final String title = line.substring(0, spot);\n    docState.title.setValue(title);\n    docState.titleTokenized.setValue(title);\n    docState.date.setValue(line.substring(1+spot, spot2));\n    docState.id.setValue(Integer.toString(id.getAndIncrement()));\n    return docState.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3b2c50e54fbd02d573055c75580702f3d68cda5":["01b5702c02a50fec5cd548d8a459434379a5908f"],"01b5702c02a50fec5cd548d8a459434379a5908f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01b5702c02a50fec5cd548d8a459434379a5908f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01b5702c02a50fec5cd548d8a459434379a5908f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f3b2c50e54fbd02d573055c75580702f3d68cda5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["f3b2c50e54fbd02d573055c75580702f3d68cda5"]},"commit2Childs":{"f3b2c50e54fbd02d573055c75580702f3d68cda5":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"01b5702c02a50fec5cd548d8a459434379a5908f":["f3b2c50e54fbd02d573055c75580702f3d68cda5","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01b5702c02a50fec5cd548d8a459434379a5908f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}