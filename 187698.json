{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'4','_version_':104}\"\n          + \",{'id':'5','_version_':105}\"\n          + \",{'id':'100','_version_':200}\"\n          + \",{'id':'101','_version_':201}\"\n          + \",{'id':'105','_version_':205}\"\n          + \",{'id':'106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'4','_version_':104}\"\n          + \",{'id':'5','_version_':105}\"\n          + \",{'id':'100','_version_':200}\"\n          + \",{'id':'101','_version_':201}\"\n          + \",{'id':'105','_version_':205}\"\n          + \",{'id':'106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'4','_version_':104}\"\n          + \",{'id':'5','_version_':105}\"\n          + \",{'id':'100','_version_':200}\"\n          + \",{'id':'101','_version_':201}\"\n          + \",{'id':'105','_version_':205}\"\n          + \",{'id':'106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","date":1329660825,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'4','_version_':104}\"\n          + \",{'id':'5','_version_':105}\"\n          + \",{'id':'100','_version_':200}\"\n          + \",{'id':'101','_version_':201}\"\n          + \",{'id':'105','_version_':205}\"\n          + \",{'id':'106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f","date":1329949686,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(SEEN_LEADER,SEEN_LEADER_VAL));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9efcb86f82b536ffcefcc27adbfa39b603342af1","date":1492147023,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[105,104]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",\"200\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",\"201\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",\"203\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",\"204\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",\"205\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",\"206\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':104}\"\n          + \",{'id':'C5','_version_':105}\"\n          + \",{'id':'C100','_version_':200}\"\n          + \",{'id':'C101','_version_':201}\"\n          + \",{'id':'C105','_version_':205}\"\n          + \",{'id':'C106','_version_':206}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[206,205,201,200,105,104]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"998\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"999\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",\"301\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[302,301]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':302}\"\n          + \",{'id':'C301','_version_':301}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",\"302\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      // Note that the v101->v103 are dropped, therefore it does not present in RTG\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      // Note that the v101->v103 are dropped, therefore it does not present in RTG\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      // Note that the v101->v103 are dropped, therefore it does not present in RTG\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testDropBuffered().mjava","sourceNew":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    TestInjection.skipIndexWriterCommitOnClose = true;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      // Note that the v101->v103 are dropped, therefore it does not present in RTG\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testDropBuffered() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplay = new Semaphore(0);\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayHook = () -> {\n      try {\n        assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    };\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      String v101 = getNextVersion();\n      String v102 = getNextVersion();\n      String v103 = getNextVersion();\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v200 = getNextVersion();\n      String v201 = getNextVersion();\n      String v203 = getNextVersion();\n      String v204 = getNextVersion();\n      String v205 = getNextVersion();\n      String v206 = getNextVersion();\n      String v301 = getNextVersion();\n      String v302 = getNextVersion();\n      String v998 = getNextVersion();\n      String v999 = getNextVersion();\n      \n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();\n      assertTrue(rinfoFuture == null);\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"C1\", \"_version_\",v101)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v102)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C3\", \"_version_\",v103)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\", \"C4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\", \"C5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      logReplay.release(1000);\n      rinfoFuture = ulog.applyBufferedUpdates();\n      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v105+\",\"+v104+\"]}\"\n      );\n\n      // this time add some docs first before buffering starts (so tlog won't be at pos 0)\n      updateJ(jsonAdd(sdoc(\"id\",\"C100\", \"_version_\",v200)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C101\", \"_version_\",v201)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C103\", \"_version_\",v203)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C104\", \"_version_\",v204)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertTrue(ulog.dropBufferedUpdates());\n      ulog.bufferUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"C105\", \"_version_\",v205)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C106\", \"_version_\",v206)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      rinfoFuture = ulog.applyBufferedUpdates();\n      rinfo = rinfoFuture.get();\n      assertEquals(2, rinfo.adds);\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ asc\", \"fl\",\"id,_version_\")\n          , \"/response/docs==[\"\n          + \"{'id':'C4','_version_':\"+v104+\"}\"\n          + \",{'id':'C5','_version_':\"+v105+\"}\"\n          + \",{'id':'C100','_version_':\"+v200+\"}\"\n          + \",{'id':'C101','_version_':\"+v201+\"}\"\n          + \",{'id':'C105','_version_':\"+v205+\"}\"\n          + \",{'id':'C106','_version_':\"+v206+\"}\"\n          +\"]\"\n      );\n\n      // Note that the v101->v103 are dropped, therefore it does not present in RTG\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"6\")\n          ,\"=={'versions':[\"+String.join(\",\",v206,v205,v201,v200,v105,v104)+\"]}\"\n      );\n\n      ulog.bufferUpdates();\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v998)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v999)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertTrue(ulog.dropBufferedUpdates());\n\n      // make sure we can overwrite with a lower version\n      // TODO: is this functionality needed?\n      updateJ(jsonAdd(sdoc(\"id\",\"C301\", \"_version_\",v301)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"C302\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      assertU(commit());\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"2\")\n          ,\"=={'versions':[\"+v302+\",\"+v301+\"]}\"\n      );\n\n      assertJQ(req(\"q\", \"*:*\", \"sort\",\"_version_ desc\", \"fl\",\"id,_version_\", \"rows\",\"2\")\n          , \"/response/docs==[\"\n          + \"{'id':'C302','_version_':\"+v302+\"}\"\n          + \",{'id':'C301','_version_':\"+v301+\"}\"\n          +\"]\"\n      );\n\n\n      updateJ(jsonAdd(sdoc(\"id\",\"C2\", \"_version_\",v302)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n\n\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3a0c04b71951333291abc7f317109a6a5957bd28"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2","6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["1455c941cc4ce652efc776fc23471b0e499246f6"],"3a0c04b71951333291abc7f317109a6a5957bd28":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"1455c941cc4ce652efc776fc23471b0e499246f6":["9efcb86f82b536ffcefcc27adbfa39b603342af1"],"6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f":["01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"9efcb86f82b536ffcefcc27adbfa39b603342af1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9efcb86f82b536ffcefcc27adbfa39b603342af1","1455c941cc4ce652efc776fc23471b0e499246f6"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f592209545c71895260367152601e9200399776d":["9efcb86f82b536ffcefcc27adbfa39b603342af1","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9efcb86f82b536ffcefcc27adbfa39b603342af1"],"6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"1455c941cc4ce652efc776fc23471b0e499246f6":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"9efcb86f82b536ffcefcc27adbfa39b603342af1":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","01e98f8ae83ed9c1151cd99b37a7371fd6754ac2"],"01e98f8ae83ed9c1151cd99b37a7371fd6754ac2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c5de38c0e59dd046c08cb2b2f2e294b3f72c02f"],"f592209545c71895260367152601e9200399776d":[],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["3a0c04b71951333291abc7f317109a6a5957bd28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}