{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    \n    doBeforeFlush();\n    \n    if (flushDeletes) {\n      if (applyDeletes()) {\n        checkpoint();\n      }\n    }\n    boolean maybeMerge = false;\n    boolean success = false;\n    try {\n      maybeMerge = docWriter.flushAllThreads(flushDeletes) && triggerMerge;\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final Collection<String> files = docWriter.abortedFiles();\n          if (files != null) {\n            deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    \n    doAfterFlush();\n    \n    if (maybeMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    \n    doBeforeFlush();\n    \n    if (flushDeletes) {\n      if (applyDeletes()) {\n        checkpoint();\n      }\n    }\n    boolean maybeMerge = false;\n    boolean success = false;\n    try {\n      maybeMerge = docWriter.flushAllThreads(flushDeletes) && triggerMerge;\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized (this) {\n          // If docWriter has some aborted files that were\n          // never incref'd, then we clean them up here\n          final Collection<String> files = docWriter.abortedFiles();\n          if (files != null) {\n            deleter.deleteNewFiles(files);\n          }\n        }\n      }\n    }\n    \n    doAfterFlush();\n    \n    if (maybeMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param applyAllDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(applyAllDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","833a7987bc1c94455fde83e3311f72bddedcfb93"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","eb378f8bdee16a26810e086303a4a86b4930ea12"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}