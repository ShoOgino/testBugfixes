{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    throw new UnsupportedOperationException(); // nocommit\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf56f19cb16e01bf1fff28f2f9c2852990087fc4","date":1361056159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo field) throws IOException {\n    throw new UnsupportedOperationException(); // nocommit\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRef term = new BytesRef();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.offset = 0;\n          term.length = len;\n          in.readBytes(term.bytes, 0, len);\n          return term;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(long ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRef term = new BytesRef();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.offset = 0;\n          term.length = len;\n          in.readBytes(term.bytes, 0, len);\n          return term;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":["bf56f19cb16e01bf1fff28f2f9c2852990087fc4","53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","7d89d7e4e5101347833eea558851bf4209218619"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n      }, maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n      }, maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new LegacySortedSetDocValuesWrapper(new LegacySortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n      }, maxDoc);\n  }\n\n","bugFix":["bf56f19cb16e01bf1fff28f2f9c2852990087fc4","53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","9a70ce9bddc6f985feb8e5e182aebe20872328d4","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public long nextOrd() {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n\n      @Override\n      public void setDocument(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty()) {\n            currentOrds = new String[0];\n          } else {\n            currentOrds = ordList.split(\",\");\n          }\n          currentIndex = 0;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        String ordList = scratch.get().utf8ToString().trim();\n        doc = target;\n        if (ordList.isEmpty() == false) {\n          currentOrds = ordList.split(\",\");\n          currentIndex = 0;\n          return true;\n        }\n        return false;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        String ordList = scratch.get().utf8ToString().trim();\n        doc = target;\n        if (ordList.isEmpty() == false) {\n          currentOrds = ordList.split(\",\");\n          currentIndex = 0;\n          return true;\n        }\n        return false;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSortedSet(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        String ordList = scratch.get().utf8ToString().trim();\n        doc = target;\n        if (ordList.isEmpty() == false) {\n          currentOrds = ordList.split(\",\");\n          currentIndex = 0;\n          return true;\n        }\n        return false;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    \n    return new SortedSetDocValues() {\n      \n      String[] currentOrds = new String[0];\n      int currentIndex = 0;\n      final BytesRefBuilder term = new BytesRefBuilder();\n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          String ordList = scratch.get().utf8ToString().trim();\n          if (ordList.isEmpty() == false) {\n            currentOrds = ordList.split(\",\");\n            currentIndex = 0;\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public long nextOrd() throws IOException {\n        if (currentIndex == currentOrds.length) {\n          return NO_MORE_ORDS;\n        } else {\n          return Long.parseLong(currentOrds[currentIndex++]);\n        }\n      }\n      \n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public long getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"5eb2511ababf862ea11e10761c70ee560cd84510":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","7d89d7e4e5101347833eea558851bf4209218619"],"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["f366ce28775e2b8ea4e06355009471328711666d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"7d89d7e4e5101347833eea558851bf4209218619":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf56f19cb16e01bf1fff28f2f9c2852990087fc4"],"56572ec06f1407c066d6b7399413178b33176cd8":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","f7558b5077dd4abd457be151475f13b541f4f13e"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7d89d7e4e5101347833eea558851bf4209218619"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"f366ce28775e2b8ea4e06355009471328711666d":["bf56f19cb16e01bf1fff28f2f9c2852990087fc4"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}