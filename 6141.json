{"path":"solr/src/test/org/apache/solr/util/IntUtilsTest#testSort().mjava","commits":[{"id":"222ea1c48b8e68b304965aced7ce915aa78588ca","date":1282780459,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/IntUtilsTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cb58e36806f6c7418d76f6a864a807e243c9193","date":1282782642,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/IntUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cb58e36806f6c7418d76f6a864a807e243c9193":["222ea1c48b8e68b304965aced7ce915aa78588ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cb58e36806f6c7418d76f6a864a807e243c9193"],"222ea1c48b8e68b304965aced7ce915aa78588ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ea1c48b8e68b304965aced7ce915aa78588ca"],"8cb58e36806f6c7418d76f6a864a807e243c9193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"222ea1c48b8e68b304965aced7ce915aa78588ca":["8cb58e36806f6c7418d76f6a864a807e243c9193"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}