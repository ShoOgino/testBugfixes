{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e989db337ba04776b0a24a58a5f417f836ca36f","date":1359065181,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  private int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527426d2324e11fb56b1d594bc79b7559fb8dbf6","date":1359607178,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  private int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ids array in arbitrary order. Valid ids start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  int[] compact() {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ids[i] != -1) {\n        if (upto < i) {\n          ids[upto] = ids[i];\n          ids[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Returns the ords array in arbitrary order. Valid ords start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  int[] compact() {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ords[i] != -1) {\n        if (upto < i) {\n          ords[upto] = ords[i];\n          ords[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afb1cbe53a91dcff2ddf7761cfe13cc545b8b163","date":1531907639,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#compact().mjava","sourceNew":"  /**\n   * Returns the ids array in arbitrary order. Valid ids start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   *\n   * @lucene.internal\n   */\n  public int[] compact() {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ids[i] != -1) {\n        if (upto < i) {\n          ids[upto] = ids[i];\n          ids[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ids;\n  }\n\n","sourceOld":"  /**\n   * Returns the ids array in arbitrary order. Valid ids start at offset of 0\n   * and end at a limit of {@link #size()} - 1\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   */\n  int[] compact() {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    int upto = 0;\n    for (int i = 0; i < hashSize; i++) {\n      if (ids[i] != -1) {\n        if (upto < i) {\n          ids[upto] = ids[i];\n          ids[i] = -1;\n        }\n        upto++;\n      }\n    }\n\n    assert upto == count;\n    lastCount = count;\n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527426d2324e11fb56b1d594bc79b7559fb8dbf6":["4e989db337ba04776b0a24a58a5f417f836ca36f"],"4e989db337ba04776b0a24a58a5f417f836ca36f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","527426d2324e11fb56b1d594bc79b7559fb8dbf6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afb1cbe53a91dcff2ddf7761cfe13cc545b8b163":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afb1cbe53a91dcff2ddf7761cfe13cc545b8b163"]},"commit2Childs":{"527426d2324e11fb56b1d594bc79b7559fb8dbf6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4e989db337ba04776b0a24a58a5f417f836ca36f":["527426d2324e11fb56b1d594bc79b7559fb8dbf6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e989db337ba04776b0a24a58a5f417f836ca36f","d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"afb1cbe53a91dcff2ddf7761cfe13cc545b8b163":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["afb1cbe53a91dcff2ddf7761cfe13cc545b8b163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}