{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","commits":[{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    final int end = r.nextInt(20);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    final char[] buffer = new char[end];\n    for (int i = 0; i < end; i++) {\n      int t = r.nextInt(11);\n      if (t == 0) {\n        buffer[i] = (char) _TestUtil.nextInt(r, 97, 102);\n      }\n      else if (1 == t) buffer[i] = '.';\n      else if (2 == t) buffer[i] = '?';\n      else if (3 == t) buffer[i] = '*';\n      else if (4 == t) buffer[i] = '+';\n      else if (5 == t) buffer[i] = '(';\n      else if (6 == t) buffer[i] = ')';\n      else if (7 == t) buffer[i] = '-';\n      else if (8 == t) buffer[i] = '[';\n      else if (9 == t) buffer[i] = ']';\n      else if (10 == t) buffer[i] = '|';\n    }\n    return new String(buffer, 0, end);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    final int end = r.nextInt(20);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    final char[] buffer = new char[end];\n    for (int i = 0; i < end; i++) {\n      int t = r.nextInt(11);\n      if (t == 0) {\n        buffer[i] = (char) _TestUtil.nextInt(r, 97, 102);\n      }\n      else if (1 == t) buffer[i] = '.';\n      else if (2 == t) buffer[i] = '?';\n      else if (3 == t) buffer[i] = '*';\n      else if (4 == t) buffer[i] = '+';\n      else if (5 == t) buffer[i] = '(';\n      else if (6 == t) buffer[i] = ')';\n      else if (7 == t) buffer[i] = '-';\n      else if (8 == t) buffer[i] = '[';\n      else if (9 == t) buffer[i] = ']';\n      else if (10 == t) buffer[i] = '|';\n    }\n    return new String(buffer, 0, end);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07e8bc3427263aed9be77ba1145663ceb2bccaac","date":1332603058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","sourceNew":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    return randomRegexpishString(r, 20);\n  }\n\n","sourceOld":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    final int end = r.nextInt(20);\n    if (end == 0) {\n      // allow 0 length\n      return \"\";\n    }\n    final char[] buffer = new char[end];\n    for (int i = 0; i < end; i++) {\n      int t = r.nextInt(11);\n      if (t == 0) {\n        buffer[i] = (char) _TestUtil.nextInt(r, 97, 102);\n      }\n      else if (1 == t) buffer[i] = '.';\n      else if (2 == t) buffer[i] = '?';\n      else if (3 == t) buffer[i] = '*';\n      else if (4 == t) buffer[i] = '+';\n      else if (5 == t) buffer[i] = '(';\n      else if (6 == t) buffer[i] = ')';\n      else if (7 == t) buffer[i] = '-';\n      else if (8 == t) buffer[i] = '[';\n      else if (9 == t) buffer[i] = ']';\n      else if (10 == t) buffer[i] = '|';\n    }\n    return new String(buffer, 0, end);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomRegexpishString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomRegexpishString(Random).mjava","sourceNew":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    return randomRegexpishString(r, 20);\n  }\n\n","sourceOld":"  /**\n   * Returns a String thats \"regexpish\" (contains lots of operators typically found in regular expressions)\n   * If you call this enough times, you might get a valid regex!\n   */\n  public static String randomRegexpishString(Random r) {\n    return randomRegexpishString(r, 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47777586dd4c026834be0b2cc454d527cf8884b3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["07e8bc3427263aed9be77ba1145663ceb2bccaac"],"47777586dd4c026834be0b2cc454d527cf8884b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07e8bc3427263aed9be77ba1145663ceb2bccaac":["47777586dd4c026834be0b2cc454d527cf8884b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"47777586dd4c026834be0b2cc454d527cf8884b3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","07e8bc3427263aed9be77ba1145663ceb2bccaac"],"07e8bc3427263aed9be77ba1145663ceb2bccaac":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}