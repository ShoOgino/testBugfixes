{"path":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq >= -1;\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq >= -1;\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq == -1 || sumDocFreq >= docCount; // #postings must be >= #docs with field\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq >= -1;\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq == -1 || sumDocFreq >= docCount; // #postings must be >= #docs with field\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq >= -1;\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a collection (field).\n   * @param field Field's name\n   * @param maxDoc total number of documents.\n   * @param docCount number of documents containing the field.\n   * @param sumTotalTermFreq number of tokens in the field.\n   * @param sumDocFreq number of postings list entries for the field.\n   * @throws IllegalArgumentException if {@code maxDoc} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is more than {@code maxDoc}.\n   * @throws IllegalArgumentException if {@code sumDocFreq} is less than {@code docCount}.\n   * @throws IllegalArgumentException if {@code sumTotalTermFreq} is less than {@code sumDocFreq}.\n   */\n  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    Objects.requireNonNull(field);\n    if (maxDoc <= 0) {\n      throw new IllegalArgumentException(\"maxDoc must be positive, maxDoc: \" + maxDoc);\n    }\n    if (docCount != -1) {\n      if (docCount <= 0) {\n        throw new IllegalArgumentException(\"docCount must be positive, docCount: \" + docCount);\n      }\n      if (docCount > maxDoc) {\n        throw new IllegalArgumentException(\"docCount must not exceed maxDoc, docCount: \" + docCount + \", maxDoc: \" + maxDoc);\n      }\n    }\n    if (sumDocFreq != -1) {\n      if (sumDocFreq <= 0) {\n        throw new IllegalArgumentException(\"sumDocFreq must be positive, sumDocFreq: \" + sumDocFreq);\n      }\n      if (docCount != -1) {\n        if (sumDocFreq < docCount) {\n          throw new IllegalArgumentException(\"sumDocFreq must be at least docCount, sumDocFreq: \" + sumDocFreq + \", docCount: \" + docCount);\n        }\n      }\n    }\n    if (sumTotalTermFreq != -1) {\n      if (sumTotalTermFreq <= 0) {\n        throw new IllegalArgumentException(\"sumTotalTermFreq must be positive, sumTotalTermFreq: \" + sumTotalTermFreq);\n      }\n      if (sumDocFreq != -1) {\n        if (sumTotalTermFreq < sumDocFreq) {\n          throw new IllegalArgumentException(\"sumTotalTermFreq must be at least sumDocFreq, sumTotalTermFreq: \" + sumTotalTermFreq + \", sumDocFreq: \" + sumDocFreq);\n        }\n      }\n    }\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    assert maxDoc >= 0;\n    assert docCount >= -1 && docCount <= maxDoc; // #docs with field must be <= #docs\n    assert sumDocFreq == -1 || sumDocFreq >= docCount; // #postings must be >= #docs with field\n    assert sumTotalTermFreq == -1 || sumTotalTermFreq >= sumDocFreq; // #positions must be >= #postings\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":["6e5adcbe5a27941451fdb6194bcbff96c8630e14","c546021ffb4e623a6242cd68ee234c17d3ba6646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a collection (field).\n   * @param field Field's name\n   * @param maxDoc total number of documents.\n   * @param docCount number of documents containing the field.\n   * @param sumTotalTermFreq number of tokens in the field.\n   * @param sumDocFreq number of postings list entries for the field.\n   * @throws IllegalArgumentException if {@code maxDoc} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is more than {@code maxDoc}.\n   * @throws IllegalArgumentException if {@code sumDocFreq} is less than {@code docCount}.\n   * @throws IllegalArgumentException if {@code sumTotalTermFreq} is less than {@code sumDocFreq}.\n   */\n  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    Objects.requireNonNull(field);\n    if (maxDoc <= 0) {\n      throw new IllegalArgumentException(\"maxDoc must be positive, maxDoc: \" + maxDoc);\n    }\n    if (docCount <= 0) {\n      throw new IllegalArgumentException(\"docCount must be positive, docCount: \" + docCount);\n    }\n    if (docCount > maxDoc) {\n      throw new IllegalArgumentException(\"docCount must not exceed maxDoc, docCount: \" + docCount + \", maxDoc: \" + maxDoc);\n    }\n    if (sumDocFreq <= 0) {\n      throw new IllegalArgumentException(\"sumDocFreq must be positive, sumDocFreq: \" + sumDocFreq);\n    }\n    if (sumDocFreq < docCount) {\n      throw new IllegalArgumentException(\"sumDocFreq must be at least docCount, sumDocFreq: \" + sumDocFreq + \", docCount: \" + docCount);\n    }\n    if (sumTotalTermFreq <= 0) {\n      throw new IllegalArgumentException(\"sumTotalTermFreq must be positive, sumTotalTermFreq: \" + sumTotalTermFreq);\n    }\n    if (sumTotalTermFreq < sumDocFreq) {\n      throw new IllegalArgumentException(\"sumTotalTermFreq must be at least sumDocFreq, sumTotalTermFreq: \" + sumTotalTermFreq + \", sumDocFreq: \" + sumDocFreq);\n    }\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  /**\n   * Creates statistics instance for a collection (field).\n   * @param field Field's name\n   * @param maxDoc total number of documents.\n   * @param docCount number of documents containing the field.\n   * @param sumTotalTermFreq number of tokens in the field.\n   * @param sumDocFreq number of postings list entries for the field.\n   * @throws IllegalArgumentException if {@code maxDoc} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is more than {@code maxDoc}.\n   * @throws IllegalArgumentException if {@code sumDocFreq} is less than {@code docCount}.\n   * @throws IllegalArgumentException if {@code sumTotalTermFreq} is less than {@code sumDocFreq}.\n   */\n  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    Objects.requireNonNull(field);\n    if (maxDoc <= 0) {\n      throw new IllegalArgumentException(\"maxDoc must be positive, maxDoc: \" + maxDoc);\n    }\n    if (docCount != -1) {\n      if (docCount <= 0) {\n        throw new IllegalArgumentException(\"docCount must be positive, docCount: \" + docCount);\n      }\n      if (docCount > maxDoc) {\n        throw new IllegalArgumentException(\"docCount must not exceed maxDoc, docCount: \" + docCount + \", maxDoc: \" + maxDoc);\n      }\n    }\n    if (sumDocFreq != -1) {\n      if (sumDocFreq <= 0) {\n        throw new IllegalArgumentException(\"sumDocFreq must be positive, sumDocFreq: \" + sumDocFreq);\n      }\n      if (docCount != -1) {\n        if (sumDocFreq < docCount) {\n          throw new IllegalArgumentException(\"sumDocFreq must be at least docCount, sumDocFreq: \" + sumDocFreq + \", docCount: \" + docCount);\n        }\n      }\n    }\n    if (sumTotalTermFreq != -1) {\n      if (sumTotalTermFreq <= 0) {\n        throw new IllegalArgumentException(\"sumTotalTermFreq must be positive, sumTotalTermFreq: \" + sumTotalTermFreq);\n      }\n      if (sumDocFreq != -1) {\n        if (sumTotalTermFreq < sumDocFreq) {\n          throw new IllegalArgumentException(\"sumTotalTermFreq must be at least sumDocFreq, sumTotalTermFreq: \" + sumTotalTermFreq + \", sumDocFreq: \" + sumDocFreq);\n        }\n      }\n    }\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/CollectionStatistics#CollectionStatistics(String,long,long,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a collection (field).\n   * @param field Field's name\n   * @param maxDoc total number of documents.\n   * @param docCount number of documents containing the field.\n   * @param sumTotalTermFreq number of tokens in the field.\n   * @param sumDocFreq number of postings list entries for the field.\n   * @throws IllegalArgumentException if {@code maxDoc} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is more than {@code maxDoc}.\n   * @throws IllegalArgumentException if {@code sumDocFreq} is less than {@code docCount}.\n   * @throws IllegalArgumentException if {@code sumTotalTermFreq} is less than {@code sumDocFreq}.\n   */\n  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    Objects.requireNonNull(field);\n    if (maxDoc <= 0) {\n      throw new IllegalArgumentException(\"maxDoc must be positive, maxDoc: \" + maxDoc);\n    }\n    if (docCount <= 0) {\n      throw new IllegalArgumentException(\"docCount must be positive, docCount: \" + docCount);\n    }\n    if (docCount > maxDoc) {\n      throw new IllegalArgumentException(\"docCount must not exceed maxDoc, docCount: \" + docCount + \", maxDoc: \" + maxDoc);\n    }\n    if (sumDocFreq <= 0) {\n      throw new IllegalArgumentException(\"sumDocFreq must be positive, sumDocFreq: \" + sumDocFreq);\n    }\n    if (sumDocFreq < docCount) {\n      throw new IllegalArgumentException(\"sumDocFreq must be at least docCount, sumDocFreq: \" + sumDocFreq + \", docCount: \" + docCount);\n    }\n    if (sumTotalTermFreq <= 0) {\n      throw new IllegalArgumentException(\"sumTotalTermFreq must be positive, sumTotalTermFreq: \" + sumTotalTermFreq);\n    }\n    if (sumTotalTermFreq < sumDocFreq) {\n      throw new IllegalArgumentException(\"sumTotalTermFreq must be at least sumDocFreq, sumTotalTermFreq: \" + sumTotalTermFreq + \", sumDocFreq: \" + sumDocFreq);\n    }\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","sourceOld":"  /**\n   * Creates statistics instance for a collection (field).\n   * @param field Field's name\n   * @param maxDoc total number of documents.\n   * @param docCount number of documents containing the field.\n   * @param sumTotalTermFreq number of tokens in the field.\n   * @param sumDocFreq number of postings list entries for the field.\n   * @throws IllegalArgumentException if {@code maxDoc} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is negative or zero.\n   * @throws IllegalArgumentException if {@code docCount} is more than {@code maxDoc}.\n   * @throws IllegalArgumentException if {@code sumDocFreq} is less than {@code docCount}.\n   * @throws IllegalArgumentException if {@code sumTotalTermFreq} is less than {@code sumDocFreq}.\n   */\n  public CollectionStatistics(String field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) {\n    Objects.requireNonNull(field);\n    if (maxDoc <= 0) {\n      throw new IllegalArgumentException(\"maxDoc must be positive, maxDoc: \" + maxDoc);\n    }\n    if (docCount != -1) {\n      if (docCount <= 0) {\n        throw new IllegalArgumentException(\"docCount must be positive, docCount: \" + docCount);\n      }\n      if (docCount > maxDoc) {\n        throw new IllegalArgumentException(\"docCount must not exceed maxDoc, docCount: \" + docCount + \", maxDoc: \" + maxDoc);\n      }\n    }\n    if (sumDocFreq != -1) {\n      if (sumDocFreq <= 0) {\n        throw new IllegalArgumentException(\"sumDocFreq must be positive, sumDocFreq: \" + sumDocFreq);\n      }\n      if (docCount != -1) {\n        if (sumDocFreq < docCount) {\n          throw new IllegalArgumentException(\"sumDocFreq must be at least docCount, sumDocFreq: \" + sumDocFreq + \", docCount: \" + docCount);\n        }\n      }\n    }\n    if (sumTotalTermFreq != -1) {\n      if (sumTotalTermFreq <= 0) {\n        throw new IllegalArgumentException(\"sumTotalTermFreq must be positive, sumTotalTermFreq: \" + sumTotalTermFreq);\n      }\n      if (sumDocFreq != -1) {\n        if (sumTotalTermFreq < sumDocFreq) {\n          throw new IllegalArgumentException(\"sumTotalTermFreq must be at least sumDocFreq, sumTotalTermFreq: \" + sumTotalTermFreq + \", sumDocFreq: \" + sumDocFreq);\n        }\n      }\n    }\n    this.field = field;\n    this.maxDoc = maxDoc;\n    this.docCount = docCount;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"086ffe31d8fba0110227db122974163709ecc1b4":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","086ffe31d8fba0110227db122974163709ecc1b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"]},"commit2Childs":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["d0d1f90e969803cc84174589b5e4a39b7935fecd","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}