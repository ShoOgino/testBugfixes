{"path":"src/java/org/apache/solr/search/HashDocSet#put(int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"/dev/null","sourceNew":"  void put(int doc) {\n    table[getSlot(doc)]=doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040","date":1169358391,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","sourceOld":"  void put(int doc) {\n    table[getSlot(doc)]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/HashDocSet#put(int).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#put(int).mjava","sourceNew":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","sourceOld":"  void put(int doc) {\n    int s = doc & mask;\n    while (table[s]!=EMPTY) {\n      // Adding an odd number to this power-of-two hash table is\n      // guaranteed to do a full traversal, so instead of re-hashing\n      // we jump straight to a \"linear\" traversal.\n      // The key is that we provide many different ways to do the\n      // traversal (tablesize/2) based on the last hash code (the doc).\n      // Rely on loop invariant code motion to eval ((doc>>7)|1) only once.\n      // otherwise, we would need to pull the first case out of the loop.\n      s = (s + ((doc>>7)|1)) & mask;\n    }\n    table[s]=doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}