{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      @Override\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      @Override\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#getAliveCheckRunner(WeakReference[LBHttpSolrClient]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#getAliveCheckRunner(WeakReference[LBHttpSolrServer]).mjava","sourceNew":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrClient> lbRef) {\n    return new Runnable() {\n      @Override\n      public void run() {\n        LBHttpSolrClient lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private static Runnable getAliveCheckRunner(final WeakReference<LBHttpSolrServer> lbRef) {\n    return new Runnable() {\n      @Override\n      public void run() {\n        LBHttpSolrServer lb = lbRef.get();\n        if (lb != null && lb.zombieServers != null) {\n          for (ServerWrapper zombieServer : lb.zombieServers.values()) {\n            lb.checkAZombieServer(zombieServer);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}