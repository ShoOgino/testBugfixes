{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","commits":[{"id":"dd0759e8803a09424422a329163d5900f6b10c42","date":1431227616,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","pathOld":"/dev/null","sourceNew":"  private void doRehash(LongCounts table) {\n    if (accs.length == 0) return;  // TODO: FUTURE: only need to resize acc we will sort on\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldMissingSlot = missingSlot;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldMissingSlot >= 0) {\n      missingSlot = numSlots++;\n    }\n    if (allBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldMissingSlot) {\n          return missingSlot;\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    for (SlotAcc acc : accs) {\n      acc.resize( resizer );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176","1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && missingAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldMissingSlot = missingSlot;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldMissingSlot >= 0) {\n      missingSlot = numSlots++;\n    }\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldMissingSlot) {\n          return missingSlot;\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (missingAcc != null) {\n      missingAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (accs.length == 0) return;  // TODO: FUTURE: only need to resize acc we will sort on\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldMissingSlot = missingSlot;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldMissingSlot >= 0) {\n      missingSlot = numSlots++;\n    }\n    if (allBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldMissingSlot) {\n          return missingSlot;\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    for (SlotAcc acc : accs) {\n      acc.resize( resizer );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"168f749bbf9022a1ba5fea29c54baa1c00883d1d","date":1437587676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && missingAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldMissingSlot = missingSlot;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldMissingSlot >= 0) {\n      missingSlot = numSlots++;\n    }\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldMissingSlot) {\n          return missingSlot;\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (missingAcc != null) {\n      missingAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#doRehash(LongCounts).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric#doRehash(LongCounts).mjava","sourceNew":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","sourceOld":"  private void doRehash(LongCounts table) {\n    if (collectAcc == null && allBucketsAcc == null) return;\n\n    // Our \"count\" acc is backed by the hash table and will already be rehashed\n    // otherAccs don't need to be rehashed\n\n    int newTableSize = table.numSlots();\n    int numSlots = newTableSize;\n    final int oldAllBucketsSlot = allBucketsSlot;\n    if (oldAllBucketsSlot >= 0) {\n      allBucketsSlot = numSlots++;\n    }\n\n    final int finalNumSlots = numSlots;\n    final int[] mapping = table.oldToNewMapping;\n\n    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {\n      @Override\n      public int getNewSize() {\n        return finalNumSlots;\n      }\n\n      @Override\n      public int getNewSlot(int oldSlot) {\n        if (oldSlot < mapping.length) {\n          return mapping[oldSlot];\n        }\n        if (oldSlot == oldAllBucketsSlot) {\n          return allBucketsSlot;\n        }\n        return -1;\n      }\n    };\n\n    // NOTE: resizing isn't strictly necessary for missing/allBuckets... we could just set the new slot directly\n    if (collectAcc != null) {\n      collectAcc.resize(resizer);\n    }\n    if (allBucketsAcc != null) {\n      allBucketsAcc.resize(resizer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["dd0759e8803a09424422a329163d5900f6b10c42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","79759974460bc59933cd169acc94f5c6b16368d5"],"dd0759e8803a09424422a329163d5900f6b10c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79759974460bc59933cd169acc94f5c6b16368d5":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["168f749bbf9022a1ba5fea29c54baa1c00883d1d","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd0759e8803a09424422a329163d5900f6b10c42"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"dd0759e8803a09424422a329163d5900f6b10c42":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}