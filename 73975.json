{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","sourceNew":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#createCollection(String,String,int,int,int).mjava","sourceNew":"  private void createCollection(String name, String config, int numShards, int numReplicas)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n\n","sourceOld":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}