{"path":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","commits":[{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"/dev/null","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        cloudJetty.jetty.start();\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"/dev/null","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        cloudJetty.jetty.start();\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88d8990f55f70c01813e87707f2ef833141f5987","date":1403212584,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        assertTrue(\"Unable to restart (#\"+i+\"): \" + cloudJetty, \n                   chaosMonkey.start(cloudJetty.jetty));\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        cloudJetty.jetty.start();\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e48507d567e98bb5eb2343b1a17f7d27435807f","date":1406016099,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty,\n            ChaosMonkey.start(cloudJetty.jetty));\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        assertTrue(\"Unable to restart (#\"+i+\"): \" + cloudJetty, \n                   chaosMonkey.start(cloudJetty.jetty));\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, 60);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if(leader == null) log.error(\"NOOVERSEER election queue is :\"+ OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50bdc7c19755e2cab7f6e81a5d70583c375950ce","date":1407852873,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numOverseers = 3;\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> overseerDesignates = new ArrayList<>();\n    for (int i = 0; i < numOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      overseerDesignates.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numRestarts = 4; // 1 + random().nextInt(5);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : overseerDesignates) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty,\n            ChaosMonkey.start(cloudJetty.jetty));\n        success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n      }\n    }\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" + OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient()));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(shardCount, numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(shardCount);\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215","date":1433359369,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      invokeCollectionApi(CollectionParams.ACTION, CollectionParams.CollectionAction.ADDROLE.toLower(), \"role\", \"overseer\", \"node\", nodeName);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5551d21c759979ad637581208f5ff5bd7497b5d7","date":1447783672,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    OverseerElectionContext.PATH + LeaderElector.ELECTION_NODE));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      new CollectionAdminRequest.AddRole().setRole(\"overseer\").setNode(nodeName).process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        assertTrue(\"Unable to restart (#\" + i + \"): \" + cloudJetty, ChaosMonkey.start(cloudJetty.jetty));\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":["50bdc7c19755e2cab7f6e81a5d70583c375950ce"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n\n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n\n      }\n    }\n\n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n        \n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        \n      }\n    }\n    \n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1); // logOk\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is : {}\"\n                  , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :{}\"\n                , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n\n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n\n      }\n    }\n\n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1);\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is :\" +\n                  OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :\" +\n                OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n\n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n\n      }\n    }\n\n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RollingRestartTest#restartWithRolesTest().mjava","sourceNew":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1); // nowarn\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is : {}\"\n                  , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :{}\"\n                , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n\n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n\n      }\n    }\n\n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n  }\n\n","sourceOld":"  public void restartWithRolesTest() throws Exception {\n    String leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    int numDesignateOverseers = TEST_NIGHTLY ? 16 : 2;\n    numDesignateOverseers = Math.max(getShardCount(), numDesignateOverseers);\n    List<String> designates = new ArrayList<>();\n    List<CloudJettyRunner> designateJettys = new ArrayList<>();\n    for (int i = 0; i < numDesignateOverseers; i++) {\n      int n = random().nextInt(getShardCount());\n      String nodeName = cloudJettys.get(n).nodeName;\n      log.info(\"Chose {} as overseer designate\", nodeName);\n      CollectionAdminRequest.addRole(nodeName,\"overseer\").process(cloudClient);\n      designates.add(nodeName);\n      designateJettys.add(cloudJettys.get(n));\n    }\n\n    waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n\n    boolean sawLiveDesignate = false;\n    int numRestarts = 1 + random().nextInt(TEST_NIGHTLY ? 12 : 2);\n    for (int i = 0; i < numRestarts; i++) {\n      log.info(\"Rolling restart #{}\", i + 1); // logOk\n      for (CloudJettyRunner cloudJetty : designateJettys) {\n        log.info(\"Restarting {}\", cloudJetty);\n        chaosMonkey.stopJetty(cloudJetty);\n        cloudClient.getZkStateReader().updateLiveNodes();\n        boolean liveDesignates = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n        if (liveDesignates) {\n          sawLiveDesignate = true;\n          boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n          if (!success) {\n            leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n            if (leader == null)\n              log.error(\"NOOVERSEER election queue is : {}\"\n                  , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                      \"/overseer_elect/election\"));\n            fail(\"No overseer designate as leader found after restart #\" + (i + 1) + \": \" + leader);\n          }\n        }\n        cloudJetty.jetty.start();\n        boolean success = waitUntilOverseerDesignateIsLeader(cloudClient.getZkStateReader().getZkClient(), designates, MAX_WAIT_TIME);\n        if (!success) {\n          leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n          if (leader == null)\n            log.error(\"NOOVERSEER election queue is :{}\"\n                , OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n                    \"/overseer_elect/election\"));\n          fail(\"No overseer leader found after restart #\" + (i + 1) + \": \" + leader);\n        }\n\n        cloudClient.getZkStateReader().updateLiveNodes();\n        sawLiveDesignate = CollectionUtils.intersection(cloudClient.getZkStateReader().getClusterState().getLiveNodes(), designates).size() > 0;\n\n      }\n    }\n\n    assertTrue(\"Test may not be working if we never saw a live designate\", sawLiveDesignate);\n\n    leader = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    assertNotNull(leader);\n    log.info(\"Current overseer leader (after restart) = {}\", leader);\n\n    cloudClient.getZkStateReader().getZkClient().printLayoutToStream(System.out);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"7d996c36bf85996da326201b915c87d41449d7f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215":["abb23fcc2461782ab204e61213240feb77d355aa"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215"],"50bdc7c19755e2cab7f6e81a5d70583c375950ce":["6e48507d567e98bb5eb2343b1a17f7d27435807f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3217321f3e1d7922898c6c633d17acfa840d6875"],"abb23fcc2461782ab204e61213240feb77d355aa":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d996c36bf85996da326201b915c87d41449d7f5"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["50bdc7c19755e2cab7f6e81a5d70583c375950ce"],"3217321f3e1d7922898c6c633d17acfa840d6875":["5551d21c759979ad637581208f5ff5bd7497b5d7","ac97ea104d893f16aab430d9904473bc1f233f3c"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["5551d21c759979ad637581208f5ff5bd7497b5d7","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5551d21c759979ad637581208f5ff5bd7497b5d7","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"6e48507d567e98bb5eb2343b1a17f7d27435807f":["88d8990f55f70c01813e87707f2ef833141f5987"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["50bdc7c19755e2cab7f6e81a5d70583c375950ce","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"88d8990f55f70c01813e87707f2ef833141f5987":["7d996c36bf85996da326201b915c87d41449d7f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"7d996c36bf85996da326201b915c87d41449d7f5":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","88d8990f55f70c01813e87707f2ef833141f5987"],"7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"50bdc7c19755e2cab7f6e81a5d70583c375950ce":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"abb23fcc2461782ab204e61213240feb77d355aa":["7c36bb9a43f930bfda9ebe0de5fc6894e1fa0215"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["abb23fcc2461782ab204e61213240feb77d355aa","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"6e48507d567e98bb5eb2343b1a17f7d27435807f":["50bdc7c19755e2cab7f6e81a5d70583c375950ce"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"88d8990f55f70c01813e87707f2ef833141f5987":["6e48507d567e98bb5eb2343b1a17f7d27435807f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","e9017cf144952056066919f1ebc7897ff9bd71b1","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}