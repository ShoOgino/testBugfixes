{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4d1ecf1105647f8b2f8f78a1f312c7e766ff37","date":1505159255,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","sourceNew":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    final List<Feature> features = getFeatures();\n    final List<Normalizer> norms = getNorms();\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","sourceNew":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    final List<Feature> features = getFeatures();\n    final List<Normalizer> norms = getNorms();\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/model/LTRScoringModel#validate().mjava","sourceNew":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    final List<Feature> features = getFeatures();\n    final List<Normalizer> norms = getNorms();\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Validate that settings make sense and throws\n   * {@link ModelException} if they do not make sense.\n   */\n  protected void validate() throws ModelException {\n    if (features.isEmpty()) {\n      throw new ModelException(\"no features declared for model \"+name);\n    }\n    final HashSet<String> featureNames = new HashSet<>();\n    for (final Feature feature : features) {\n      final String featureName = feature.getName();\n      if (!featureNames.add(featureName)) {\n        throw new ModelException(\"duplicated feature \"+featureName+\" in model \"+name);\n      }\n    }\n    if (features.size() != norms.size()) {\n      throw new ModelException(\"counted \"+features.size()+\" features and \"+norms.size()+\" norms in model \"+name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","ffb85feece8645a035c02443a625f5af15e1106b"],"ffb85feece8645a035c02443a625f5af15e1106b":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","fa4d1ecf1105647f8b2f8f78a1f312c7e766ff37"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4d1ecf1105647f8b2f8f78a1f312c7e766ff37":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"ffb85feece8645a035c02443a625f5af15e1106b":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["685bd38810c206c93e9058f3c2cfa9827c086c27","ffb85feece8645a035c02443a625f5af15e1106b","9720b151fde2073f4e401450f4574e5f31c2d0ff","fa4d1ecf1105647f8b2f8f78a1f312c7e766ff37"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"fa4d1ecf1105647f8b2f8f78a1f312c7e766ff37":["ffb85feece8645a035c02443a625f5af15e1106b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}