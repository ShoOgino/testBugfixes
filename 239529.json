{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n      } else {\n        int previous = random.nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random.nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random.nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random.nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e93495b32c75f64bd15bdeb1183cd6b73999796","date":1391770337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.shutdown();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.shutdown();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.shutdown();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.shutdown();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.shutdown();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.shutdown();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.shutdown();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.shutdown();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f695337371af9f2554c2d7ecc301f4306bd864b","date":1433621466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddCloseOpen().mjava","sourceNew":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n\n    // A commit is now seen as a change to an NRT reader:\n    assertFalse(reader.isCurrent());\n    reader.close();\n    reader = writer.getReader();\n    assertTrue(reader.isCurrent());\n    writer.close();\n\n    assertTrue(reader.isCurrent());\n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAddCloseOpen() throws IOException {\n    // Can't use assertNoDeletes: this test pulls a non-NRT\n    // reader in the end:\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    for (int i = 0; i < 97 ; i++) {\n      DirectoryReader reader = writer.getReader();\n      if (i == 0) {\n        writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n      } else {\n        int previous = random().nextInt(i);\n        // a check if the reader is current here could fail since there might be\n        // merges going on.\n        switch (random().nextInt(5)) {\n        case 0:\n        case 1:\n        case 2:\n          writer.addDocument(DocHelper.createDocument(i, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 3:\n          writer.updateDocument(new Term(\"id\", \"\" + previous), DocHelper.createDocument(\n              previous, \"x\", 1 + random().nextInt(5)));\n          break;\n        case 4:\n          writer.deleteDocuments(new Term(\"id\", \"\" + previous));\n        }\n      }\n      assertFalse(reader.isCurrent());\n      reader.close();\n    }\n    writer.forceMerge(1); // make sure all merging is done etc.\n    DirectoryReader reader = writer.getReader();\n    writer.commit(); // no changes that are not visible to the reader\n    assertTrue(reader.isCurrent());\n    writer.close();\n    assertTrue(reader.isCurrent()); // all changes are visible to the reader\n    iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    writer = new IndexWriter(dir1, iwc);\n    assertTrue(reader.isCurrent());\n    writer.addDocument(DocHelper.createDocument(1, \"x\", 1+random().nextInt(5)));\n    assertTrue(reader.isCurrent()); // segments in ram but IW is different to the readers one\n    writer.close();\n    assertFalse(reader.isCurrent()); // segments written\n    reader.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"5e93495b32c75f64bd15bdeb1183cd6b73999796":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["5e93495b32c75f64bd15bdeb1183cd6b73999796"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f695337371af9f2554c2d7ecc301f4306bd864b"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["5e93495b32c75f64bd15bdeb1183cd6b73999796"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"5e93495b32c75f64bd15bdeb1183cd6b73999796":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4f695337371af9f2554c2d7ecc301f4306bd864b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["527cc14542789f47d75da436cb4287d1ab887e34"],"4f695337371af9f2554c2d7ecc301f4306bd864b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}