{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/TempSepPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"fd65164c607d597fe7bb977735aa1ddfff22ed36","date":1377140532,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/TempSepPostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/TempSepPostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["fd65164c607d597fe7bb977735aa1ddfff22ed36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd65164c607d597fe7bb977735aa1ddfff22ed36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}