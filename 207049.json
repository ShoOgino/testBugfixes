{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testNastyPattern().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testNastyPattern().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testNastyPattern().mjava","sourceNew":"  /**\n   * A demonstration of how backtracking regular expressions can lead to relatively \n   * easy DoS attacks.\n   * \n   * @see \"http://swtch.com/~rsc/regexp/regexp1.html\"\n   */\n  @Ignore\n  public void testNastyPattern() throws Exception {\n    Pattern p = Pattern.compile(\"(c.+)*xy\");\n    String input = \"[;<!--aecbbaa--><    febcfdc fbb = \\\"fbeeebff\\\" fc = dd   >\\\\';<eefceceaa e= babae\\\" eacbaff =\\\"fcfaccacd\\\" = bcced>>><  bccaafe edb = ecfccdff\\\"   <?</script><    edbd ebbcd=\\\"faacfcc\\\" aeca= bedbc ceeaac =adeafde aadccdaf = \\\"afcc ffda=aafbe &#x16921ed5\\\"1843785582']\";\n    for (int i = 0; i < input.length(); i++) {\n      Matcher matcher = p.matcher(input.substring(0, i));\n      long t = System.currentTimeMillis();\n      if (matcher.find()) {\n        System.out.println(matcher.group());\n      }\n      System.out.println(i + \" > \" + (System.currentTimeMillis() - t) / 1000.0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A demonstration of how backtracking regular expressions can lead to relatively \n   * easy DoS attacks.\n   * \n   * @see \"http://swtch.com/~rsc/regexp/regexp1.html\"\n   */\n  @Ignore\n  public void testNastyPattern() throws Exception {\n    Pattern p = Pattern.compile(\"(c.+)*xy\");\n    String input = \"[;<!--aecbbaa--><    febcfdc fbb = \\\"fbeeebff\\\" fc = dd   >\\\\';<eefceceaa e= babae\\\" eacbaff =\\\"fcfaccacd\\\" = bcced>>><  bccaafe edb = ecfccdff\\\"   <?</script><    edbd ebbcd=\\\"faacfcc\\\" aeca= bedbc ceeaac =adeafde aadccdaf = \\\"afcc ffda=aafbe &#x16921ed5\\\"1843785582']\";\n    for (int i = 0; i < input.length(); i++) {\n      Matcher matcher = p.matcher(input.substring(0, i));\n      long t = System.currentTimeMillis();\n      if (matcher.find()) {\n        System.out.println(matcher.group());\n      }\n      System.out.println(i + \" > \" + (System.currentTimeMillis() - t) / 1000.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testNastyPattern().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testNastyPattern().mjava","sourceNew":"  /**\n   * A demonstration of how backtracking regular expressions can lead to relatively \n   * easy DoS attacks.\n   * \n   * @see <a href=\"http://swtch.com/~rsc/regexp/regexp1.html\">\"http://swtch.com/~rsc/regexp/regexp1.html\"</a>\n   */\n  @Ignore\n  public void testNastyPattern() throws Exception {\n    Pattern p = Pattern.compile(\"(c.+)*xy\");\n    String input = \"[;<!--aecbbaa--><    febcfdc fbb = \\\"fbeeebff\\\" fc = dd   >\\\\';<eefceceaa e= babae\\\" eacbaff =\\\"fcfaccacd\\\" = bcced>>><  bccaafe edb = ecfccdff\\\"   <?</script><    edbd ebbcd=\\\"faacfcc\\\" aeca= bedbc ceeaac =adeafde aadccdaf = \\\"afcc ffda=aafbe &#x16921ed5\\\"1843785582']\";\n    for (int i = 0; i < input.length(); i++) {\n      Matcher matcher = p.matcher(input.substring(0, i));\n      long t = System.currentTimeMillis();\n      if (matcher.find()) {\n        System.out.println(matcher.group());\n      }\n      System.out.println(i + \" > \" + (System.currentTimeMillis() - t) / 1000.0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A demonstration of how backtracking regular expressions can lead to relatively \n   * easy DoS attacks.\n   * \n   * @see \"http://swtch.com/~rsc/regexp/regexp1.html\"\n   */\n  @Ignore\n  public void testNastyPattern() throws Exception {\n    Pattern p = Pattern.compile(\"(c.+)*xy\");\n    String input = \"[;<!--aecbbaa--><    febcfdc fbb = \\\"fbeeebff\\\" fc = dd   >\\\\';<eefceceaa e= babae\\\" eacbaff =\\\"fcfaccacd\\\" = bcced>>><  bccaafe edb = ecfccdff\\\"   <?</script><    edbd ebbcd=\\\"faacfcc\\\" aeca= bedbc ceeaac =adeafde aadccdaf = \\\"afcc ffda=aafbe &#x16921ed5\\\"1843785582']\";\n    for (int i = 0; i < input.length(); i++) {\n      Matcher matcher = p.matcher(input.substring(0, i));\n      long t = System.currentTimeMillis();\n      if (matcher.find()) {\n        System.out.println(matcher.group());\n      }\n      System.out.println(i + \" > \" + (System.currentTimeMillis() - t) / 1000.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}