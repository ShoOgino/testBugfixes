{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","commits":[{"id":"0a1daa873da17eb29437c755891f372087a17562","date":1553608605,"type":0,"author":"Henning Andersen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testPendingDeletionsRollbackWithReader() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    try (FSDirectory _dir = new SimpleFSDirectory(root)) {\n      Directory dir = new FilterDirectory(_dir) {};\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"numval\", 1));\n      w.addDocument(d);\n      w.commit();\n      w.addDocument(d);\n      w.flush();\n      DirectoryReader reader = DirectoryReader.open(w);\n      w.rollback();\n\n      // try-delete superfluous files (some will fail due to windows-fs)\n      IndexWriterConfig iwc2 = new IndexWriterConfig(new MockAnalyzer(random()));\n      new IndexWriter(dir, iwc2).close();\n\n      // test that we can index on top of pending deletions\n      IndexWriterConfig iwc3 = new IndexWriterConfig(new MockAnalyzer(random()));\n      w = new IndexWriter(dir, iwc3);\n      w.addDocument(d);\n      w.commit();\n\n      reader.close();\n      w.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","sourceNew":"  public void testPendingDeletionsRollbackWithReader() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    try (FSDirectory _dir = new NIOFSDirectory(root)) {\n      Directory dir = new FilterDirectory(_dir) {};\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"numval\", 1));\n      w.addDocument(d);\n      w.commit();\n      w.addDocument(d);\n      w.flush();\n      DirectoryReader reader = DirectoryReader.open(w);\n      w.rollback();\n\n      // try-delete superfluous files (some will fail due to windows-fs)\n      IndexWriterConfig iwc2 = new IndexWriterConfig(new MockAnalyzer(random()));\n      new IndexWriter(dir, iwc2).close();\n\n      // test that we can index on top of pending deletions\n      IndexWriterConfig iwc3 = new IndexWriterConfig(new MockAnalyzer(random()));\n      w = new IndexWriter(dir, iwc3);\n      w.addDocument(d);\n      w.commit();\n\n      reader.close();\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void testPendingDeletionsRollbackWithReader() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    try (FSDirectory _dir = new SimpleFSDirectory(root)) {\n      Directory dir = new FilterDirectory(_dir) {};\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"numval\", 1));\n      w.addDocument(d);\n      w.commit();\n      w.addDocument(d);\n      w.flush();\n      DirectoryReader reader = DirectoryReader.open(w);\n      w.rollback();\n\n      // try-delete superfluous files (some will fail due to windows-fs)\n      IndexWriterConfig iwc2 = new IndexWriterConfig(new MockAnalyzer(random()));\n      new IndexWriter(dir, iwc2).close();\n\n      // test that we can index on top of pending deletions\n      IndexWriterConfig iwc3 = new IndexWriterConfig(new MockAnalyzer(random()));\n      w = new IndexWriter(dir, iwc3);\n      w.addDocument(d);\n      w.commit();\n\n      reader.close();\n      w.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeletionsRollbackWithReader().mjava","sourceNew":"  public void testPendingDeletionsRollbackWithReader() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    try (FSDirectory _dir = new NIOFSDirectory(root)) {\n      Directory dir = new FilterDirectory(_dir) {};\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"numval\", 1));\n      w.addDocument(d);\n      w.commit();\n      w.addDocument(d);\n      w.flush();\n      DirectoryReader reader = DirectoryReader.open(w);\n      w.rollback();\n\n      // try-delete superfluous files (some will fail due to windows-fs)\n      IndexWriterConfig iwc2 = new IndexWriterConfig(new MockAnalyzer(random()));\n      new IndexWriter(dir, iwc2).close();\n\n      // test that we can index on top of pending deletions\n      IndexWriterConfig iwc3 = new IndexWriterConfig(new MockAnalyzer(random()));\n      w = new IndexWriter(dir, iwc3);\n      w.addDocument(d);\n      w.commit();\n\n      reader.close();\n      w.close();\n    }\n  }\n\n","sourceOld":"  public void testPendingDeletionsRollbackWithReader() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    try (FSDirectory _dir = new SimpleFSDirectory(root)) {\n      Directory dir = new FilterDirectory(_dir) {};\n\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"numval\", 1));\n      w.addDocument(d);\n      w.commit();\n      w.addDocument(d);\n      w.flush();\n      DirectoryReader reader = DirectoryReader.open(w);\n      w.rollback();\n\n      // try-delete superfluous files (some will fail due to windows-fs)\n      IndexWriterConfig iwc2 = new IndexWriterConfig(new MockAnalyzer(random()));\n      new IndexWriter(dir, iwc2).close();\n\n      // test that we can index on top of pending deletions\n      IndexWriterConfig iwc3 = new IndexWriterConfig(new MockAnalyzer(random()));\n      w = new IndexWriter(dir, iwc3);\n      w.addDocument(d);\n      w.commit();\n\n      reader.close();\n      w.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["0a1daa873da17eb29437c755891f372087a17562","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["0a1daa873da17eb29437c755891f372087a17562"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a1daa873da17eb29437c755891f372087a17562":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a1daa873da17eb29437c755891f372087a17562"],"0a1daa873da17eb29437c755891f372087a17562":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}