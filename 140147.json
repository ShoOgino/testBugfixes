{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","commits":[{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[]{\"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\"};\n    FieldType[] fieldTypes = new FieldType[]{new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField()};\n    assert fieldTypeNames.length == fieldTypes.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, \"0\") instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, \"0\") instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","sourceNew":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[] { \"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\", \"_p_dt\" };\n    FieldType[] fieldTypes = new FieldType[]\n        { new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField(), new DatePointField() };\n    String[] ints = toStringArray(getRandomInts(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] longs = toStringArray(getRandomLongs(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] doubles = toStringArray(getRandomDoubles(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] floats = toStringArray(getRandomFloats(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] dates = toStringArray(getRandomInstants(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] min = new String[] { ints[0], longs[0], doubles[0], floats[0], dates[0] };\n    String[] max = new String[] { ints[1], longs[1], doubles[1], floats[1], dates[1] };\n    assert fieldTypeNames.length == fieldTypes.length\n        && fieldTypeNames.length == max.length\n        && fieldTypeNames.length == min.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, min[i]) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, min[i]) instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[]{\"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\"};\n    FieldType[] fieldTypes = new FieldType[]{new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField()};\n    assert fieldTypeNames.length == fieldTypes.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, \"0\") instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, \"0\") instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","sourceNew":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[] { \"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\", \"_p_dt\" };\n    FieldType[] fieldTypes = new FieldType[]\n        { new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField(), new DatePointField() };\n    String[] ints = toStringArray(getRandomInts(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] longs = toStringArray(getRandomLongs(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] doubles = toStringArray(getRandomDoubles(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] floats = toStringArray(getRandomFloats(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] dates = toStringArray(getRandomInstants(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] min = new String[] { ints[0], longs[0], doubles[0], floats[0], dates[0] };\n    String[] max = new String[] { ints[1], longs[1], doubles[1], floats[1], dates[1] };\n    assert fieldTypeNames.length == fieldTypes.length\n        && fieldTypeNames.length == max.length\n        && fieldTypeNames.length == min.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, min[i]) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, min[i]) instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[]{\"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\"};\n    FieldType[] fieldTypes = new FieldType[]{new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField()};\n    assert fieldTypeNames.length == fieldTypes.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, \"0\") instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, \"0\") instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testIndexOrDocValuesQuery().mjava","sourceNew":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[] { \"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\", \"_p_dt\" };\n    FieldType[] fieldTypes = new FieldType[]\n        { new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField(), new DatePointField() };\n    String[] ints = toStringArray(getRandomInts(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] longs = toStringArray(getRandomLongs(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] doubles = toStringArray(getRandomDoubles(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] floats = toStringArray(getRandomFloats(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] dates = toStringArray(getRandomInstants(2, false).stream().sorted().collect(Collectors.toList()));\n    String[] min = new String[] { ints[0], longs[0], doubles[0], floats[0], dates[0] };\n    String[] max = new String[] { ints[1], longs[1], doubles[1], floats[1], dates[1] };\n    assert fieldTypeNames.length == fieldTypes.length\n        && fieldTypeNames.length == max.length\n        && fieldTypeNames.length == min.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, min[i], max[i], true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, min[i], max[i], true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, min[i]) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, min[i]) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, min[i]) instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testIndexOrDocValuesQuery() throws Exception {\n    String[] fieldTypeNames = new String[]{\"_p_i\", \"_p_l\", \"_p_d\", \"_p_f\"};\n    FieldType[] fieldTypes = new FieldType[]{new IntPointField(), new LongPointField(), new DoublePointField(), new FloatPointField()};\n    assert fieldTypeNames.length == fieldTypes.length;\n    for (int i = 0; i < fieldTypeNames.length; i++) {\n      SchemaField fieldIndexed = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i]);\n      SchemaField fieldIndexedAndDv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_dv\");\n      SchemaField fieldIndexedMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv\");\n      SchemaField fieldIndexedAndDvMv = h.getCore().getLatestSchema().getField(\"foo_\" + fieldTypeNames[i] + \"_mv_dv\");\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexed, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedMv, \"0\", \"10\", true, true) instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getRangeQuery(null, fieldIndexedAndDvMv, \"0\", \"10\", true, true) instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexed, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDv, \"0\") instanceof IndexOrDocValuesQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedMv, \"0\") instanceof PointRangeQuery);\n      assertTrue(fieldTypes[i].getFieldQuery(null, fieldIndexedAndDvMv, \"0\") instanceof IndexOrDocValuesQuery);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["19284d685ce334cd95ff0ace2793842f84bf7383","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["19284d685ce334cd95ff0ace2793842f84bf7383"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["19284d685ce334cd95ff0ace2793842f84bf7383","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19284d685ce334cd95ff0ace2793842f84bf7383"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}