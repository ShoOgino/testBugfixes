{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}