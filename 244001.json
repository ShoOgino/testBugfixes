{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokEq(List,List,boolean).mjava","commits":[{"id":"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226","date":1172784996,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokEq(List,List,boolean).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokEq(List,List).mjava","sourceNew":"  private void assertTokEq(List a, List b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTokEq(List a, List b) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos)) {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4d615b00f60dce1293e87276b0685ce0f0d621","date":1179940685,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/BaseTokenTestCase#assertTokEq(List[Token],List[Token],boolean).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#assertTokEq(List,List,boolean).mjava","sourceNew":"  private void assertTokEq(List<Token> a, List<Token> b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTokEq(List a, List b, boolean checkOff) {\n    int pos=0;\n    for (Iterator iter = a.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (!tokAt(b, tok.termText(), pos\n              , checkOff ? tok.startOffset() : -1\n              , checkOff ? tok.endOffset() : -1\n              )) \n      {\n        fail(a + \"!=\" + b);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de4d615b00f60dce1293e87276b0685ce0f0d621":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"de4d615b00f60dce1293e87276b0685ce0f0d621":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de4d615b00f60dce1293e87276b0685ce0f0d621","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}