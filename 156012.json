{"path":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(maxDoc, values);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(maxDoc, values);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(maxDoc, values);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.maxDoc();\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                               new Iterable<Number>() {\n                                 @Override\n                                 public Iterator<Number> iterator() {\n                                   return new NumericIterator(maxDoc, values);\n                                 }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField.iterator());\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField.iterator());\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField);\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,Sorter.DocMap,NormsConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":"  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, NormsConsumer normsConsumer) throws IOException {\n    final PackedLongValues values = pending.build();\n    final SortingLeafReader.CachedNumericDVs sorted;\n    if (sortMap != null) {\n      sorted = NumericDocValuesWriter.sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedNorms(values, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   if (sorted == null) {\n                                     return new BufferedNorms(values, docsWithField.iterator());\n                                   } else {\n                                     return new SortingLeafReader.SortingNumericDocValues(sorted);\n                                   }\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField.iterator());\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormValuesWriter#flush(SegmentWriteState,NormsConsumer).mjava","sourceNew":null,"sourceOld":"  public void flush(SegmentWriteState state, NormsConsumer normsConsumer) throws IOException {\n\n    final PackedLongValues values = pending.build();\n\n    normsConsumer.addNormsField(fieldInfo,\n                                new NormsProducer() {\n                                  @Override\n                                  public NumericDocValues getNorms(FieldInfo fieldInfo2) {\n                                   if (fieldInfo != NormValuesWriter.this.fieldInfo) {\n                                     throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                   }\n                                   return new BufferedNorms(values, docsWithField.iterator());\n                                  }\n\n                                  @Override\n                                  public void checkIntegrity() {\n                                  }\n\n                                  @Override\n                                  public void close() {\n                                  }\n                                  \n                                  @Override\n                                  public long ramBytesUsed() {\n                                    return 0;\n                                  }\n                               });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b0267c69e2456a3477a1ad785723f2135da3117e":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["22a2e66dfda83847e80095b8693c660742ab3e9c","b0267c69e2456a3477a1ad785723f2135da3117e"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"b06445ae1731e049327712db0454e5643ca9b7fe":["22a2e66dfda83847e80095b8693c660742ab3e9c","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b0267c69e2456a3477a1ad785723f2135da3117e","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["b0267c69e2456a3477a1ad785723f2135da3117e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceec64003e8cc400e862d44c8589a41570432ab9":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["ceec64003e8cc400e862d44c8589a41570432ab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"b0267c69e2456a3477a1ad785723f2135da3117e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}