{"path":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1","date":1426889883,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fbf043f7a109d13b86b6fc6fee3953b0c103c24","date":1450713625,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  protected Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        // merge as Set\n        if (!(dest instanceof Set)) {\n          dest = new LinkedHashSet<>((Collection<?>) dest);\n        }\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, Collections.emptySet()));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), Collections.emptySet()));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        // merge as Set\n        if (!(dest instanceof Set)) {\n          dest = new LinkedHashSet<>((Collection<?>) dest);\n        }\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, Collections.emptySet()));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), Collections.emptySet()));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  protected Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        // merge as Set\n        if (!(dest instanceof Set)) {\n          dest = new LinkedHashSet<>((Collection<?>) dest);\n        }\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, Collections.emptySet()));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), Collections.emptySet()));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // only add to list if JSON is different\n    if (source.equals(dest)) return source;\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}