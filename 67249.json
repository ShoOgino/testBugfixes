{"path":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","commits":[{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): \" + info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): \" + info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","sourceNew":"  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): {}\", info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","sourceOld":"  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): \" + info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#getReservoir(SolrResourceLoader,PluginInfo).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): {}\", info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","sourceOld":"  private static final Reservoir getReservoir(SolrResourceLoader loader, PluginInfo info) {\n    if (info == null) {\n      return new ExponentiallyDecayingReservoir();\n    }\n    Clock clk = getClock(info, CLOCK);\n    String clazz = ExponentiallyDecayingReservoir.class.getName();\n    int size = -1;\n    double alpha = -1;\n    long window = -1;\n    if (info.initArgs != null) {\n      if (info.initArgs.get(RESERVOIR) != null) {\n        String val = String.valueOf(info.initArgs.get(RESERVOIR)).trim();\n        if (!val.isEmpty()) {\n          clazz = val;\n        }\n      }\n      Number n = (Number)info.initArgs.get(RESERVOIR_SIZE);\n      if (n != null) {\n        size = n.intValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_EDR_ALPHA);\n      if (n != null) {\n        alpha = n.doubleValue();\n      }\n      n = (Number)info.initArgs.get(RESERVOIR_WINDOW);\n      if (n != null) {\n        window = n.longValue();\n      }\n    }\n    if (size <= 0) {\n      size = DEFAULT_SIZE;\n    }\n    if (alpha <= 0) {\n      alpha = DEFAULT_ALPHA;\n    }\n    // special case for core implementations\n    if (clazz.equals(EDR_CLAZZ)) {\n      return new ExponentiallyDecayingReservoir(size, alpha, clk);\n    } else if (clazz.equals(UNI_CLAZZ)) {\n      return new UniformReservoir(size);\n    } else if (clazz.equals(STW_CLAZZ)) {\n      if (window <= 0) {\n        window = DEFAULT_WINDOW; // 5 minutes, comparable to EDR\n      }\n      return new SlidingTimeWindowReservoir(window, TimeUnit.SECONDS);\n    } else if (clazz.equals(SW_CLAZZ)) {\n      return new SlidingWindowReservoir(size);\n    } else { // custom reservoir\n      Reservoir reservoir;\n      try {\n        reservoir = loader.newInstance(clazz, Reservoir.class);\n        if (reservoir instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized)reservoir).init(info);\n        } else {\n          SolrPluginUtils.invokeSetters(reservoir, info.initArgs, true);\n        }\n        return reservoir;\n      } catch (Exception e) {\n        log.warn(\"Error initializing custom Reservoir implementation (will use default): {}\", info, e);\n        return new ExponentiallyDecayingReservoir(size, alpha, clk);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"9df8125ba9193a2e2e285ed92157810b1952a244":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","9df8125ba9193a2e2e285ed92157810b1952a244"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9df8125ba9193a2e2e285ed92157810b1952a244":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}