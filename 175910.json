{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","commits":[{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<String,Exception>\n                                         (coreInitFailures));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<String,Exception>\n                                         (coreInitFailures));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<String,Exception>\n                                         (coreInitFailures));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<>\n                                         (coreInitFailures));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<String,Exception>\n                                         (coreInitFailures));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","sourceOld":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String,Exception> getCoreInitFailures() {\n    synchronized ( coreInitFailures ) {\n      return Collections.unmodifiableMap(new LinkedHashMap<>\n                                         (coreInitFailures));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occurred when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","sourceOld":"  /**\n   * Returns an immutable Map of Exceptions that occured when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occurred when initializing\n   * SolrCores (either at startup, or do to runtime requests to create cores)\n   * keyed off of the name (String) of the SolrCore that had the Exception\n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change\n   * once returned to the client, the source data used to generate this Map\n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","sourceOld":"  /**\n   * Returns an immutable Map of Exceptions that occurred when initializing \n   * SolrCores (either at startup, or do to runtime requests to create cores) \n   * keyed off of the name (String) of the SolrCore that had the Exception \n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change \n   * once returned to the client, the source data used to generate this Map \n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreInitFailures().mjava","sourceNew":"  /**\n   * Returns an immutable Map of Exceptions that occurred when initializing\n   * SolrCores (either at startup, or do to runtime requests to create cores)\n   * keyed off of the name (String) of the SolrCore that had the Exception\n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change\n   * once returned to the client, the source data used to generate this Map\n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   * <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   * <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   * <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   * <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   * <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","sourceOld":"  /**\n   * Returns an immutable Map of Exceptions that occurred when initializing\n   * SolrCores (either at startup, or do to runtime requests to create cores)\n   * keyed off of the name (String) of the SolrCore that had the Exception\n   * during initialization.\n   * <p>\n   * While the Map returned by this method is immutable and will not change\n   * once returned to the client, the source data used to generate this Map\n   * can be changed as various SolrCore operations are performed:\n   * </p>\n   * <ul>\n   *  <li>Failed attempts to create new SolrCores will add new Exceptions.</li>\n   *  <li>Failed attempts to re-create a SolrCore using a name already contained in this Map will replace the Exception.</li>\n   *  <li>Failed attempts to reload a SolrCore will cause an Exception to be added to this list -- even though the existing SolrCore with that name will continue to be available.</li>\n   *  <li>Successful attempts to re-created a SolrCore using a name already contained in this Map will remove the Exception.</li>\n   *  <li>Registering an existing SolrCore with a name already contained in this Map (ie: ALIAS or SWAP) will remove the Exception.</li>\n   * </ul>\n   */\n  public Map<String, CoreLoadFailure> getCoreInitFailures() {\n    return ImmutableMap.copyOf(coreInitFailures);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"044244fb346dc6965d217fce709880d0e3bc2e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","044244fb346dc6965d217fce709880d0e3bc2e9f"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","044244fb346dc6965d217fce709880d0e3bc2e9f"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b627755385655c7cd3fb296f17593658805cf4d5":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"044244fb346dc6965d217fce709880d0e3bc2e9f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["b627755385655c7cd3fb296f17593658805cf4d5"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["044244fb346dc6965d217fce709880d0e3bc2e9f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"b627755385655c7cd3fb296f17593658805cf4d5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}