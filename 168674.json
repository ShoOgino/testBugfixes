{"path":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461fea4b90072bede0ef2dc0dba66a8c5dbf1356","date":1316194960,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n    \n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.99Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.9Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.990Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.900Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.90Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.000Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.00Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertFormatParsed(f.formatDate(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertToI(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.99Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.9Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertToI(\"1995-12-31T23:59:59.99\",  \"1995-12-31T23:59:59.990Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.900Z\");\n    assertToI(\"1995-12-31T23:59:59.9\",   \"1995-12-31T23:59:59.90Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.000Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.00Z\");\n    assertToI(\"1995-12-31T23:59:59\",     \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertToI(f.toInternal(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertToI(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() throws Exception {\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.99Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.9Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.990Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.900Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.90Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.000Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.00Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertFormatParsed(DateFormatUtil.formatDate(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","sourceOld":"  public void testToInternal() throws Exception {\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.99Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.9Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.990Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.900Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.90Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.000Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.00Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertFormatParsed(f.formatDate(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToInternal().mjava","sourceNew":null,"sourceOld":"  public void testToInternal() throws Exception {\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999666Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.999\", \"1995-12-31T23:59:59.999Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.99Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.9Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertFormatParsed(\"1995-12-31T23:59:59.99\", \"1995-12-31T23:59:59.990Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.900Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59.9\", \"1995-12-31T23:59:59.90Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.000Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.00Z\");\n    assertFormatParsed(\"1995-12-31T23:59:59\", \"1995-12-31T23:59:59.0Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    assertFormatParsed(DateFormatUtil.formatDate(p.parseMath(\"/DAY\")), \"NOW/DAY\");\n\n    // as of Solr 1.3\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123Z/DAY\");\n    assertFormatParsed(\"1995-12-31T00:00:00\", \"1995-12-31T23:59:59.123999Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"c26f00b574427b55127e869b935845554afde1fa":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["2106271e380c198349e0f6eac0395bb462913fab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}