{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n      }\n      \n      if (segmentDeletes != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n      }\n      \n      if (segmentDeletes != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n      }\n      \n      if (segmentDeletes != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n      }\n      \n      if (segmentDeletes != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}