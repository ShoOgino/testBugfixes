{"path":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testManyFields().mjava","commits":[{"id":"57dea9cc0cdda318a986edb0250c26cee1e8bb19","date":1410398087,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestManyFields#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testManyFields() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                 .setMaxBufferedDocs(10));\n    for(int j=0;j<100;j++) {\n      Document doc = new Document();\n      doc.add(newField(\"a\"+j, \"aaa\" + j, storedTextType));\n      doc.add(newField(\"b\"+j, \"aaa\" + j, storedTextType));\n      doc.add(newField(\"c\"+j, \"aaa\" + j, storedTextType));\n      doc.add(newField(\"d\"+j, \"aaa\", storedTextType));\n      doc.add(newField(\"e\"+j, \"aaa\", storedTextType));\n      doc.add(newField(\"f\"+j, \"aaa\", storedTextType));\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(100, reader.maxDoc());\n    assertEquals(100, reader.numDocs());\n    for(int j=0;j<100;j++) {\n      assertEquals(1, reader.docFreq(new Term(\"a\"+j, \"aaa\"+j)));\n      assertEquals(1, reader.docFreq(new Term(\"b\"+j, \"aaa\"+j)));\n      assertEquals(1, reader.docFreq(new Term(\"c\"+j, \"aaa\"+j)));\n      assertEquals(1, reader.docFreq(new Term(\"d\"+j, \"aaa\")));\n      assertEquals(1, reader.docFreq(new Term(\"e\"+j, \"aaa\")));\n      assertEquals(1, reader.docFreq(new Term(\"f\"+j, \"aaa\")));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57dea9cc0cdda318a986edb0250c26cee1e8bb19"],"57dea9cc0cdda318a986edb0250c26cee1e8bb19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}