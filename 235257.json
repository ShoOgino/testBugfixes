{"path":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    EasyMock.reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    EasyMock.reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    EasyMock.reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      BlobContentRef getBlobIncRef(String key, Decoder decoder, String url, String sha256) {\n        if(!Objects.equals(sha256, BlobRepositoryMockingTest.this.sha256)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return new BlobContentRef(new BlobContent(key, filecontent)) ;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      BlobContentRef getBlobIncRef(String key, Decoder decoder, String url, String sha256) {\n        if(!Objects.equals(sha256, BlobRepositoryMockingTest.this.sha256)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return new BlobContentRef(new BlobContent(key, filecontent)) ;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      BlobContentRef getBlobIncRef(String key, Decoder decoder, String url, String sha256) {\n        if(!Objects.equals(sha256, BlobRepositoryMockingTest.this.sha256)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return new BlobContentRef(new BlobContent(key, filecontent)) ;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws IllegalAccessException, NoSuchFieldException {\n    blobFetched = false;\n    blobKey = \"\";\n    reset(mocks);\n    repository = new BlobRepository(mockContainer) {\n      @Override\n      ByteBuffer fetchBlob(String key) {\n        blobKey = key;\n        blobFetched = true;\n        return blobData;\n      }\n\n      @Override\n      ByteBuffer fetchFromUrl(String key, String url) {\n        if(!Objects.equals(url, BlobRepositoryMockingTest.this.url)) return null;\n        blobKey = key;\n        blobFetched = true;\n        return filecontent;\n      }\n\n      @Override\n      ConcurrentHashMap<String, BlobContent> createMap() {\n        return mapMock;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"627e70d5711ab39d080a080f089685268525f54d":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["627e70d5711ab39d080a080f089685268525f54d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["713122036535651642e6d4fe57ce12b449e18473"],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"627e70d5711ab39d080a080f089685268525f54d":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"713122036535651642e6d4fe57ce12b449e18473":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["627e70d5711ab39d080a080f089685268525f54d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}