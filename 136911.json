{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":["893d07555f01912f57b453a320e4d46363a31b50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws CorruptIndexException, IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit, DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return open(commit, Collections.emptyMap());\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return StandardDirectoryReader.open(commit.getDirectory(), commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexCommit).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n   return StandardDirectoryReader.open(commit.getDirectory(), commit);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in the given\n   *  {@link IndexCommit}.\n   * @param commit the commit point to open\n   * @throws IOException if there is a low-level IO error\n   */\n  public static DirectoryReader open(final IndexCommit commit) throws IOException {\n    return open(commit, Collections.emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a45bec74b98f6fc05f52770cfb425739e6563960":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a45bec74b98f6fc05f52770cfb425739e6563960","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}