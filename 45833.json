{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CharSequence...).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CharSequence...).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CharSequence...).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying an existing path given as an\n   * array of strings.\n   * <P>\n   * The new object occupies exactly the space it needs, without any spare\n   * capacity. This is the expected behavior in the typical use case, where\n   * this constructor is used to create a temporary object which is never\n   * reused.\n   */\n  public CategoryPath(CharSequence... components) {\n    this.ncomponents = (short) components.length;\n    this.ends = new short[ncomponents];\n    if (ncomponents > 0) {\n      this.ends[0] = (short) components[0].length();\n      for (int i = 1; i < ncomponents; i++) {\n        this.ends[i] = (short) (this.ends[i - 1] + components[i]\n            .length());\n      }\n      this.chars = new char[this.ends[ncomponents - 1]];\n      CharSequence cs = components[0];\n      if (cs instanceof String) {\n        ((String) cs).getChars(0, cs.length(), this.chars, 0);\n      } else {\n        for (int j = 0, k = cs.length(); j < k; j++) {\n          this.chars[j] = cs.charAt(j);\n        }\n      }\n      for (int i = 1; i < ncomponents; i++) {\n        cs = components[i];\n        int offset = this.ends[i - 1];\n        if (cs instanceof String) {\n          ((String) cs).getChars(0, cs.length(), this.chars, offset);\n        } else {\n          for (int j = 0, k = cs.length(); j < k; j++) {\n            this.chars[j + offset] = cs.charAt(j);\n          }\n        }\n      }\n    } else {\n      this.chars = new char[0];\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying an existing path given as an\n   * array of strings.\n   * <P>\n   * The new object occupies exactly the space it needs, without any spare\n   * capacity. This is the expected behavior in the typical use case, where\n   * this constructor is used to create a temporary object which is never\n   * reused.\n   */\n  public CategoryPath(CharSequence... components) {\n    this.ncomponents = (short) components.length;\n    this.ends = new short[ncomponents];\n    if (ncomponents > 0) {\n      this.ends[0] = (short) components[0].length();\n      for (int i = 1; i < ncomponents; i++) {\n        this.ends[i] = (short) (this.ends[i - 1] + components[i]\n            .length());\n      }\n      this.chars = new char[this.ends[ncomponents - 1]];\n      CharSequence cs = components[0];\n      if (cs instanceof String) {\n        ((String) cs).getChars(0, cs.length(), this.chars, 0);\n      } else {\n        for (int j = 0, k = cs.length(); j < k; j++) {\n          this.chars[j] = cs.charAt(j);\n        }\n      }\n      for (int i = 1; i < ncomponents; i++) {\n        cs = components[i];\n        int offset = this.ends[i - 1];\n        if (cs instanceof String) {\n          ((String) cs).getChars(0, cs.length(), this.chars, offset);\n        } else {\n          for (int j = 0, k = cs.length(); j < k; j++) {\n            this.chars[j + offset] = cs.charAt(j);\n          }\n        }\n      }\n    } else {\n      this.chars = new char[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CharSequence...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new CategoryPath object, copying an existing path given as an\n   * array of strings.\n   * <P>\n   * The new object occupies exactly the space it needs, without any spare\n   * capacity. This is the expected behavior in the typical use case, where\n   * this constructor is used to create a temporary object which is never\n   * reused.\n   */\n  public CategoryPath(CharSequence... components) {\n    this.ncomponents = (short) components.length;\n    this.ends = new short[ncomponents];\n    if (ncomponents > 0) {\n      this.ends[0] = (short) components[0].length();\n      for (int i = 1; i < ncomponents; i++) {\n        this.ends[i] = (short) (this.ends[i - 1] + components[i]\n            .length());\n      }\n      this.chars = new char[this.ends[ncomponents - 1]];\n      CharSequence cs = components[0];\n      if (cs instanceof String) {\n        ((String) cs).getChars(0, cs.length(), this.chars, 0);\n      } else {\n        for (int j = 0, k = cs.length(); j < k; j++) {\n          this.chars[j] = cs.charAt(j);\n        }\n      }\n      for (int i = 1; i < ncomponents; i++) {\n        cs = components[i];\n        int offset = this.ends[i - 1];\n        if (cs instanceof String) {\n          ((String) cs).getChars(0, cs.length(), this.chars, offset);\n        } else {\n          for (int j = 0, k = cs.length(); j < k; j++) {\n            this.chars[j + offset] = cs.charAt(j);\n          }\n        }\n      }\n    } else {\n      this.chars = new char[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CharSequence...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new CategoryPath object, copying an existing path given as an\n   * array of strings.\n   * <P>\n   * The new object occupies exactly the space it needs, without any spare\n   * capacity. This is the expected behavior in the typical use case, where\n   * this constructor is used to create a temporary object which is never\n   * reused.\n   */\n  public CategoryPath(CharSequence... components) {\n    this.ncomponents = (short) components.length;\n    this.ends = new short[ncomponents];\n    if (ncomponents > 0) {\n      this.ends[0] = (short) components[0].length();\n      for (int i = 1; i < ncomponents; i++) {\n        this.ends[i] = (short) (this.ends[i - 1] + components[i]\n            .length());\n      }\n      this.chars = new char[this.ends[ncomponents - 1]];\n      CharSequence cs = components[0];\n      if (cs instanceof String) {\n        ((String) cs).getChars(0, cs.length(), this.chars, 0);\n      } else {\n        for (int j = 0, k = cs.length(); j < k; j++) {\n          this.chars[j] = cs.charAt(j);\n        }\n      }\n      for (int i = 1; i < ncomponents; i++) {\n        cs = components[i];\n        int offset = this.ends[i - 1];\n        if (cs instanceof String) {\n          ((String) cs).getChars(0, cs.length(), this.chars, offset);\n        } else {\n          for (int j = 0, k = cs.length(); j < k; j++) {\n            this.chars[j + offset] = cs.charAt(j);\n          }\n        }\n      }\n    } else {\n      this.chars = new char[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}