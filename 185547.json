{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#init(Map[String,Object],Map[String,Object],Map[String,Object],Map[String,Object]).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#init(Map[String,Object],Map[String,Object],Map[String,Object],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void init(Map<String, Object> managerState, Map<String, Object> clusterState, Map<String, Object> nodeState,\n                    Map<String, Object> distribState) throws Exception {\n    Objects.requireNonNull(managerState);\n    Objects.requireNonNull(clusterState);\n    Objects.requireNonNull(nodeState);\n    Objects.requireNonNull(distribState);\n    this.timeSource = TimeSource.get((String)managerState.getOrDefault(\"timeSource\", \"simTime:50\"));\n    this.clusterStateProvider = new SnapshotClusterStateProvider(clusterState);\n    this.nodeStateProvider = new SnapshotNodeStateProvider(nodeState);\n    this.distribStateManager = new SnapshotDistribStateManager(distribState);\n\n    SimUtils.checkConsistency(this, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#init(Map[String,Object],Map[String,Object],Map[String,Object],Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#init(Map[String,Object],Map[String,Object],Map[String,Object],Map[String,Object]).mjava","sourceNew":"  private void init(Map<String, Object> managerState, Map<String, Object> clusterState, Map<String, Object> nodeState,\n                    Map<String, Object> distribState, Map<String, Object> autoscalingJson) throws Exception {\n    Objects.requireNonNull(managerState);\n    Objects.requireNonNull(clusterState);\n    Objects.requireNonNull(nodeState);\n    Objects.requireNonNull(distribState);\n    this.timeSource = TimeSource.get((String)managerState.getOrDefault(\"timeSource\", \"simTime:50\"));\n    this.clusterStateProvider = new SnapshotClusterStateProvider(clusterState);\n    this.nodeStateProvider = new SnapshotNodeStateProvider(nodeState);\n    if (autoscalingJson == null || autoscalingJson.isEmpty()) {\n      this.distribStateManager = new SnapshotDistribStateManager(distribState);\n    } else {\n      this.distribStateManager = new SnapshotDistribStateManager(distribState, new AutoScalingConfig(autoscalingJson));\n    }\n\n    SimUtils.checkConsistency(this, null);\n  }\n\n","sourceOld":"  private void init(Map<String, Object> managerState, Map<String, Object> clusterState, Map<String, Object> nodeState,\n                    Map<String, Object> distribState) throws Exception {\n    Objects.requireNonNull(managerState);\n    Objects.requireNonNull(clusterState);\n    Objects.requireNonNull(nodeState);\n    Objects.requireNonNull(distribState);\n    this.timeSource = TimeSource.get((String)managerState.getOrDefault(\"timeSource\", \"simTime:50\"));\n    this.clusterStateProvider = new SnapshotClusterStateProvider(clusterState);\n    this.nodeStateProvider = new SnapshotNodeStateProvider(nodeState);\n    this.distribStateManager = new SnapshotDistribStateManager(distribState);\n\n    SimUtils.checkConsistency(this, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3d2a34ea3732f91149b31bcad82026ad85fda69"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}