{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      payloadPointer[level] += skipStream.readVInt();\n    }\n    \n    return delta;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f74d65ab3ad7b1abf870f94166f5b41b85e84ecd","date":1297887586,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      payloadPointer[level] += skipStream.readVInt();\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      payloadPointer[level] += skipStream.readVInt();\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      payloadPointer[level] += skipStream.readVInt();\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert !omitTF || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert !omitTF || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert !omitTF || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert !omitTF || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert !omitTF || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (!omitTF) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (!omitTF) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#readSkipData(int,IndexInput).mjava","sourceNew":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","sourceOld":"  @Override\n  protected int readSkipData(int level, IndexInput skipStream) throws IOException {\n    int delta;\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !currentFieldStoresPayloads;\n    if (currentFieldStoresPayloads) {\n      // the current field stores payloads.\n      // if the doc delta is odd then we have\n      // to read the current payload length\n      // because it differs from the length of the\n      // previous payload\n      delta = skipStream.readVInt();\n      if ((delta & 1) != 0) {\n        payloadLength[level] = skipStream.readVInt();\n      }\n      delta >>>= 1;\n    } else {\n      delta = skipStream.readVInt();\n    }\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      freqIndex[level].read(skipStream, false);\n    }\n    docIndex[level].read(skipStream, false);\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      posIndex[level].read(skipStream, false);\n      if (currentFieldStoresPayloads) {\n        payloadPointer[level] += skipStream.readVInt();\n      }\n    }\n    \n    return delta;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e19ec8535092055101db3ede419e136b73d235ac"],"e19ec8535092055101db3ede419e136b73d235ac":["f74d65ab3ad7b1abf870f94166f5b41b85e84ecd"],"f74d65ab3ad7b1abf870f94166f5b41b85e84ecd":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","f74d65ab3ad7b1abf870f94166f5b41b85e84ecd"],"1eb46686a27187e42311e77666a2c7026f461ebc":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e19ec8535092055101db3ede419e136b73d235ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f74d65ab3ad7b1abf870f94166f5b41b85e84ecd","e19ec8535092055101db3ede419e136b73d235ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","e19ec8535092055101db3ede419e136b73d235ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","f74d65ab3ad7b1abf870f94166f5b41b85e84ecd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"e19ec8535092055101db3ede419e136b73d235ac":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f74d65ab3ad7b1abf870f94166f5b41b85e84ecd":["e19ec8535092055101db3ede419e136b73d235ac","f1bdbf92da222965b46c0a942c3857ba56e5c638","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f74d65ab3ad7b1abf870f94166f5b41b85e84ecd","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1eb46686a27187e42311e77666a2c7026f461ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}