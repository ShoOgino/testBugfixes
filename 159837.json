{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.TLOG, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.PULL, 1)).get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.TLOG, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.PULL, 1)).get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.TLOG, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.PULL, 1)).get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.TLOG, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.PULL, 1)).get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.TLOG, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName,  \"shardC\", Replica.Type.PULL, 1)).get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13021\")\n  public void testCreateAndDeleteShard() throws Exception {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.getSolrClient().waitForState(collectionName, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlice(\"shardC\") != null); \n    \n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13021\")\n  public void testCreateAndDeleteShard() throws Exception {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.getSolrClient().waitForState(collectionName, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlice(\"shardC\") != null); \n    \n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13021\")\n  public void testCreateAndDeleteShard() throws Exception {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response\n        = CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardA,shardB\", 1, 1, 1)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 6);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(6, coresStatus.size());\n\n    // Add a shard to the implicit collection\n    response = CollectionAdminRequest.createShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.getSolrClient().waitForState(collectionName, 30, TimeUnit.SECONDS, (l,c) -> c != null && c.getSlice(\"shardC\") != null); \n    \n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(3, coresStatus.size());\n    int replicaTlog = 0;\n    int replicaNrt = 0;\n    int replicaPull = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"shardC_replica_t\")) replicaTlog++;\n      else if (coreName.contains(\"shardC_replica_n\")) replicaNrt++;\n      else replicaPull++;\n    }\n    assertEquals(1, replicaNrt);\n    assertEquals(1, replicaTlog);\n    assertEquals(1, replicaPull);\n\n    response = CollectionAdminRequest.deleteShard(collectionName, \"shardC\").process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","61c45e99cf6676da48f19d7511c73712ad39402b"],"a52341299179de5479672f7cf518bf4b173f34b3":["61c45e99cf6676da48f19d7511c73712ad39402b","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"61c45e99cf6676da48f19d7511c73712ad39402b":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"922ddd897402a6df25c766ea8300443be5e82b3d":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["61c45e99cf6676da48f19d7511c73712ad39402b","f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}