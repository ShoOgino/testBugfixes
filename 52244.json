{"path":"src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],SolrDocumentModifier,Map[SolrDocument,Integer]).mjava","commits":[{"id":"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8","date":1250620150,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],SolrDocumentModifier,Map[SolrDocument,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param docModifier The {@link SolrDocumentModifier}\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields, SolrDocumentModifier docModifier,\n      Map<SolrDocument, Integer> ids ) throws IOException{\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      if (docModifier != null) {\n        docModifier.process(doc);\n      }\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0759b72726fa1c9e01f190aca788835d3fde80","date":1250699004,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#docListToSolrDocumentList(DocList,SolrIndexSearcher,Set[String],SolrDocumentModifier,Map[SolrDocument,Integer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a DocList to a SolrDocumentList\n   *\n   * The optional param \"ids\" is populated with the lucene document id\n   * for each SolrDocument.\n   *\n   * @param docs The {@link org.apache.solr.search.DocList} to convert\n   * @param searcher The {@link org.apache.solr.search.SolrIndexSearcher} to use to load the docs from the Lucene index\n   * @param fields The names of the Fields to load\n   * @param docModifier The {@link SolrDocumentModifier}\n   * @param ids A map to store the ids of the docs\n   * @return The new {@link org.apache.solr.common.SolrDocumentList} containing all the loaded docs\n   * @throws java.io.IOException if there was a problem loading the docs\n   * @since solr 1.4\n   */\n  public static SolrDocumentList docListToSolrDocumentList(\n      DocList docs,\n      SolrIndexSearcher searcher,\n      Set<String> fields, SolrDocumentModifier docModifier,\n      Map<SolrDocument, Integer> ids ) throws IOException{\n    DocumentBuilder db = new DocumentBuilder(searcher.getSchema());\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(docs.matches());\n    list.setMaxScore(docs.maxScore());\n    list.setStart(docs.offset());\n\n    DocIterator dit = docs.iterator();\n\n    while (dit.hasNext()) {\n      int docid = dit.nextDoc();\n\n      Document luceneDoc = searcher.doc(docid, fields);\n      SolrDocument doc = new SolrDocument();\n      db.loadStoredFields(doc, luceneDoc);\n\n      // this may be removed if XMLWriter gets patched to\n      // include score from doc iterator in solrdoclist\n      if (docs.hasScores()) {\n        doc.addField(\"score\", dit.score());\n      } else {\n        doc.addField(\"score\", 0.0f);\n      }\n\n      if (docModifier != null) {\n        docModifier.process(doc);\n      }\n      list.add( doc );\n\n      if( ids != null ) {\n        ids.put( doc, new Integer(docid) );\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ca0759b72726fa1c9e01f190aca788835d3fde80":["afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8":["ca0759b72726fa1c9e01f190aca788835d3fde80"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["afabe5bcb5f6e1f562673b9cdd9f5d550ad095e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca0759b72726fa1c9e01f190aca788835d3fde80":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca0759b72726fa1c9e01f190aca788835d3fde80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}